<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>simple blog</title>
  
  <subtitle>try your best</subtitle>
  <link href="https://hzy2003628.top/atom.xml" rel="self"/>
  
  <link href="https://hzy2003628.top/"/>
  <updated>2023-11-13T12:14:00.848Z</updated>
  <id>https://hzy2003628.top/</id>
  
  <author>
    <name>dwb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>刷题记录reverse9</title>
    <link href="https://hzy2003628.top/2023/11/13/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse9/"/>
    <id>https://hzy2003628.top/2023/11/13/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse9/</id>
    <published>2023-11-13T12:14:00.641Z</published>
    <updated>2023-11-13T12:14:00.848Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF REVERSE</p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>下载附件，拖入XEXE，发现有壳<br><img src="https://img-blog.csdnimg.cn/1c7cfad24a004f429250b018e8769444.png" alt="在这里插入图片描述"><br>用kali脱壳后拖入64位IDA，找到关键函数<br><img src="https://img-blog.csdnimg.cn/68fd2830952649969f8a54baba0faaf1.png" alt="在这里插入图片描述"><br>跟进sub_4009AE<br>脚本：</p><pre><code class="hljs python">flag=<span class="hljs-string">&#x27;&#x27;</span>flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-number">166163712</span>//<span class="hljs-number">1629056</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">731332800</span> // <span class="hljs-number">6771600</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">357245568</span> // <span class="hljs-number">3682944</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">1074393000</span> // <span class="hljs-number">10431000</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">489211344</span> // <span class="hljs-number">3977328</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">518971936</span> // <span class="hljs-number">5138336</span>)flag+=<span class="hljs-string">&#x27;?&#x27;</span>flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">406741500</span> // <span class="hljs-number">7532250</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">294236496</span> // <span class="hljs-number">5551632</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">177305856</span> // <span class="hljs-number">3409728</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">650683500</span> // <span class="hljs-number">13013670</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">298351053</span> // <span class="hljs-number">6088797</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">386348487</span> // <span class="hljs-number">7884663</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">438258597</span> // <span class="hljs-number">8944053</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">249527520</span> // <span class="hljs-number">5198490</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">445362764</span> // <span class="hljs-number">4544518</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">981182160</span> // <span class="hljs-number">10115280</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">174988800</span> // <span class="hljs-number">3645600</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">493042704</span> // <span class="hljs-number">9667504</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">257493600</span> // <span class="hljs-number">5364450</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">767478780</span> // <span class="hljs-number">13464540</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">312840624</span> // <span class="hljs-number">5488432</span>)flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">1404511500</span> // <span class="hljs-number">14479500</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">316139670</span> // <span class="hljs-number">6451830</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">619005024</span> // <span class="hljs-number">6252576</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">372641472</span> // <span class="hljs-number">7763364</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">373693320</span> // <span class="hljs-number">7327320</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">498266640</span> // <span class="hljs-number">8741520</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">452465676</span> // <span class="hljs-number">8871876</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">208422720</span> // <span class="hljs-number">4086720</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">515592000</span> // <span class="hljs-number">9374400</span>)flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">719890500</span> // <span class="hljs-number">5759124</span>)<span class="hljs-built_in">print</span>(flag) <span class="hljs-comment">#flag&#123;e?65421110ba03099a1c039337&#125;</span></code></pre><p>差一位，穷举得出<br>别人用z3处理器的脚本</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *s = Solver()a1 = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):    a1[i] = Int(<span class="hljs-string">&#x27;a1[&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;]&#x27;</span>)s.add( <span class="hljs-number">1629056</span> * a1[<span class="hljs-number">0</span>] == <span class="hljs-number">166163712</span> )s.add( <span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] == <span class="hljs-number">731332800</span> )s.add( <span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] == <span class="hljs-number">357245568</span> )s.add( <span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] == <span class="hljs-number">1074393000</span> )s.add( <span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] == <span class="hljs-number">489211344</span> )s.add( <span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] == <span class="hljs-number">518971936</span> )s.add( <span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] == <span class="hljs-number">406741500</span> )s.add( <span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] == <span class="hljs-number">294236496</span> )s.add( <span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] == <span class="hljs-number">177305856</span> )s.add( <span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] == <span class="hljs-number">650683500</span> )s.add( <span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] == <span class="hljs-number">298351053</span> )s.add( <span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] == <span class="hljs-number">386348487</span> )s.add( <span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] == <span class="hljs-number">438258597</span> )s.add( <span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] == <span class="hljs-number">249527520</span> )s.add( <span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] == <span class="hljs-number">445362764</span> )s.add( <span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] == <span class="hljs-number">174988800</span> )s.add( <span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] == <span class="hljs-number">981182160</span> )s.add( <span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] == <span class="hljs-number">493042704</span> )s.add( <span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] == <span class="hljs-number">257493600</span> )s.add( <span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] == <span class="hljs-number">767478780</span> )s.add( <span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] == <span class="hljs-number">312840624</span> )s.add( <span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] == <span class="hljs-number">1404511500</span> )s.add( <span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] == <span class="hljs-number">316139670</span> )s.add( <span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] == <span class="hljs-number">619005024</span> )s.add( <span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] == <span class="hljs-number">372641472</span> )s.add( <span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] == <span class="hljs-number">373693320</span> )s.add( <span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] == <span class="hljs-number">498266640</span> )s.add( <span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] == <span class="hljs-number">452465676</span> )s.add( <span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] == <span class="hljs-number">208422720</span> )s.add( <span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )s.add(<span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>)s.check()<span class="hljs-built_in">print</span>(s.model())</code></pre><h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><p>拖入64位IDA，F5反编译<br><img src="https://img-blog.csdnimg.cn/c6e1cbdb8b914a85b9891cc1386af60b.png" alt="在这里插入图片描述"><br>跟进dword_40F040，快捷字符转换<br><img src="https://img-blog.csdnimg.cn/88788536bdc04b84bf7ebd2e0622b260.png" alt="在这里插入图片描述"><br>脚本：</p><pre><code class="hljs python">a1 = [<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">23</span>,<span class="hljs-number">7</span>,<span class="hljs-number">24</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">3</span>,<span class="hljs-number">17</span>,<span class="hljs-number">32</span>,<span class="hljs-number">29</span>,<span class="hljs-number">11</span>,<span class="hljs-number">30</span>,<span class="hljs-number">27</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">2</span>,<span class="hljs-number">25</span>,<span class="hljs-number">5</span>,<span class="hljs-number">31</span>,<span class="hljs-number">8</span>,<span class="hljs-number">18</span>,<span class="hljs-number">26</span>,<span class="hljs-number">28</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>]a2 = [<span class="hljs-number">0x67</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x2B</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x5E</span>,<span class="hljs-number">0x5D</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x4D</span>]flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">33</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a2)):    a2[i]^=a1[i]    flag[a1[i]]=a2[i]<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):    flag[j]=<span class="hljs-built_in">chr</span>(flag[j])Mc=<span class="hljs-string">&quot;&quot;</span>.join(flag)<span class="hljs-built_in">print</span>(Mc)</code></pre><p>运行得到flag</p><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>简单脱壳题</p><h1 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h1><p>拖入64位IDA，F5反编译，找到main函数<br>程序调用了 __gmpz_init_set_str 函数，通过搜索得知这是一个 GNU 高精度算法库<br>有三段字符串，查找知道其中65537在RSA其中常见<br><img src="https://img-blog.csdnimg.cn/d5e6f103d2f04cc49c5e083e02d57391.png" alt="在这里插入图片描述"><br>c=ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35<br>n=103461035900816914121390101299049044413950405173712170434161686539878160984549<br>e=65537<br>分解n，得到<br>p=366669102002966856876605669837014229419<br>q=282164587459512124844245113950593348271<br>RSA解密脚本：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<span class="hljs-keyword">import</span> binasciip = <span class="hljs-number">282164587459512124844245113950593348271</span>q = <span class="hljs-number">366669102002966856876605669837014229419</span>c = <span class="hljs-number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span>n = <span class="hljs-number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>e = <span class="hljs-number">65537</span>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)d = gmpy2.invert(gmpy2.mpz(e), phi_n)flag = gmpy2.powmod(c, d, n)<span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:]))</code></pre><p>运行得到flag</p><h1 id="usualCrypt"><a href="#usualCrypt" class="headerlink" title="usualCrypt"></a>usualCrypt</h1><p>拖入32位IDA，反编译<br>sub_401080是加密函数，跟进看看<br>主体代码是base64加密，但在加密前执行了sub_401000()<br><img src="https://img-blog.csdnimg.cn/02043dd22493492789134ed2a1a0d68f.png" alt="在这里插入图片描述"><br>byte_40E0AA,byte_40E0A0，快捷键R转换字符型，调用table<br><img src="https://img-blog.csdnimg.cn/56a0860f3a2b4636aa99c3a759b04680.png#pic_center" alt="在这里插入图片描述"><br>加密后，该函数又调用了sub_401030<br>这个子函数把字符串每个英文字符进行了大小写转换，最后形成数据段保存的密码byte_40E0E4<img src="https://img-blog.csdnimg.cn/2608c5e175a74126bc90bb958b135733.png" alt="在这里插入图片描述"><br>这个子函数把字符串每个英文字符进行了大小写转换，最后形成数据段保存的密码byte_40E0E4<br>脚本：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64flag = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-built_in">dict</span> = &#123;&#125;; offset = <span class="hljs-number">10</span>orgin = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(orgin)):    <span class="hljs-built_in">dict</span>[orgin[i]] = orgin[i]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>, <span class="hljs-number">15</span>): <span class="hljs-comment">#sub_401000()</span>    <span class="hljs-built_in">dict</span>[orgin[i]] , <span class="hljs-built_in">dict</span>[orgin[i+offset]] = <span class="hljs-built_in">dict</span>[orgin[i+offset]] , <span class="hljs-built_in">dict</span>[orgin[i]] <span class="hljs-comment"># 恢复base64密钥表</span>secret = <span class="hljs-string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span>.swapcase() <span class="hljs-comment">#sub_401030()</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(secret)):    flag += <span class="hljs-built_in">dict</span>[secret[i]] flag = base64.b64decode(flag)<span class="hljs-built_in">print</span>(flag)</code></pre><h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>这道题考察的就是花指令和封装函数<br>首先附件下载后拖入exe查壳，有壳，用kali脱壳拖入32位IDA，发现不能F5反编译<br>看汇编，jnz跳转到下一条指令，相当于没跳转，nop掉。下面call了一个错误地址，按d转为数据，nop掉第一个字节（改成90）。<br>此时仍然无法反编译<br>选中所有核心代码，p键封装函数，F5反汇编看到迷宫判断条件<br><img src="https://img-blog.csdnimg.cn/d6b08505b8f44eb9b6f265063a9ac0e2.png" alt="在这里插入图片描述"></p><pre><code class="hljs bash">*******+*********s******aaas****aas*******s**F******sddd**************</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF REVERSE&lt;/p&gt;
&lt;h1 id=&quot;re&quot;&gt;&lt;a href=&quot;#re&quot; class=&quot;headerlink&quot; title=&quot;re&quot;&gt;&lt;/a&gt;re&lt;/h1&gt;&lt;p&gt;下载附件，拖入XEXE，发现有壳&lt;br&gt;&lt;img src=&quot;https://img-blog.c</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>记RE出题</title>
    <link href="https://hzy2003628.top/2023/11/07/%E8%AE%B0RE%E5%87%BA%E9%A2%98/"/>
    <id>https://hzy2003628.top/2023/11/07/%E8%AE%B0RE%E5%87%BA%E9%A2%98/</id>
    <published>2023-11-07T11:41:13.045Z</published>
    <updated>2023-11-07T12:53:21.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>pyc反编译，运行python代码得到flag</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hi</span>(<span class="hljs-params">name</span>):    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Oh_<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    print_hi(<span class="hljs-string">&#x27;RE_is_f5n&#x27;</span>)</code></pre><h1 id="密码表"><a href="#密码表" class="headerlink" title="密码表"></a>密码表</h1><p>考察阅读代码的能力<br>python代码：</p><pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash/python</span>buf=[]v14=[]v10=<span class="hljs-string">&quot;9F!R9k!w3U!tM88W90d&quot;</span>v7=<span class="hljs-string">&quot;9517384206&quot;</span>v20=<span class="hljs-string">&quot;MNBVCXZASDFGHIJKLPOIUYQWERT&quot;</span>v15=<span class="hljs-string">&quot;qeadzcwsxryfhvntgbmlkjuiop&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">19</span>):    v14.append(v10[i])<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">19</span>):    <span class="hljs-keyword">if</span>(v14[i]==<span class="hljs-string">&#x27;!&#x27;</span>):        buf.append(<span class="hljs-number">95</span>)    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v15)):        <span class="hljs-keyword">if</span>(v14[i]==v15[j]):            buf.append(j+<span class="hljs-number">65</span>)            <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v20)):        <span class="hljs-keyword">if</span>(v14[i]==v20[j]):            buf.append(j+<span class="hljs-number">97</span>)            <span class="hljs-keyword">continue</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v7)):        <span class="hljs-keyword">if</span>(v14[i]==v7[j]):            buf.append(j+<span class="hljs-number">48</span>)            <span class="hljs-keyword">continue</span><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf:    <span class="hljs-built_in">str</span>+=<span class="hljs-built_in">chr</span>(i)<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)</code></pre><p>C语言代码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>  </span>  <span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;      <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>];      <span class="hljs-type">char</span> v14[<span class="hljs-number">20</span>];      <span class="hljs-type">char</span> v10[] = <span class="hljs-string">&quot;9F!R9k!w3U!tM88W90d&quot;</span>;      <span class="hljs-type">char</span> v7[] = <span class="hljs-string">&quot;9517384206&quot;</span>;      <span class="hljs-type">char</span> v20[] = <span class="hljs-string">&quot;MNBVCXZASDFGHIJKLPOIUYQWERT&quot;</span>;      <span class="hljs-type">char</span> v15[] = <span class="hljs-string">&quot;qeadzcwsxryfhvntgbmlkjuiop&quot;</span>;            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;          v14[i] = v10[i];      &#125;      v14[<span class="hljs-number">19</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 字符串以&#x27;\0&#x27;结尾  </span>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;          <span class="hljs-keyword">if</span>(v14[i] == <span class="hljs-string">&#x27;!&#x27;</span>) &#123;              buf[i] = <span class="hljs-number">95</span>;          &#125; <span class="hljs-keyword">else</span> &#123;              <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v15); j++) &#123;                  <span class="hljs-keyword">if</span>(v14[i] == v15[j]) &#123;                      buf[i] = j + <span class="hljs-number">65</span>;                      <span class="hljs-keyword">break</span>;                  &#125;              &#125;              <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v20); j++) &#123;                  <span class="hljs-keyword">if</span>(v14[i] == v20[j]) &#123;                      buf[i] = j + <span class="hljs-number">97</span>;                      <span class="hljs-keyword">break</span>;                  &#125;              &#125;              <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v7); j++) &#123;                  <span class="hljs-keyword">if</span>(v14[i] == v7[j]) &#123;                      buf[i] = j + <span class="hljs-number">48</span>;                      <span class="hljs-keyword">break</span>;                  &#125;              &#125;          &#125;      &#125;      buf[<span class="hljs-number">19</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 字符串以&#x27;\0&#x27;结尾  </span>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  &#125;</code></pre><p>flag[0k_z0U_G4u_Pa55x08D]</p><h1 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h1><p>文件拖入exe，发现有壳，需要脱壳<br>工具用的是kali自带脱壳工具，将文件拖入虚拟机，执行命令：</p><blockquote><p>upx -d 文件名</p></blockquote><p>即可完成脱壳，将脱壳后的文件拖入64位IDA，反编译后找到flag为flag[YO6_d1d_@_g00d_j0b]</p><h1 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h1><p>题目源码</p><pre><code class="hljs python">crack = <span class="hljs-string">&#x27;*&amp;0*********0*********0*********00000*********0******0000******0*********0*0000****000**0********$0*&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">s, list1</span>):    l = <span class="hljs-built_in">input</span>()    flag = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">and</span> list1[s + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:            s += <span class="hljs-number">1</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:            s -= <span class="hljs-number">1</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">and</span> list1[s + <span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:            s += <span class="hljs-number">10</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;w&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:            s -= <span class="hljs-number">10</span>            <span class="hljs-keyword">continue</span>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;$&#x27;</span>:            flag = <span class="hljs-number">1</span>            <span class="hljs-keyword">continue</span>        flag = <span class="hljs-number">2</span>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;oh wrong&#x27;</span>)    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(l) != <span class="hljs-number">25</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong format1&#x27;</span>)    <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">1</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you solved, flag is AGCTF&#123;your input&#125;&#x27;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong format2&#x27;</span>)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    crack_list = <span class="hljs-built_in">list</span>(crack)    s = crack_list.index(<span class="hljs-string">&#x27;&amp;&#x27;</span>)    run(s, crack_list)</code></pre><p>迷宫题，为一个10*10的迷宫，flag就是迷宫的路线<br>flag[dsssddddssaaasssddwdddssa]</p><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>出自攻防世界<br>拖入64位IDA，F5反编译，查看伪代码</p><pre><code class="hljs csharp">_main();  v11 = <span class="hljs-number">0</span>;  v9 = <span class="hljs-number">0</span>;  puts(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    v8 = getchar();    <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">10</span> )       <span class="hljs-keyword">break</span>;    v7 = key[v9 % <span class="hljs-number">4</span>] ^ v8;         <span class="hljs-comment">//输入的字符，进行异或操作，得到v7</span>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                      &#123;      v4 = v7--;               <span class="hljs-comment">//循环v7次</span>      <span class="hljs-keyword">if</span> ( v4 &lt;= <span class="hljs-number">0</span> )            <span class="hljs-comment">//此while循环是向s[]中输入v7个1</span>        <span class="hljs-keyword">break</span>;      v3 = v11++;      s[v3] = <span class="hljs-number">1</span>;    &#125;    v5 = v11++;                  <span class="hljs-comment">//输出v7个1后，使用0与下一串1隔开</span>    s[v5] = <span class="hljs-number">0</span>;                      ++v9;  &#125;  <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">2559</span> )            <span class="hljs-comment">//输入的字符全部转化为1之后，不够2559个的话填充-1（255）</span>    s[v11++] = <span class="hljs-number">-1</span>;  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2559</span>; ++i )  &#123;    <span class="hljs-keyword">if</span> ( r[i] != s[i] )            <span class="hljs-comment">//进行比较</span>    &#123;      puts(<span class="hljs-string">&quot;Lose lose lose!&quot;</span>);      <span class="hljs-keyword">break</span>;    &#125;  &#125;  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2560</span> )    puts(<span class="hljs-string">&quot;Win win win!&quot;</span>);  system(<span class="hljs-string">&quot;pause&quot;</span>);  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>双击跟进key知道是‘SCNU’，脚本如下：</p><pre><code class="hljs python">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]key = <span class="hljs-string">&#x27;SCNU&#x27;</span>flag = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):    flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-number">4</span>]) ^ r[i])<span class="hljs-built_in">print</span>(flag)</code></pre><p>运行得flag为flag[Winn3r_n0t_L0s3r_#]</p><h1 id="rome"><a href="#rome" class="headerlink" title="rome"></a>rome</h1><p>出自buu<br>脚本：</p><pre><code class="hljs python">v15= [ <span class="hljs-string">&#x27;Q&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span> ]flag=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<span class="hljs-comment">#ascii表上有127个字符，一个一个试吧</span>        x=j        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x).isupper():            x=(x-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x).islower():            x=(x-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x)==v15[i]:            flag+=<span class="hljs-built_in">chr</span>(j)<span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)</code></pre><p>flag[Cae3ar_th4_Gre@t]</p><h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>得到附件为zip格式，改后缀为apk，用jadx打开<br>找到MainActivity，核心判断函数为check<br>分析函数内容，可以看出数组v0即是我们输入的注册码，根据if语句可以确定注册码的长度和s[]数组一样有31位，下面又有一个if语句判断即为我们的关键语句：s[v1] == (v0[v1] ^ 23)<br>因为flag字符都是ASCII码在0-127中，所以这种题目我们直接用python进行爆破，我们用m替换v1，范围是(0,31)，用i替换v0[v1]，i即为flag中的一个一个字符，最后爆破得到flag<br>脚本：</p><pre><code class="hljs python">s = [<span class="hljs-number">113</span>, <span class="hljs-number">123</span>, <span class="hljs-number">118</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>, <span class="hljs-number">94</span>, <span class="hljs-number">99</span>, <span class="hljs-number">72</span>, <span class="hljs-number">38</span>, <span class="hljs-number">68</span>, <span class="hljs-number">72</span>, <span class="hljs-number">87</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>, <span class="hljs-number">36</span>, <span class="hljs-number">118</span>, <span class="hljs-number">100</span>, <span class="hljs-number">78</span>, <span class="hljs-number">72</span>, <span class="hljs-number">87</span>, <span class="hljs-number">121</span>, <span class="hljs-number">83</span>, <span class="hljs-number">101</span>, <span class="hljs-number">39</span>, <span class="hljs-number">62</span>, <span class="hljs-number">94</span>, <span class="hljs-number">62</span>, <span class="hljs-number">38</span>, <span class="hljs-number">107</span>, <span class="hljs-number">115</span>, <span class="hljs-number">106</span>]flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>):      <span class="hljs-keyword">if</span>(s[m] == (i ^ <span class="hljs-number">23</span>)):         flag += <span class="hljs-built_in">chr</span>(i)<span class="hljs-built_in">print</span>(flag)</code></pre><p>flag[It_1S_@N_3asY_@nDr0)I)1|d]</p><h1 id="check"><a href="#check" class="headerlink" title="check"></a>check</h1><p>可以用IDA直接分析就是读取输入的字符串，然后逐个进行对比<br><img src="https://img-blog.csdnimg.cn/b1e0ab1e9e55491ab1d98dcc0a3bfbce.png" alt="在这里插入图片描述"></p><p>这里可以直接用IDA转化为char型就可以看出。<br>flag[hi!_ResWaY_Act]<br>题目源码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>      </span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>      </span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;   <span class="hljs-type">char</span> flag[<span class="hljs-number">20</span>];  <span class="hljs-comment">// 需要定义 flag 变量，这里假设 flag 的最大长度为 20  </span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入 flag：&quot;</span>);   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);  <span class="hljs-comment">// 从用户获取输入并存储在 flag 中  </span>   <span class="hljs-keyword">if</span> (flag[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp; flag[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;l&#x27;</span> &amp;&amp; flag[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; flag[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;g&#x27;</span> &amp;&amp; flag[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; flag[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;h&#x27;</span> &amp;&amp; flag[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;i&#x27;</span> &amp;&amp; flag[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;!&#x27;</span> &amp;&amp; flag[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp; flag[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;R&#x27;</span> &amp;&amp; flag[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp; flag[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp; flag[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;W&#x27;</span> &amp;&amp; flag[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; flag[<span class="hljs-number">14</span>] == <span class="hljs-string">&#x27;Y&#x27;</span> &amp;&amp; flag[<span class="hljs-number">15</span>] == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp; flag[<span class="hljs-number">16</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; flag[<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp; flag[<span class="hljs-number">18</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp; flag[<span class="hljs-number">19</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &#123;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes,this is a flag\n&quot;</span>);      getchar();   &#125;   <span class="hljs-keyword">else</span> &#123;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no,this is not a flag\n&quot;</span>);      getchar();   &#125;   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果你想明确返回一个值，你可以在这里添加 return 0;  </span>&#125;</code></pre><h1 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h1><p>签到题，打开IDA反编译就能看到flag<br>flag[Welcome_to_AGCTF]<br>源代码：</p><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span>  </span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;   <span class="hljs-type">char</span> flag[MAX_PATH];   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入flag：&quot;</span>);   <span class="hljs-built_in">fgets</span>(flag, <span class="hljs-built_in">sizeof</span>(flag), stdin);  <span class="hljs-comment">// 使用fgets代替gets_s  </span>   flag[<span class="hljs-built_in">strcspn</span>(flag, <span class="hljs-string">&quot;\n&quot;</span>)] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 将fgets读入的换行符替换为字符串结束符  </span>   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(flag) &lt;= <span class="hljs-number">16</span>) &#123;      <span class="hljs-built_in">MessageBoxW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;you wrong!!!&quot;</span>, <span class="hljs-string">L&quot;wrong&quot;</span>, MB_OK);   &#125;   <span class="hljs-keyword">else</span> &#123;      <span class="hljs-built_in">MessageBoxW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;flag&#123;Welcome_to_AGCTF&#125;&quot;</span>, <span class="hljs-string">L&quot;true&quot;</span>, MB_OK);   &#125;   <span class="hljs-built_in">getchar</span>();  <span class="hljs-comment">// 在程序退出前等待用户输入  </span>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 返回0表示程序正常退出  </span>&#125;</code></pre><h1 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h1><p>pyc反编译，得到很长串代码，运行可知是画图程序，答案就是画图结果<br>根据提示，flag为拼音小写，故flag为flag[haimianbaobao]</p><h1 id="dio"><a href="#dio" class="headerlink" title="dio"></a>dio</h1><p>无壳，拖入64位IDA，F5反编译。此题直接按照题目顺序即可<br>源代码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你知道dio吗？&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-type">char</span> w[] = <span class="hljs-string">&quot;ns!rv&amp;akz*mo(.&quot;</span>;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">14</span>;i++)&#123;      w[i] = w[i]^i;&#125;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">14</span>;i++)&#123;   w[i] = w[i] - <span class="hljs-number">3</span>;&#125;<span class="hljs-built_in">puts</span>(w);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; &#125;</code></pre><p>flag[ko no dio da! ]</p><h1 id="8-24"><a href="#8-24" class="headerlink" title="8.24"></a>8.24</h1><p>无壳，拖入64位IDA<br>思路是选取str8[]的前24位进行逆向解密<br>解密脚本：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-type">char</span> str8[] = <span class="hljs-string">&quot;Everythingnegativepressurechallengesisallanopportunityformetorise&quot;</span>;   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">24</span>;i++)   &#123;      str8[i] = str8[i]<span class="hljs-number">-2</span>;      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str8[i]);         &#125;   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>源代码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;男人 哈哈哈哈哈 什么我能说的？曼巴出去\n&quot;</span>);   <span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;laodawoxiangnilewuwuwu&quot;</span>;   <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;nengyuanzhichengdiyidashou&quot;</span>;   <span class="hljs-type">char</span> str3[] = <span class="hljs-string">&quot;sharkyeganle&quot;</span>;   <span class="hljs-type">char</span> str4[] = <span class="hljs-string">&quot;qishinatianwochulemingdaosimin&quot;</span>;   <span class="hljs-type">char</span> str5[] = <span class="hljs-string">&quot;kouyifuhuolaodakouerjiangliyigexiaobuding&quot;</span>;   <span class="hljs-type">char</span> str6[] = <span class="hljs-string">&quot;zhishengjiyeganle&quot;</span>;   <span class="hljs-type">char</span> str7[] = <span class="hljs-string">&quot;laodabiezhou&quot;</span>;   <span class="hljs-type">char</span> str8[] = <span class="hljs-string">&quot;Everythingnegativepressurechallengesisallanopportunityformetorise&quot;</span>;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please choose a sentence:\n&quot;</span>);   <span class="hljs-built_in">puts</span>(str1);   <span class="hljs-built_in">puts</span>(str2);   <span class="hljs-built_in">puts</span>(str3);   <span class="hljs-built_in">puts</span>(str4);   <span class="hljs-built_in">puts</span>(str5);   <span class="hljs-built_in">puts</span>(str6);   <span class="hljs-built_in">puts</span>(str7);   <span class="hljs-built_in">puts</span>(str8);   <span class="hljs-type">char</span> str0[] = <span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I hope you understand what I mean, and then you should know how many characters to take\n&quot;</span>);   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(str0);i++)   &#123;      str0[i] = (str0[i] + <span class="hljs-number">1</span>)*<span class="hljs-number">2</span>/<span class="hljs-number">2</span>;      str0[i] = str0[i] + <span class="hljs-number">1</span>;   &#125;   <span class="hljs-built_in">puts</span>(str0);   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>flag[Ctcpwrfglelce_rgtcnpcqqs]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;反编译&quot;&gt;&lt;a href=&quot;#反编译&quot; class=&quot;headerlink&quot; title=&quot;反编译&quot;&gt;&lt;/a&gt;反编译&lt;/h1&gt;&lt;p&gt;pyc反编译，运行python代码得到flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs python&quot;&gt;&lt;span c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse8</title>
    <link href="https://hzy2003628.top/2023/10/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse8/"/>
    <id>https://hzy2003628.top/2023/10/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse8/</id>
    <published>2023-10-21T11:40:57.453Z</published>
    <updated>2023-10-21T11:40:57.668Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF REVERSE</p><h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><p>首先要知道rsa加密<br>附件有两个，其中一个是公钥，得到e=65537，n=8693448229604811919066606200349480058890565601720302561721665405<br>8378322103517<br>利用网站<a href="http://www.factordb.com/index.php?%E7%9B%B4%E6%8E%A5%E5%88%86%E8%A7%A3N%E5%BE%97%E5%88%B0p%E5%92%8Cq%EF%BC%8Cp=">http://www.factordb.com/index.php?直接分解N得到p和q，p=</a> 285960468890451637935629440372639283459，q=304008741604601924494328155975272418463<br>知道了p和q后我们根据L＝lcm（p－1，q－1） （L为p－1、q－1的最小公倍数）就可以算出L，有了L和E可以根据1 &lt; D &lt; L，E＊D mod L ＝ 1算出D，有了D和N我们就可以根据明文＝密文^D mod N来解密出明文了</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">import</span> rsa  e = <span class="hljs-number">65537</span>n = <span class="hljs-number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>p = <span class="hljs-number">285960468890451637935629440372639283459</span>q = <span class="hljs-number">304008741604601924494328155975272418463</span>phin = (q-<span class="hljs-number">1</span>)*(p-<span class="hljs-number">1</span>)d = gmpy2.invert(e, phin)key = rsa.PrivateKey(n, e, <span class="hljs-built_in">int</span>(d), p, q)<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\CTF\\output\\flag.enc&quot;</span>, <span class="hljs-string">&quot;rb+&quot;</span>) <span class="hljs-keyword">as</span> f:    f = f.read()    <span class="hljs-built_in">print</span>(rsa.decrypt(f, key))</code></pre><p>注意：解这道题需要额外下载python的插件，但我现在用的是python3.11版本，没有找到对应版本的gmpy插件</p><h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p>附件有两个文件，output中全为数字，level1的文件拖入64位IDA，F5反编译阅读函数命令。</p><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **envp</span>)</span>&#123;  <span class="hljs-built_in">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span>  FILE *stream; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span>  <span class="hljs-built_in">char</span> ptr[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span>  unsigned __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span>  v7 = __readfsqword(<span class="hljs-number">0x28</span>u);  stream = fopen(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//打开文件flag用来读取</span>  fread(ptr, <span class="hljs-number">1u</span>LL, <span class="hljs-number">0x14</span>uLL, stream);<span class="hljs-comment">//读取并显示数据</span>  fclose(stream);<span class="hljs-comment">//关闭流stream</span>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">19</span>; ++i )<span class="hljs-comment">//进入for循环</span>  &#123;    <span class="hljs-keyword">if</span> ( (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (unsigned <span class="hljs-built_in">int</span>)(ptr[i] &lt;&lt; i));    <span class="hljs-keyword">else</span>      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (unsigned <span class="hljs-built_in">int</span>)(i * ptr[i]));  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>exp：</p><pre><code class="hljs python">a = [<span class="hljs-number">198</span>,<span class="hljs-number">232</span>,<span class="hljs-number">816</span>,<span class="hljs-number">200</span>,<span class="hljs-number">1536</span>,<span class="hljs-number">300</span>,<span class="hljs-number">6144</span>,<span class="hljs-number">984</span>,<span class="hljs-number">51200</span>,<span class="hljs-number">570</span>,<span class="hljs-number">92160</span>,<span class="hljs-number">1200</span>,<span class="hljs-number">565248</span>,<span class="hljs-number">756</span>,<span class="hljs-number">1474560</span>,<span class="hljs-number">800</span>,<span class="hljs-number">6291456</span>,<span class="hljs-number">1782</span>,<span class="hljs-number">65536000</span>]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>):    <span class="hljs-keyword">if</span> ((i+<span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>):        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i] &gt;&gt; (i+<span class="hljs-number">1</span>)), end=<span class="hljs-string">&quot;&quot;</span>)    <span class="hljs-keyword">else</span>:        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">chr</span>(a[i] // (i+<span class="hljs-number">1</span>)),end=<span class="hljs-string">&quot;&quot;</span>)</code></pre><p>运行结果用flag包上</p><h1 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h1><p>拖入32位IDA，F5反编译</p><pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input the first passwd(1): &quot;</span>); <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, Destination); <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Destination) != <span class="hljs-number">6</span> ) &#123;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Must be 6 characters!\n&quot;</span>);   <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>); &#125;</code></pre><p>从上述代码可知第一个密码长度为6，<em><strong>atoi</strong></em> 是将字符串转化成整型的函数</p><pre><code class="hljs cpp">v7 = <span class="hljs-built_in">atoi</span>(Destination); <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">100000</span> )   <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>);</code></pre><p>并且转化为整型的数要大于100000</p><pre><code class="hljs cpp"><span class="hljs-built_in">strcat</span>(Destination, <span class="hljs-string">&quot;@DBApp&quot;</span>);<span class="hljs-comment">//将@DBApp连接到密码后面</span>  v3 = <span class="hljs-built_in">strlen</span>(Destination);<span class="hljs-comment">//连接之后的长度为12</span></code></pre><p>sub_10400A函数是个加密函数，用来进行哈希加密的</p><pre><code class="hljs csharp"><span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">sub_401230</span>(<span class="hljs-params">BYTE *pbData, DWORD dwDataLen, LPSTR lpString1</span>)</span>&#123;  DWORD i; <span class="hljs-comment">// [esp+4Ch] [ebp-28h]</span>  CHAR String2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+50h] [ebp-24h] BYREF</span>  BYTE v6[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [esp+54h] [ebp-20h] BYREF</span>  DWORD pdwDataLen; <span class="hljs-comment">// [esp+68h] [ebp-Ch] BYREF</span>  HCRYPTHASH phHash; <span class="hljs-comment">// [esp+6Ch] [ebp-8h] BYREF</span>  HCRYPTPROV phProv; <span class="hljs-comment">// [esp+70h] [ebp-4h] BYREF</span>  <span class="hljs-keyword">if</span> ( !CryptAcquireContextA(&amp;phProv, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, <span class="hljs-number">0xF0000000</span>) )    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-keyword">if</span> ( CryptCreateHash(phProv, <span class="hljs-number">0x8004</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;phHash) )<span class="hljs-comment">// 创建一个空哈希对象</span>  &#123;    <span class="hljs-keyword">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span class="hljs-number">0</span>) )<span class="hljs-comment">// 对一块数据进行哈希，把它加到指定的哈希对象中</span>    &#123;      CryptGetHashParam(phHash, <span class="hljs-number">2u</span>, v6, &amp;pdwDataLen, <span class="hljs-number">0</span>);<span class="hljs-comment">// 得到一个哈希对象参数</span>      *lpString1 = <span class="hljs-number">0</span>;      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; pdwDataLen; ++i )      &#123;        wsprintfA(String2, <span class="hljs-string">&quot;%02X&quot;</span>, v6[i]);        lstrcatA(lpString1, String2);      &#125;      CryptDestroyHash(phHash);<span class="hljs-comment">// 销毁一个哈希对象</span>      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<span class="hljs-comment">// 用于释放从CryptAcquireContext调用返回的句柄      return 1;</span>    &#125;    <span class="hljs-keyword">else</span>    &#123;      CryptDestroyHash(phHash);      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;  &#125;  <span class="hljs-keyword">else</span>  &#123;    CryptReleaseContext(phProv, <span class="hljs-number">0</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  &#125;&#125;</code></pre><p>代码中的0x8004是特殊标识，是sha1算法<br>用python中的hashlib模块爆破第一部分密码</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlibstring=<span class="hljs-string">&#x27;@DBApp&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>,<span class="hljs-number">999999</span>):    flag=<span class="hljs-built_in">str</span>(i)+string    x = hashlib.sha1(flag.encode(<span class="hljs-string">&quot;utf8&quot;</span>))    y = x.hexdigest()    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == y:            <span class="hljs-built_in">print</span>(flag)            <span class="hljs-keyword">break</span></code></pre><p>结果为12321@DBApp，即第一部分密码为123321<br>第二部分密码同样为6位<br>研究函数sub_40100F</p><pre><code class="hljs csharp">hResInfo = FindResourceA(<span class="hljs-number">0</span>, (LPCSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">&quot;AAA&quot;</span>);  <span class="hljs-keyword">if</span> ( !hResInfo )    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  nNumberOfBytesToWrite = SizeofResource(<span class="hljs-number">0</span>, hResInfo);  hResData = LoadResource(<span class="hljs-number">0</span>, hResInfo);  <span class="hljs-keyword">if</span> ( !hResData )    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  lpBuffer = LockResource(hResData);  <span class="hljs-comment">//这一段代码的含义就是，从AAA文件中查找字符，然后如果没有找到就返回，找到了的话就计算出资源的大小，把资源第一个字符出的指针传给lpBuffer</span></code></pre><p>继续向下看，跟进函数sub_401005</p><pre><code class="hljs csharp">unsigned <span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">sub_401420</span>(<span class="hljs-params">LPCSTR lpString, <span class="hljs-built_in">int</span> a2, <span class="hljs-built_in">int</span> a3</span>)</span>&#123;  unsigned <span class="hljs-built_in">int</span> result; <span class="hljs-comment">// eax</span>  unsigned <span class="hljs-built_in">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span>  unsigned <span class="hljs-built_in">int</span> v5; <span class="hljs-comment">// [esp+54h] [ebp-4h]</span>  v5 = lstrlenA(lpString);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )  &#123;    result = i;    <span class="hljs-keyword">if</span> ( i &gt;= a3 )      <span class="hljs-keyword">break</span>;    *(_BYTE *)(i + a2) ^= lpString[i % v5];  &#125;  <span class="hljs-keyword">return</span> result;&#125;</code></pre><p>一个主逻辑是异或的函数，转化成正常C如下：</p><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+54h] [ebp-4h]</span>v5 = <span class="hljs-built_in">strlen</span>(lpString);<span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )&#123;  result = i;  <span class="hljs-keyword">if</span> ( i &gt;= a3 )    <span class="hljs-keyword">break</span>;  a2[i] ^= lpString[i % v5];&#125;<span class="hljs-keyword">return</span> result;</code></pre><p>资源的每一位和密码的每一位循环异或，异或结束之后，生成一个rtf文件<br>.rtf的文件头，异或之后一定生成的是.rtf的文件头内容，查到.rtf文件头的前六位是”{\rtf1”<br>知道一个新的软件叫<strong>ResourceHacker</strong>，用来查看资源<br>资源前6位<br><img src="https://img-blog.csdnimg.cn/b17d0e1814ae4aaeb4b756c90be0c75e.png" alt="在这里插入图片描述"><br>脚本：</p><pre><code class="hljs python">s=<span class="hljs-string">&#x27;&#123;\\rtf1&#x27;</span>a=[<span class="hljs-number">0x05</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x01</span>]flag=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s[i])^a[i])<span class="hljs-built_in">print</span>(flag)</code></pre><p>运行结果为~!3a@0<br>输入两部分密码后在文件夹生成了一个RTF文件，打开即开找到flag<br><img src="https://img-blog.csdnimg.cn/c40ef2721efd45d482093895fee79859.png" alt="在这里插入图片描述"><br>总结：这道题含有大量看不懂的计算加密函数，需要大量资料</p><blockquote><p>HRSRC FindResourceA(<br>  HMODULE hModule,<br>  LPCSTR  lpName,<br>  LPCSTR  lpType<br>);<br>FindResourceA function<br>Determines the location of a resource with the specified type and name in the specified module.<br>确定具有指定类型和名称的资源在指定模块中的位置。<br>hModule：处理包含资源的可执行文件的模块。NULL值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。<br>lpName：指定资源名称。<br>lpType：指定资源类型。<br>返回值：如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。为了获得这些资源，将这个句柄传递给LoadResource函数。如果函数运行失败，则返回值为NULL。</p></blockquote><blockquote><p>SizeofResource表示该函数返回指定资源的字节数大小。</p></blockquote><blockquote><p>LoadResource function<br>检索一个句柄，该句柄可用于获取指向内存中指定资源的第一个字节的指针。</p></blockquote><p>这三个函数，一个找句柄，一个通过句柄找指针，一个范围查找的资源的大小</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF REVERSE&lt;/p&gt;
&lt;h1 id=&quot;rsa&quot;&gt;&lt;a href=&quot;#rsa&quot; class=&quot;headerlink&quot; title=&quot;rsa&quot;&gt;&lt;/a&gt;rsa&lt;/h1&gt;&lt;p&gt;首先要知道rsa加密&lt;br&gt;附件有两个，其中一个是公钥，得到e=65537，n=8693</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录crypto2</title>
    <link href="https://hzy2003628.top/2023/09/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto2/"/>
    <id>https://hzy2003628.top/2023/09/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto2/</id>
    <published>2023-09-14T13:03:16.227Z</published>
    <updated>2023-09-14T13:03:16.462Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF crypto<br>这篇里面的密码学都是非常非常简单的，基本上一步解密就能得到，目的是能够多的了解到密码加密方式，这样之后见到密码题能有一定的思路</p><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>下载附件，打开后用MD5解密网站直接进行解密，得到flag</p><h1 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h1><p>见过几次应该一眼就能看出来题干中用的是base64加密方式进行的加密结果，故用base64解密网站进行解密即可得到flag</p><h1 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h1><p>看题目名称就可以知道这道题要用url解密，因此得到flag</p><h1 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h1><p>首先打开确实没想到是什么加密，但看密文很明确就是flag的字样，synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}，发现s和f相差13，y和l也相差13，后两位也是相差13，知道是凯撒密码，偏移量为13，解密得到flag</p><h1 id="摩斯"><a href="#摩斯" class="headerlink" title="摩斯"></a>摩斯</h1><p>在线摩斯密码解密得到flag</p><h1 id="password"><a href="#password" class="headerlink" title="password"></a>password</h1><p>这道题确实靠猜的，数了数key格式的位数恰好等于姓名加生日，因此猜测密码为zs19900315，最后包上flag即可</p><h1 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h1><p>刚看到这道题的时候没有什么思路，看了提示知道是将ASCII码和凯撒密码结合起来了<br><img src="https://img-blog.csdnimg.cn/aaae93c3ef7047d59820f11ef71121da.png" alt="在这里插入图片描述"><br>根据ASCII码对应来看，已知flag对应afZ_<br>f–102，a–97  两者相差5<br>l–108，f–102 两者相差6<br>a–97，Z–90 两者相差7<br>g–103，_–95 两者相差8<br>可以推得偏移量依次加一，由此可以得到flag</p><h1 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h1><p>首先题目名称意思是可引用-可打印的，它是多用途互联网邮件扩展（MIME) 一种实现方式<br>解密网站：<a href="http://www.metools.info/code/quotedprintable231.html">http://www.metools.info/code/quotedprintable231.html</a><br><strong>Quoted-Printable编码方法</strong><br>任何一个8位的字节值可编码为3个字符：一个等号”=”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值.例如，ASCII码换页符（十进制值为12）可以表示为”=0C”, 等号”=”（十进制值为61）必须表示为”=3D”. 除了可打印ASCII字符与换行符以外，所有字符必须表示为这种格式.<br>所有可打印ASCII字符(十进制值的范围为33到126)可用ASCII字符编码来直接表示, 但是等号”=”(十进制值为61)不可以这样直接表示.ASCII的水平制表符(tab)与空格符, 十进制为9和32, 如果不出现在行尾则可以用其ASCII字符编码直接表示。如果这两个字符出现在行尾，必须QP编码表示为”=09″ (tab)或”=20″ (space).<br>如果数据中包含有意义的行结束标志，必须转换为ASCII回车(CR)换行(LF)序列，既不能用原来的ASCII字符也不能用QP编码的”=”转义字符序列。 相反，如果字节值13与10有其它的不是行结束的含义，它们必须QP编码为=0D与=0A.<br>quoted-printable编码的数据的每行长度不能超过76个字符. 为满足此要求又不改变被编码文本，在QP编码结果的每行末尾加上软换行(soft line break). 即在每行末尾加上一个”=”, 但并不会出现在解码得到的文本中.</p><pre><code class="hljs bash"><span class="hljs-keyword">function</span> quoted_printable_encode(<span class="hljs-variable">$string</span>) &#123;     <span class="hljs-built_in">return</span> preg_replace(<span class="hljs-string">&#x27;/[^\r\n]&#123;73&#125;[^=\r\n]&#123;2&#125;/&#x27;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>=\r\n&quot;</span>, str_replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;=&quot;</span>,rawurlencode(<span class="hljs-variable">$string</span>))); &#125;</code></pre><p>一个函数就可以，将所有字符串urlencode转换后，%号替换为”=”号，然后对非\r\n超过73连续字符，后面加一个=\r\n。这个是简单实现方法！ 按照该编码详细说明里面，有些空格、换行，还有一些特殊字符可以不用转换。不过一起转换了，也不会有影响！<br>PHP中可以使用下面1对函数进行编码和解码：</p><blockquote><p>quoted_printable_encode() 函数把 8 位字符串转换为 quoted-printable 字符串。<br>quoted_printable_decode() 对经过 quoted-printable 编码后的字符串进行解码，返回 8 位的 ASCII 字符串</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF crypto&lt;br&gt;这篇里面的密码学都是非常非常简单的，基本上一步解密就能得到，目的是能够多的了解到密码加密方式，这样之后见到密码题能有一定的思路&lt;/p&gt;
&lt;h1 id=&quot;MD5&quot;&gt;&lt;a href=&quot;#MD5&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse6</title>
    <link href="https://hzy2003628.top/2023/09/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse6/"/>
    <id>https://hzy2003628.top/2023/09/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse6/</id>
    <published>2023-09-12T13:41:29.323Z</published>
    <updated>2023-09-12T13:41:29.549Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF reverse</p><h1 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h1><p>拖入exe查壳，无壳拖入64位IDA，F5反汇编<br>shift+F12查看程序里的字符串<br><img src="https://img-blog.csdnimg.cn/456b1cd24ffd48e59feaa75501a6922e.png#pic_center" alt="在这里插入图片描述"><br>双击跟进跳转，ctrl+x找到关键函数<br><img src="https://img-blog.csdnimg.cn/898f742776364eec8d180cd82c7f1dc9.png#pic_center" alt="在这里插入图片描述"><br>代码分析：</p><pre><code class="hljs c">v6 = __readfsqword(<span class="hljs-number">0x28</span>u);  v0 = time(<span class="hljs-number">0LL</span>);  srand(v0);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )  &#123;    <span class="hljs-keyword">switch</span> ( rand() % <span class="hljs-number">200</span> )    &#123;      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, it&#x27;s flag:&quot;</span>);        <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>uLL);        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, f1);   <span class="hljs-comment">//f1为GXY&#123;do_not_</span>        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, &amp;f2);   <span class="hljs-comment">//f2为空</span>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);   <span class="hljs-comment">//flag为f1+f2</span>        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar not like you&quot;</span>);        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar want a girlfriend&quot;</span>);        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:        s = <span class="hljs-number">0x7F666F6067756369</span>LL;        v5 = <span class="hljs-number">0</span>;        <span class="hljs-built_in">strcat</span>(&amp;f2, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);   <span class="hljs-comment">//f2=0x7F666F6067756369</span>        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">7</span>; ++j )        &#123;          <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )            *(&amp;f2 + j) -= <span class="hljs-number">2</span>;          <span class="hljs-keyword">else</span>            --*(&amp;f2 + j);        &#125;        <span class="hljs-keyword">break</span>;      <span class="hljs-keyword">default</span>:        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);        <span class="hljs-keyword">break</span>;    &#125;  &#125;  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;&#125;</code></pre><p>f2的格式不对，没有形成flag形式，case5的代码对长度为8的字符串进行了操作，f2（0x7F666F6067756369两位一划分）的长度正好也是8，猜测用来与f1进行拼接形成flag的字符串是f2进行了case5操作后的数据<br>脚本：</p><pre><code class="hljs python">flag=<span class="hljs-string">&quot;GXY&#123;do_not_&quot;</span>f2=[<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x69</span>][::-<span class="hljs-number">1</span>] <span class="hljs-comment">#小端序的问题，所以要逆序一下</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):    <span class="hljs-keyword">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> :        s=<span class="hljs-built_in">chr</span>(f2[j]-<span class="hljs-number">2</span>)    <span class="hljs-keyword">else</span>:        s=<span class="hljs-built_in">chr</span>(f2[j]-<span class="hljs-number">1</span>)    flag+=s<span class="hljs-built_in">print</span> (flag)</code></pre><p>运行得到flag为flag{do_not_hate_me}</p><h1 id="JustRE"><a href="#JustRE" class="headerlink" title="JustRE"></a>JustRE</h1><p>拖入exe查壳，无壳拖入32位IDA，F5反汇编<br>shift+F12查看程序里的字符串<br><img src="https://img-blog.csdnimg.cn/331ab9a70ed649a88875cd43f237d03c.png#pic_center" alt="在这里插入图片描述"><br>双击跟进，ctrl+x，F5<br><img src="https://img-blog.csdnimg.cn/19e5e93363734aae8869f4035a0cd1fc.png#pic_center" alt="在这里插入图片描述"><br>将19999和0分别带入两个%d%d，得到BJD{1999902069a45792d233ac}<br>因此得到flag为flag{1999902069a45792d233ac}</p><h1 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h1><p>附件为apk文件，安卓逆向题，用jadx直接打开可以查看代码（注意打开的时候将文件名改成英文，不然可能会报错）<br>找到核心代码<br><img src="https://img-blog.csdnimg.cn/967c392d8138481792f3bae095cfdbc5.png#pic_center" alt="在这里插入图片描述"><br>写脚本：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span>using namespace <span class="hljs-built_in">std</span>;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span>&#123;  <span class="hljs-built_in">string</span>  x=<span class="hljs-string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;<span class="hljs-type">char</span> a;<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;x[<span class="hljs-number">2</span>] = (<span class="hljs-type">char</span>)(x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">3</span>] - <span class="hljs-number">50</span>);x[<span class="hljs-number">4</span>] =(<span class="hljs-type">char</span>)(x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">5</span>] - <span class="hljs-number">0x30</span>);x[<span class="hljs-number">30</span>]=(<span class="hljs-type">char</span>)(x[<span class="hljs-number">0x1F</span>] + x[<span class="hljs-number">9</span>] - <span class="hljs-number">0x30</span>);x[<span class="hljs-number">14</span>] =(<span class="hljs-type">char</span>)(x[<span class="hljs-number">27</span>] + x[<span class="hljs-number">28</span>] - <span class="hljs-number">97</span>);<span class="hljs-keyword">for</span> (  ;i&lt;<span class="hljs-number">16</span>;++i)    &#123;     a = x[<span class="hljs-number">0x1f</span> - i];     x[<span class="hljs-number">0x1f</span> - i] = x[i];     x[i] = a;&#125;    <span class="hljs-built_in">cout</span>&lt;&lt;x; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF reverse&lt;/p&gt;
&lt;h1 id=&quot;luck-guy&quot;&gt;&lt;a href=&quot;#luck-guy&quot; class=&quot;headerlink&quot; title=&quot;luck_guy&quot;&gt;&lt;/a&gt;luck_guy&lt;/h1&gt;&lt;p&gt;拖入exe查壳，无壳拖入64位IDA，F5反汇编</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse5</title>
    <link href="https://hzy2003628.top/2023/04/09/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse5/"/>
    <id>https://hzy2003628.top/2023/04/09/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse5/</id>
    <published>2023-04-09T09:57:52.728Z</published>
    <updated>2023-04-09T09:57:52.973Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF reverse</p><h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p>拖入exe，无壳拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/9c90ce44a931437f8c01320ac1a1893f.png#pic_center" alt="在这里插入图片描述"><br>找到关键字符串right flag，知道前面的判断条件取决于Str2，跟进Str2，得到一串字符串<br><img src="https://img-blog.csdnimg.cn/70ede4909feb4ba8854f8c33346a673c.png#pic_center" alt="在这里插入图片描述"><br>跟进上面的sub_4110BE，发现有大量相似字符，跟进，发现是base64<br><img src="https://img-blog.csdnimg.cn/07a030305d4e4a0782e6bd9017dcad85.png#pic_center" alt="在这里插入图片描述"><br>写脚本：</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span>flag=<span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):  flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)<span class="hljs-built_in">print</span>(base64.b64decode(flag))</code></pre><p>运行得到flag为flag{i_l0ve_you}</p><h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/3151dbcccbb046938afb3f5d0ed6b89b.png#pic_center" alt="在这里插入图片描述"><br>跟进Decry()函数</p><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Decry</span><span class="hljs-params">()</span>&#123;  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// [rsp+Fh] [rbp-51h]</span>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-50h]</span>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-4Ch]</span>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-48h]</span>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+1Ch] [rbp-44h]</span>  <span class="hljs-type">char</span> src[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-40h]</span>  __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-38h]</span>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+30h] [rbp-30h]</span>  __int64 v9; <span class="hljs-comment">// [rsp+40h] [rbp-20h]</span>  __int64 v10; <span class="hljs-comment">// [rsp+48h] [rbp-18h]</span>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+50h] [rbp-10h]</span>  <span class="hljs-type">unsigned</span> __int64 v12; <span class="hljs-comment">// [rsp+58h] [rbp-8h]</span>  v12 = __readfsqword(<span class="hljs-number">0x28</span>u);  *(_QWORD *)src = <span class="hljs-string">&#x27;SLCDN&#x27;</span>;  v7 = <span class="hljs-string">&#x27;\0&#x27;</span>;  v8 = <span class="hljs-number">0</span>;  v9 = <span class="hljs-string">&#x27;wodah&#x27;</span>;  v10 = <span class="hljs-number">0LL</span>;  v11 = <span class="hljs-number">0</span>;  text = join(key3, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v9);<span class="hljs-comment">//就是这小端序存储 text=killshadow</span>  <span class="hljs-built_in">strcpy</span>(key, key1);<span class="hljs-comment">//key=“ADSFK”</span>  <span class="hljs-built_in">strcat</span>(key, src);<span class="hljs-comment">//key=“ADSFKNDCLS”小端序存储</span>  v2 = <span class="hljs-number">0</span>;  v3 = <span class="hljs-number">0</span>;  getchar();  v5 = <span class="hljs-built_in">strlen</span>(key);  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5; ++i )  &#123;    <span class="hljs-keyword">if</span> ( key[v3 % v5] &gt; <span class="hljs-number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="hljs-number">90</span> )      key[i] = key[v3 % v5] + <span class="hljs-number">32</span>;    ++v3;  &#125;<span class="hljs-comment">//通过分析就可以知道，这是大写变小写</span>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>, src);  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )  &#123;    v1 = getchar();    <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">10</span> )      <span class="hljs-keyword">break</span>;    <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">32</span> )    &#123;      ++v2;    &#125;    <span class="hljs-keyword">else</span>    &#123;      <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">96</span> || v1 &gt; <span class="hljs-number">122</span> )      &#123;        <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">64</span> &amp;&amp; v1 &lt;= <span class="hljs-number">90</span> )          str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3++ % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;      &#125;      <span class="hljs-keyword">else</span>      &#123;        str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3++ % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;      &#125;      <span class="hljs-keyword">if</span> ( !(v3 % v5) )        <span class="hljs-built_in">putchar</span>(<span class="hljs-number">32</span>);      ++v2;    &#125;  &#125;<span class="hljs-comment">//通过分析可以知道，通过一系列变换后等于text就可以了</span>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(text, str2) )    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);  <span class="hljs-keyword">else</span>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Try again!\n&quot;</span>);  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v12;&#125;</code></pre><p>快捷键H转换src和v9[0]<br><img src="https://img-blog.csdnimg.cn/250cdaf6bddc466db818f0fa8a35b52a.png#pic_center" alt="在这里插入图片描述"><br>可以看到这里的两个十六进制是大端序，但是数据在内存中都是小端序，所以要将其，反转一下。一般在CPU，x86都是小端序，但是IDA将之转换为了大端序。<br>快捷键R将其转为字符<br><img src="https://img-blog.csdnimg.cn/5376529ebb3d4d15b402fc7db65f29e7.png#pic_center" alt="在这里插入图片描述"><br>key3已知为”killls”<br><img src="https://img-blog.csdnimg.cn/c6c153a401214734bc1687ae13c6d365.png#pic_center" alt="在这里插入图片描述"><br>再看这有一个join函数，它的作用是以指定的字符连接成一个新的字符串。此处是将key3 和 v9 连接成一个新的字符串。<br>即text = killshadow。<br>strcat函数，是将key 和 src 拼接在一起的函数， 所以key = ADSFKNDCLS。<br>C语言脚本：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;adsfkndcls&quot;</span>;   <span class="hljs-type">char</span> text[] = <span class="hljs-string">&quot;killshadow&quot;</span>;   <span class="hljs-type">int</span> i;   <span class="hljs-type">int</span> v3=<span class="hljs-number">10</span>;<span class="hljs-comment">//长度 </span>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)   &#123;      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">128</span>; j++)      &#123;         <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-string">&#x27;A&#x27;</span> || j &gt; <span class="hljs-string">&#x27;z&#x27;</span> || j &gt; <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; j &lt; <span class="hljs-string">&#x27;a&#x27;</span>)         &#123;            <span class="hljs-keyword">continue</span>;         &#125;         <span class="hljs-keyword">if</span> ((j - <span class="hljs-number">39</span> - key[v3 % <span class="hljs-number">10</span>] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span> == text[i])         &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,j);            v3++;            <span class="hljs-keyword">break</span>;         &#125;      &#125;   &#125;&#125;</code></pre><p>运行得到flag为flag{KLDQCUDFZO}</p><h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h1><p>打开文件发现是class文件，故用jd-gui打开，反汇编<br><img src="https://img-blog.csdnimg.cn/72e46107e70249c18e83c4ed8684e407.png#pic_center" alt="在这里插入图片描述"><br>分析代码<br>python脚本：</p><pre><code class="hljs python">strs = [<span class="hljs-number">180</span>, <span class="hljs-number">136</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">148</span>, <span class="hljs-number">136</span>, <span class="hljs-number">133</span>, <span class="hljs-number">191</span>, <span class="hljs-number">134</span>, <span class="hljs-number">140</span>, <span class="hljs-number">129</span>, <span class="hljs-number">135</span>, <span class="hljs-number">191</span>, <span class="hljs-number">65</span>]flag = <span class="hljs-string">&quot;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(strs)):   flag += <span class="hljs-built_in">chr</span>(strs[i] - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;@&#x27;</span>) ^ <span class="hljs-number">0x20</span>)<span class="hljs-built_in">print</span>(flag)</code></pre><p>别人的java脚本：<br><img src="https://img-blog.csdnimg.cn/9e8340877e604f90bb1f88b37fa33ce9.png#pic_center" alt="在这里插入图片描述"><br>运行得到flag为flag{This_is_the_flag_!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF reverse&lt;/p&gt;
&lt;h1 id=&quot;reverse3&quot;&gt;&lt;a href=&quot;#reverse3&quot; class=&quot;headerlink&quot; title=&quot;reverse3&quot;&gt;&lt;/a&gt;reverse3&lt;/h1&gt;&lt;p&gt;拖入exe，无壳拖入32位IDA，F5反汇编&lt;b</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse4</title>
    <link href="https://hzy2003628.top/2023/03/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse4/"/>
    <id>https://hzy2003628.top/2023/03/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse4/</id>
    <published>2023-03-29T14:07:36.489Z</published>
    <updated>2023-03-29T14:07:36.712Z</updated>
    
    <content type="html"><![CDATA[<p>BUUCTF</p><h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>题如其名，非常简单的一道入门题<br>拖入exe，无壳，拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/d126d8dd388b45f5a8c367d8259c4e9a.png#pic_center" alt="在这里插入图片描述"><br>直接看出flag为flag{this_Is_a_EaSyRe}</p><h1 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br>一路跟进，来到这个界面<br><img src="https://img-blog.csdnimg.cn/098d879c18b040aa929518cabdb49254.png#pic_center" alt="在这里插入图片描述"><br>一长串还有些乱，于是shift+F12直接查找字符串<br><img src="https://img-blog.csdnimg.cn/91773cc11dd34e989fd13cffe48a76db.png#pic_center" alt="在这里插入图片描述"><br>看见关键字符串直接双击跟进调用该处的函数<br><img src="https://img-blog.csdnimg.cn/fdb6369d25dc49468f70afea4275bd64.png#pic_center" alt="在这里插入图片描述"><br>找到关键函数<br><img src="https://img-blog.csdnimg.cn/959c92402a944750be3881923d75d9c8.png#pic_center" alt="在这里插入图片描述"><br>跟进Str2<br><img src="https://img-blog.csdnimg.cn/f465af9812604218b227411ec95c20e7.png#pic_center" alt="在这里插入图片描述"><br>根据if条件句，将o换成0，故得到flag为flag{hell0_w0rld}</p><h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h1><p>拖入Exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/79d16516da474cb0900471cb7e24d7b5.png#pic_center" alt="在这里插入图片描述"><br>当输入字符串s2和flag一样时才会得到正确的flag<br>跟进flag<br><img src="https://img-blog.csdnimg.cn/cbeb18e49b0e40919b295dbd3af1daae.png#pic_center" alt="在这里插入图片描述"><br>根据if条件，将‘i’和‘r’都换成1<br>故得到flag为flag{hack1ng_fo1_fun}</p><h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><p>拖入exe，无壳拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/b24693197eb346c9b61517d57f29ff24.png#pic_center" alt="在这里插入图片描述"><br>点进去分析半天，最后发现就是那一长串字符，换个包将DBAPP换成flag即可<br>最终flag为flag{49d3c93df25caad81232130f3d2ebfad}</p><h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/634bcc025bf041748f895262c4a96de3.png#pic_center" alt="在这里插入图片描述"><br>global和flag进行了比较<br>跟进global，并提取其字符串<br><img src="https://img-blog.csdnimg.cn/af22b64c80e14a8f98fed81aaa0557e0.png#pic_center" alt="在这里插入图片描述"><br>写脚本</p><pre><code class="hljs python">s=[<span class="hljs-number">0x66</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x11</span>,   <span class="hljs-number">0x78</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x1F</span>,   <span class="hljs-number">0x76</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x0F</span>,   <span class="hljs-number">0x47</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x00</span>]<span class="hljs-comment">#print(list1) # 会自动变成十进制</span>flag=<span class="hljs-built_in">chr</span>(s[<span class="hljs-number">0</span>])  <span class="hljs-comment"># f   第一个‘f’没有被处理，但是也是flag的一部分。</span>i=<span class="hljs-number">1</span><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:  <span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(s):    flag += <span class="hljs-built_in">chr</span>(s[i]^s[i-<span class="hljs-number">1</span>])  <span class="hljs-comment">#从输入的第二位开始，将其与前一位异或</span>    i+=<span class="hljs-number">1</span>  <span class="hljs-keyword">else</span>:    <span class="hljs-keyword">break</span><span class="hljs-built_in">print</span>(flag)</code></pre><p>运行得到flag为flag{QianQiuWanDai_YiTongJiangHu}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;BUUCTF&lt;/p&gt;
&lt;h1 id=&quot;easyre&quot;&gt;&lt;a href=&quot;#easyre&quot; class=&quot;headerlink&quot; title=&quot;easyre&quot;&gt;&lt;/a&gt;easyre&lt;/h1&gt;&lt;p&gt;题如其名，非常简单的一道入门题&lt;br&gt;拖入exe，无壳，拖入64位IDA，F5反</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse3</title>
    <link href="https://hzy2003628.top/2023/03/25/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse3/"/>
    <id>https://hzy2003628.top/2023/03/25/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse3/</id>
    <published>2023-03-25T10:43:22.297Z</published>
    <updated>2023-04-01T06:47:29.421Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界reverse</p><h1 id="answer-to-everthing"><a href="#answer-to-everthing" class="headerlink" title="answer_to everthing"></a>answer_to everthing</h1><p>文件无法在我的电脑上运行<br>拖入exe，无壳，拖入64位IDA，main函数F5反汇编<br><img src="https://img-blog.csdnimg.cn/19a7d49cfc6a4a8e9341df9077b82bb2.png#pic_center" alt="在这里插入图片描述"><br>跟进not_the_flag<br><img src="https://img-blog.csdnimg.cn/0c6b7b1a31b94664a743dee63417d1b5.png#pic_center" alt="在这里插入图片描述"><br>翻译一下<br><img src="https://img-blog.csdnimg.cn/9905a609acf647c99598de35530ac5f5.png#pic_center" alt="在这里插入图片描述"><br>题干提示<br><img src="https://img-blog.csdnimg.cn/1c7fabd58e024831aff55a9a48dba2fd.png#pic_center" alt="在这里插入图片描述"><br>了解到sha1加密<br><img src="https://img-blog.csdnimg.cn/8f123d7bd902462aa9c809e8da3ea3e3.png#pic_center" alt="在这里插入图片描述"></p><p>第一遍试的大写不正确，第二遍改成小写后正确<br>故flag为flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p><h1 id="re1-100"><a href="#re1-100" class="headerlink" title="re1-100"></a>re1-100</h1><p>拖入exe后拖入64位IDA<br>找到主函数F5反汇编<br><img src="https://img-blog.csdnimg.cn/339a7590ab9f487b86c668f02150a493.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f1e42b0543443da993ec686d8e0dc22.png#pic_center" alt="在这里插入图片描述"><br>前面是对&amp;bufParentRead[1]的开头十个赋值，后面&amp;bufParentRead[31]是对倒数十个赋值，但是后面顺序又乱掉了：strncmp(bufParentRead, “{daf29f59034938ae4efd53fc275d81053ed5be8c}”, 42uLL)<br>看见{daf29f59034938ae4efd53fc275d81053ed5be8c}这一串就猜测肯定跟flag有点关系<br>所以中间一定有改变，跟踪一下中间的confuseKey(bufParentRead, 42)函数：<br><img src="https://img-blog.csdnimg.cn/92038d534e0f4b8ebb3196f4008e2f83.png#pic_center" alt="在这里插入图片描述"><br>前面比较多东西，但是这次我忽然看到后面的关键了，如截图所示，把字符串分成四份，按3、4、1、2、的顺序重新打乱，而且按照主函数最后混乱代码那里{daf29f59034938ae4efd53fc275d81053ed5be8c}也的确是符合4和1的新顺序，所以之前的函数顺序就是简单的1、2、3、4、：<br>{53fc275d81053ed5be8cdaf29f59034938ae4efd}<br>最后的flag为53fc275d81053ed5be8cdaf29f59034938ae4efd</p><h1 id="parallel-comparator-200"><a href="#parallel-comparator-200" class="headerlink" title="parallel-comparator-200"></a>parallel-comparator-200</h1><p>这道题附件直接就是源码<br>分析代码：</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-title">checking</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span> </span>&#123;    <span class="hljs-type">char</span> *result = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));    <span class="hljs-type">char</span> *argument = (<span class="hljs-type">char</span> *)arg;    *result = (argument[<span class="hljs-number">0</span>]+argument[<span class="hljs-number">1</span>]) ^ argument[<span class="hljs-number">2</span>];    <span class="hljs-keyword">return</span> result;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">highly_optimized_parallel_comparsion</span><span class="hljs-params">(<span class="hljs-type">char</span> *user_string)</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-type">int</span> initialization_number;    <span class="hljs-type">int</span> i;    <span class="hljs-type">char</span> generated_string[FLAG_LEN + <span class="hljs-number">1</span>];    generated_string[FLAG_LEN] = <span class="hljs-string">&#x27;\0&#x27;</span>;   <span class="hljs-comment">//随机化函数值取值大于64 传值给initialization_number </span>    <span class="hljs-keyword">while</span> ((initialization_number = <span class="hljs-built_in">random</span>()) &gt;= <span class="hljs-number">64</span>);        <span class="hljs-type">int</span> first_letter;    <span class="hljs-comment">/*initialization_number 得到于64的随机值，取余运算，initialization_number % 26)余数肯定是在0~25范畴，</span><span class="hljs-comment">    然后加97，我数学不好，97+0~97+25,应该是97~122的范围内 */</span>    first_letter = (initialization_number % <span class="hljs-number">26</span>) + <span class="hljs-number">97</span>;    <span class="hljs-type">pthread_t</span> thread[FLAG_LEN];    <span class="hljs-type">char</span> differences[FLAG_LEN] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">-4</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-7</span>&#125;;    <span class="hljs-type">char</span> *arguments[<span class="hljs-number">20</span>];    <span class="hljs-comment">/*malloc(size_t size) 分配所需的内存空间，并返回一个指向它的指针,这里我们主要关注是 arguments数组，</span><span class="hljs-comment">    知道了arguments1，2，3分别对应first_letter，differences，user_string，同时使用pthread_create函数，</span><span class="hljs-comment">    并调用了checking方法，返回结果是(argument[0]+argument[1]) ^ argument[2] 的result    */</span>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;        arguments[i] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">3</span>*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));        arguments[i][<span class="hljs-number">0</span>] = first_letter;        arguments[i][<span class="hljs-number">1</span>] = differences[i];        arguments[i][<span class="hljs-number">2</span>] = user_string[i];        <span class="hljs-built_in">pthread_create</span>((<span class="hljs-type">pthread_t</span>*)(thread+i), <span class="hljs-literal">NULL</span>, checking, arguments[i]);    &#125;    <span class="hljs-type">void</span> *result;    <span class="hljs-type">int</span> just_a_string[FLAG_LEN] = &#123;<span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">95</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">115</span>&#125;;    <span class="hljs-comment">/* 这里是上面for 循环返回的result结果 ，</span><span class="hljs-comment">    将generated_string赋值，即generated_string=(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] </span><span class="hljs-comment">    */</span>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;        <span class="hljs-built_in">pthread_join</span>(*(thread+i), &amp;result);        generated_string[i] = *(<span class="hljs-type">char</span> *)result + just_a_string[i];        <span class="hljs-built_in">free</span>(result);        <span class="hljs-built_in">free</span>(arguments[i]);    &#125;    <span class="hljs-type">int</span> is_ok = <span class="hljs-number">1</span>;    <span class="hljs-comment">/*generated_string和just_a_string比较，</span><span class="hljs-comment">    即(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ==just_a_string 返回1*/</span>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;        <span class="hljs-keyword">if</span> (generated_string[i] != just_a_string[i])            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;</code></pre><p>看highly_optimized_parallel_comparsion函数<br>有3个循环。<br>1：随机化函数值取值大于64 传值给initialization_number ，initialization_number 得到于64的随机值，取余运算，initialization_number % 26)余数肯定是在025范畴，然后加97，我数学不好，97+097+25,应该是97~122的范围内。<br>malloc(size_t size) 分配所需的内存空间，并返回一个指向它的指针,这里我们主要关注是 arguments数组，知道了arguments1，2，3分别对应first_letter，differences，user_string，同时使用pthread_create函数，并调用了checking方法，返回结果是(argument[0]+argument[1]) ^ argument[2] 的result<br>2:第二个for ,是上面for 循环返回的result结果 ，将generated_string赋值，即generated_string=(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i]<br>3:第三个forgenerated_string和just_a_string比较，即(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ！=just_a_string ，则 return 0是异常中断。通过 return 1 表示返回1，正常。<br>那我们就知道（ first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ！=just_a_string，那么只能是0+just_a_string[i] ==just_a_string才能正常，所以（ first_letter+differencs[i]) ^ user_string[i]=0。异或a^ b=c,可以推出a^ c=b,所以first_letter+differences[i])^0=user_string[i]<br>只要知道first_letter+differences[i])^0的值 就得到了正确的flag<br>脚本：</p><pre><code class="hljs python">just_letter =[<span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">95</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">115</span>]differences = [<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">11</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">7</span>]first_letter = <span class="hljs-number">97</span><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>): <span class="hljs-comment">#0~25</span>    result = <span class="hljs-string">&#x27;&#x27;</span>    first_letter += <span class="hljs-number">1</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(differences)):        result+=<span class="hljs-built_in">chr</span>((first_letter+differences[i])^<span class="hljs-number">0</span>)    <span class="hljs-built_in">print</span>(result,<span class="hljs-string">&quot;--&quot;</span>,(first_letter+differences[i]))</code></pre><p><img src="https://img-blog.csdnimg.cn/2782b10752be43bd9023e2a9500c37c3.png#pic_center" alt="在这里插入图片描述"><br>flag为lucky_hacker_you_are</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;攻防世界reverse&lt;/p&gt;
&lt;h1 id=&quot;answer-to-everthing&quot;&gt;&lt;a href=&quot;#answer-to-everthing&quot; class=&quot;headerlink&quot; title=&quot;answer_to everthing&quot;&gt;&lt;/a&gt;answer_to </summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>刷题记录crypto</title>
    <link href="https://hzy2003628.top/2023/03/24/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto/"/>
    <id>https://hzy2003628.top/2023/03/24/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto/</id>
    <published>2023-03-24T13:46:58.015Z</published>
    <updated>2023-03-24T13:46:58.267Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界<br>crypto</p><h1 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h1><p>附件为ccehgyaefnpeoobe{lcirg}epriec_ora_g<br>发现为栅栏密码<br>通过查找学习知道了这是W型栅栏密码<br>那么有一种叫做WWW的变种<br>1 2 3 4 5 6 # key=3 Rail-fence Cipher<br>1 . . . 5 . ↘　　　　 　↗ ↘<br>. 2 . 4 . 6　　　　↘　　 ↗<br>. . 3 . . .　　　　 ↘ ↗<br>结果为 1 5 2 4 6 3<br><strong>PS</strong>:WWW型的加密密钥就不只能是字符串长度的因子，小于其长度的任何一个数都可能是其key值，所以第一步也是确定密钥。<br>本题密钥为5<br>用在线W型栅栏解密<br><img src="https://img-blog.csdnimg.cn/6d741888d2c449f2a3509968bd70a228.png#pic_center" alt="在这里插入图片描述"><br>得到flag为cyberpeace{railfence_cipher_gogogo}</p><h1 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h1><p>附件为8842101220480224404014224202480122<br>题目中说答案为八位大写数字<br>所以要把文件中的数字分为8组，按0位间隔正好8组</p><blockquote><p>88421 0122 048 02244 04 0142242 0248 0122</p></blockquote><p>23         5       12    12      4      15        14      5<br>W          E            L      L       D       O         N      E<br>最终flag为cyberpeace{WELLDONE}</p><h1 id="不仅仅是morse"><a href="#不仅仅是morse" class="headerlink" title="不仅仅是morse"></a>不仅仅是morse</h1><p>打开附件看到</p><blockquote><p>–/.-/-.–/..–.-/-…/./..–.-/…./.-/…-/./..–.-/.-/-./—/-/…././.-./..–.-/-.././-.-./—/-.././…./…./…./…./.-/.-/.-/.-/.-/-…/.-/.-/-…/-…/-…/.-/.-/-…/-…/.-/.-/.-/.-/.-/.-/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/.-/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/-…/.-/.-/.-/-…/-…/.-/.-/-…/.-/.-/.-/.-/-…/.-/-…/.-/.-/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/-…/-…/.-/.-/-…/-…/-…/.-/-…/.-/.-/.-/-…/.-/-…/.-/-…/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/-…/.-/.-/-…/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/-…/-…/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/-…/-…/.-</p></blockquote><p>用在线morse解密得到<br><img src="https://img-blog.csdnimg.cn/e999fe38646b4094bba2c580b82d49b7.png#pic_center" alt="在这里插入图片描述"><br>可能存在另一种加密方式<br>删除提示用在线培根密码解密得<br><img src="https://img-blog.csdnimg.cn/6b2dd8629ef4487ebf4d61ce9f336c2e.png#pic_center" alt="在这里插入图片描述"><br>按照要求最终flag为cyberpeace{attackanddefenceworldisinteresting}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;攻防世界&lt;br&gt;crypto&lt;/p&gt;
&lt;h1 id=&quot;Railfence&quot;&gt;&lt;a href=&quot;#Railfence&quot; class=&quot;headerlink&quot; title=&quot;Railfence&quot;&gt;&lt;/a&gt;Railfence&lt;/h1&gt;&lt;p&gt;附件为ccehgyaefnpeoobe{</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>system()函数</title>
    <link href="https://hzy2003628.top/2023/03/09/system()%E5%87%BD%E6%95%B0/"/>
    <id>https://hzy2003628.top/2023/03/09/system()%E5%87%BD%E6%95%B0/</id>
    <published>2023-03-09T13:46:56.105Z</published>
    <updated>2023-03-09T13:46:56.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>包含在头文件 “stdlib.h” 中</p><blockquote><p>int system(const char *command)</p></blockquote><h3 id="函数描述"><a href="#函数描述" class="headerlink" title="函数描述"></a>函数描述</h3><p>C 库函数 int system(const char *command) 把 command 指定的命令名称或程序名称传给要被命令处理器执行的主机环境，并在命令完成后返回。</p><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>命令执行成功返回0，执行失败返回-1。</p><h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>执行 dos(windows系统) 或 shell(Linux/Unix系统) 命令，参数字符串command为命令名。另，在windows系统下参数字符串不区分大小写。</p><ul><li>说明：在windows系统中，system函数直接在控制台调用一个command命令。<br>在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行command命令，命令执行完后随即返回原调用的进程。<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4>一些system()函数的参数及实现的功能<br>表格里的内容可以通过 system(“HELP”);语句获取。<br><img src="https://img-blog.csdnimg.cn/bb68d0846b85442cb565ba9866ea98b1.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c9ef07eda9664e4fa31f997d77546789.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6672722285434a9d8d1361ca68586bc6.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a9d38b782c864c97ab08f2ae8a0414b0.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4bc331b6ef8b4746bb59cdb8b2196847.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/274611ecbe3841e3a30b1f4e4e2714a0.png#pic_center" alt="在这里插入图片描述"></li></ul><p><img src="https://img-blog.csdnimg.cn/1ced2ae69d624ac09ffd0f25f40a4f17.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数原型&quot;&gt;&lt;a href=&quot;#函数原型&quot; class=&quot;headerlink&quot; title=&quot;函数原型&quot;&gt;&lt;/a&gt;函数原型&lt;/h3&gt;&lt;p&gt;包含在头文件 “stdlib.h” 中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;int system(const char </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sha1算法</title>
    <link href="https://hzy2003628.top/2023/03/09/sha1%E7%AE%97%E6%B3%95/"/>
    <id>https://hzy2003628.top/2023/03/09/sha1%E7%AE%97%E6%B3%95/</id>
    <published>2023-03-09T12:33:14.830Z</published>
    <updated>2023-03-09T12:33:15.033Z</updated>
    
    <content type="html"><![CDATA[<p>sha1算法又名<strong>哈希算法</strong></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>SHA-1（Secure Hash Algorithm 1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦资料处理标准（FIPS）。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p><h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="消息填充-Message-Padding"><a href="#消息填充-Message-Padding" class="headerlink" title="消息填充(Message Padding)"></a>消息填充(Message Padding)</h5><h5 id="步骤一-数据填充-Append-Padding-Bits"><a href="#步骤一-数据填充-Append-Padding-Bits" class="headerlink" title="步骤一: 数据填充(Append Padding Bits)"></a>步骤一: 数据填充(Append Padding Bits)</h5><p>SHA-1是按照分块进行处理的，分块长度为512bit, 大多数情况下，数据的长度不会恰好满足是512的整数倍，因此需要进行「padding」到给定的长度。<br><strong>「填充规则」:</strong> 原始明文消息的b位之后补100…, 直到满足b + paddingLength % 512 = 448, 那如果b % 512在[448, 512(0)]之间呢，则在增加一个分块，按照前面的规则填充即可。</p><h5 id="长度填充"><a href="#长度填充" class="headerlink" title="长度填充"></a>长度填充</h5><p>之前说了，需要满足b + paddingLength % 512 = 448， 那么对于最后一个分块，就还剩512 - 448 = 64 bit 这剩下的64bit存放的是原始消息的长度，也就是b。「SHA-1」最多可以处理明文长度小于等于2^64 bit的数据。<br><img src="https://img-blog.csdnimg.cn/10238576ec144c1b9fbb24a138939a86.png#pic_center" alt="在这里插入图片描述"></p><h6 id="计算摘要-Computing-the-Message-Digest"><a href="#计算摘要-Computing-the-Message-Digest" class="headerlink" title="计算摘要(Computing the Message Digest)"></a>计算摘要(Computing the Message Digest)</h6><p><img src="https://img-blog.csdnimg.cn/a78d64fa7a0a4d08895c189a4af6a9bf.png" alt="在这里插入图片描述"><br>首先, 初始化5个常量, 如下所示, 类比于「MD5」可以看做是「MDBuffer」:</p><blockquote><p>H0 = 0x67452301<br>H1 = 0xEFCDAB89<br>H2 = 0x98BADCFE<br>H3 = 0x10325476<br>H4 = 0xC3D2E1F0</p></blockquote><p>然后对于消息按照如下的方式进行处理:</p><ul><li>前16个字节([0, 15])，转换成32位无符号整数。</li><li>对于后面的字节([16, 79])按照下面的公式进行处理</li></ul><blockquote><p>W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16))</p></blockquote><ul><li>令A = H0, B = H1, C = H2, D = H3, E = H4</li><li>做如下80轮的散列操作</li></ul><blockquote><p>TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);<br>E = D;<br>D = C;<br>C = S^30(B);<br>B = A;<br>A = TEMP;</p></blockquote><ul><li>令H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E<br>解释一下，其中f函数如下:</li></ul><blockquote><p>f(t;B,C,D) = (B AND C) OR ((NOT B) AND D)         ( 0 &lt;= t &lt;= 19)<br>f(t;B,C,D) = B XOR C XOR D                        (20 &lt;= t &lt;= 39)<br>f(t;B,C,D) = (B AND C) OR (B AND D) OR (C AND D)  (40 &lt;= t &lt;= 59)<br>f(t;B,C,D) = B XOR C XOR D                        (60 &lt;= t &lt;= 79)</p></blockquote><p>k函数如下：</p><blockquote><p>K(t) = 0x5A827999         ( 0 &lt;= t &lt;= 19)<br>K(t) = 0x6ED9EBA1         (20 &lt;= t &lt;= 39)<br>K(t) = 0x8F1BBCDC         (40 &lt;= t &lt;= 59)<br>K(t) = 0xCA62C1D6         (60 &lt;= t &lt;= 79)</p></blockquote><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p>最后H0~H4即为最终「SHA-1」的输出结果。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="hljs html">pub struct SHA1 &#123;&#125;impl SHA1 &#123;    fn padding(message: &amp;[u8]) -&gt; Vec<span class="hljs-tag">&lt;<span class="hljs-name">u8</span>&gt;</span> &#123;        let mut result = message.to_owned();        // padding 1        result.push(0x80);        // padding 0        while ((result.len() * 8) + 64) % 512 != 0 &#123;            result.push(0b00000000);        &#125;        // padding message length 注意这里和MD5不同，没仔细看踩了一个大坑 这里长度padding到前面        for byte in &amp;((message.len() * 8) as u64).to_be_bytes() &#123;            result.push(*byte);        &#125;        return result;    &#125;    fn k(t: usize) -&gt; u32 &#123;        match t &#123;            n if n &lt; 20 =&gt; 0x5A827999,            n if 20 &lt;= n &amp;&amp; n &lt; 40 =&gt; 0x6ED9EBA1,            n if 40 &lt;= n &amp;&amp; n &lt; 60 =&gt; 0x8F1BBCDC,            n if 60 &lt;= n &amp;&amp; n &lt; 80 =&gt; 0xCA62C1D6,            _ =&gt; 0,        &#125;    &#125;    fn f(t: usize, b: u32, c: u32, d: u32) -&gt; u32 &#123;        match t &#123;            n if n &lt; 20 =&gt; (b &amp; c) | ((!b) &amp; d),            n if 20 &lt;= n &amp;&amp; n &lt; 40 =&gt; b ^ c ^ d,            n if 40 &lt;= n &amp;&amp; n &lt; 60 =&gt; (b &amp; c) | (b &amp; d) | (c &amp; d),            n if 60 &lt;= n &amp;&amp; n &lt; 80 =&gt; b ^ c ^ d,            _ =&gt; 0,        &#125;    &#125;    pub fn hash(message: &amp;[u8]) -&gt; String &#123;        let padding_message = SHA1::padding(message);        let mut buf: [u32; 5]; // Buffer one, A..E        let mut h: [u32; 5] = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];        let mut w = [0u32; 80]; // Sequance of W(0)..W(79)        let mut temp: u32;        for chunk in padding_message.chunks(64) &#123;            // 注意这里用的是big-edition            let m: Vec<span class="hljs-tag">&lt;<span class="hljs-name">u32</span>&gt;</span> = chunk.chunks(4).map(|i| &#123;                ((i[0] as u32) &lt;&lt; 24) | ((i[1] as u32) &lt;&lt; 16) | ((i[2] as u32) &lt;&lt; 8) | ((i[3] as u32) &lt;&lt; 0)            &#125;).collect();            for i in 0..16 &#123;                w[i] = m[i];            &#125;            for t in 16..80 &#123;                // W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16)).                w[t] = (w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]).rotate_left(1);            &#125;            buf = h;            for t in 0..80 &#123;                // TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);                temp = buf[0].rotate_left(5).wrapping_add(                    SHA1::f(t, buf[1], buf[2], buf[3])                        .wrapping_add(buf[4].wrapping_add(w[t].wrapping_add(SHA1::k(t)))),                );                buf[4] = buf[3]; // E = D                buf[3] = buf[2]; // D = C                buf[2] = buf[1].rotate_left(30); // C = S^30(B)                buf[1] = buf[0]; // B = A                buf[0] = temp; // A = TEMP            &#125;            for i in 0..5 &#123;                h[i] = h[i].wrapping_add(buf[i]);            &#125;        &#125;        // output        return String::from(format!(            &quot;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&quot;,            h[0], h[1], h[2], h[3], h[4]        ));    &#125;&#125;#[cfg(test)]mod test &#123;    use crate::sha1::SHA1;    #[test]    fn test() &#123;        println!(&quot;sha1([empty string]) = &#123;&#125;&quot;, SHA1::hash(&quot;&quot;.as_bytes()));        println!(&quot;sha1([The quick brown fox jumps over the lazy dog]) = &#123;&#125;&quot;, SHA1::hash(&quot;The quick brown fox jumps over the lazy dog&quot;.as_bytes()));    &#125;&#125;</code></pre><h6 id="在线SHA-1加密工具"><a href="#在线SHA-1加密工具" class="headerlink" title="在线SHA-1加密工具"></a>在线SHA-1加密工具</h6><p><a href="https://uutool.cn/sha1/">https://uutool.cn/sha1/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;sha1算法又名&lt;strong&gt;哈希算法&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;SHA-1（Secure Hash Algorithm 1）是一种</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse2</title>
    <link href="https://hzy2003628.top/2023/03/03/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse2/"/>
    <id>https://hzy2003628.top/2023/03/03/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse2/</id>
    <published>2023-03-03T13:18:09.133Z</published>
    <updated>2023-03-03T13:18:09.372Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界<br>reverse</p><h1 id="srm-50"><a href="#srm-50" class="headerlink" title="srm-50"></a>srm-50</h1><p>拖入EXE，无壳，拖入32位IDA<br>WINMAIN(xxx)函数F5反汇编<br>双击跟进DialogFunc<br>strcpy(Source, “Registration Success!\nYour flag is:”)后的内容就是flag，快捷键R将数字转换成字符串<br><img src="https://img-blog.csdnimg.cn/55c04856878949e6b9e1eee095d07016.png#pic_center" alt="在这里插入图片描述"><br>即CXZA9bd7mGq94gc8<br>按顺序排列后得到CZ9dmq4c8g9G7bAX，即为flag</p><h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h1><p>拖入exe，无壳，拖入32位IDA<br>找到WinMain(x,x,x,x)  F5反汇编<br>双击跟进_WinMain@16_0，跟进DialogFunc，进入sub_401090<br>找到well done 所在的基本块，条件是v10 == 123 &amp;&amp; v12 == 120 &amp;&amp; v14 == 122 &amp;&amp; v13 == 121，注意到在该基本块的开头调用了strcpy函数将flag 赋值给Text，同时下面也有一些对Text拼接字符串的操作，看起来这个Text保存的就是flag。<br>观察Text的赋值，除了v5，其它的都是已知的字符，需要解出v5的值。其中，v5是执行itoa函数以后得到的：_itoa(v10, &amp;v5, 10); 。<br>因此，我们需要把v10解出来。v10等于多少呢？if条件里已经告诉我们了，等于123，因此flag为flag{123_Buff3r_0v3rf|0w}<br><strong>补充：</strong><br>此题想考察的应该是溢出<br>第25行中，读取用户输入保存到String，读取的最大长度为260字节，并且没有对String做长度校验，可能存在溢出的问题。</p><blockquote><p>GetDlgItemTextA(hWnd, 1002, &amp;String, 260);</p></blockquote><p>然后对String进行了长度校验，必须要大于6才行。<br>接下来 v10 = atoi(&amp;String) + 1; ，也就是用户输入是个数字的字符串，通过atoi转成数字以后再加一，将结果赋值给v10。因此输入的前三个字符应该为：”123”。<br>重头戏来了，还是这个if条件，对v10，v12，v13和v14进行了判断。</p><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v10 == <span class="hljs-number">123</span> &amp;&amp; v12 == <span class="hljs-number">120</span> &amp;&amp; v14 == <span class="hljs-number">122</span> &amp;&amp; v13 == <span class="hljs-number">121</span> )&#123;    ...&#125;</code></pre><p>string~v14在栈中的情况<br><img src="https://img-blog.csdnimg.cn/f4c2d06b1d6949328eba8a410ae996a9.png" alt="在这里插入图片描述"><br>String这三个字节填充的是122无疑，v12、v13、v14的ASCII值分别为120、121、122，即对应的字符为x、y、z<br><img src="https://img-blog.csdnimg.cn/5ca97d34114143919b1230b993408100.png#pic_center" alt="在这里插入图片描述"><br>用户输入为122xyz<br>输出为flag{123_Buff3r_0v3rfl0w}<br><img src="https://img-blog.csdnimg.cn/6a9f6008dc394205a5b879af3a58fc87.png#pic_center" alt="在这里插入图片描述"></p><h1 id="Guess-the-Number"><a href="#Guess-the-Number" class="headerlink" title="Guess-the-Number"></a>Guess-the-Number</h1><p>附件加载后得到.jar解压后得到.class文件<br>学习发现需要一个叫jd-gui的软件打开<br>下载后用其打开可以查看汇编代码<br><img src="https://img-blog.csdnimg.cn/ee287082b49742219425dd9a98a7b694.png#pic_center" alt="在这里插入图片描述"><br>分析if (my_number / 5 == guess_number)  //我的数字除以5取整就是猜测的数字<br>1545686892 / 5取整得309137378<br>将guess_number的值修改为309137378，执行代码成功获得flag为a7b08c546302cc1fd2a4d48bf2bf2ddb。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;攻防世界&lt;br&gt;reverse&lt;/p&gt;
&lt;h1 id=&quot;srm-50&quot;&gt;&lt;a href=&quot;#srm-50&quot; class=&quot;headerlink&quot; title=&quot;srm-50&quot;&gt;&lt;/a&gt;srm-50&lt;/h1&gt;&lt;p&gt;拖入EXE，无壳，拖入32位IDA&lt;br&gt;WINMAIN(xx</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>itoa函数</title>
    <link href="https://hzy2003628.top/2023/02/28/itoa%E5%87%BD%E6%95%B0/"/>
    <id>https://hzy2003628.top/2023/02/28/itoa%E5%87%BD%E6%95%B0/</id>
    <published>2023-02-28T12:15:41.953Z</published>
    <updated>2023-02-28T12:15:42.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>itoa 为c语言的一个函数。itoa 函数是一个广泛应用的，从非标准扩展到标准的C语言。它不能被移植，因为它不是标准定义下的C语言，但是，编译器通常在一个不遵循程式标准的模式下允许其通过header ，因为它是一个从逻辑对应到标准库的函数。itoa 取整数输入值，并将其转换为相应进制数字的字符串。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>把一个整数转换为字符串</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>itoa(i ,num ,10 );<br>i —- 需要转换成字符串的数字<br>num —- 转换后保存字符串的变量<br>10 —- 转换数字的基数（即进制）。10就是说按10进制转换数字。还可以是2，8，16等等你喜欢的进制类型<br>返回值：指向num这个字符串的指针</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>itoa() 函数有3个参数：第一个参数是要转换的数字，第二个参数是要写入转换结果的目标字符串，第三个参数是转移数字时所用的基数(进制)。在上例中，转换基数为10，就意味着以10为转换进制。10：十进制；2：二进制…<br>itoa 并不是一个标准的C函数，它是Windows特有的，如果要写跨平台的程序，请用sprintf。<br>标准库中有sprintf，功能比这个更强，用法跟printf类似：<br>char str[255];<br>sprintf(str, “%x”, 100); //将100转为16进制表示的字符串。<br>下列函数也可以将相应类型的整数转换为字符串：</p><h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><p>char *ultoa(unsigned long value,char *string,int radix)<br>将无符号整型数value转换成字符串并返回该字符串,radix为转换时所用基数<br>char *ltoa(long value,char *string,int radix)<br>将长整型数value转换成字符串并返回该字符串,radix为转换时所用基数<br>char *itoa(int value,char *string,int radix)<br>将整数value转换成字串存入string,radix为转换所用基数.<br>double atof(char *nptr)<br>将字符串nptr转换成双精度数,并返回这个数,错误返回0<br>int atoi(char *nptr)<br>将字符串nptr转换成整型数, 并返回这个数,错误返回0<br>long atol(char *nptr)<br>将字符串nptr转换成长整型数,并返回这个数,错误返回0<br>double strtod(char *str,char **endptr)<br>将字符串str转换成双精度数,并返回这个数,<br>long strtol(char *str,char **endptr,int base)<br>将字符串str转换成长整型数, 并返回这个数,</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;itoa 为c语言的一个函数。itoa 函数是一个广泛应用的，从非标准扩展到标准的C语言。它不能被移植，因为它不是标准定义下的C语言，但是，</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>幂数加密</title>
    <link href="https://hzy2003628.top/2023/02/27/%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86/"/>
    <id>https://hzy2003628.top/2023/02/27/%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86/</id>
    <published>2023-02-27T13:27:09.562Z</published>
    <updated>2023-02-27T13:27:50.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二进制幂数加密法"><a href="#二进制幂数加密法" class="headerlink" title="二进制幂数加密法"></a>二进制幂数加密法</h2><h6 id="何为幂数加密"><a href="#何为幂数加密" class="headerlink" title="何为幂数加密"></a>何为幂数加密</h6><p>二进制幂数加密通过二进制的几次方表示字母的序号来对信息加密。由二进制转换成十进制的时候，还可以表示成2的N次方的形式。由于英文字母只有26个字母。只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。<br>例如<br>明文： d o n o t p u l l a l l y o u r e g g s i n o n e b a s k e t<br>字母序号：4 15 14 15 20 16 21 12 12 1 12 12 25 15 21 18 5 7 7 19 9 14 15 14 5 2 1 19 11 5 20<br>由于4=2^2 所以D加密过之后是2；15=2^0+2^1+2^2+2^3所以O加密后是0123。同理得到上述明文的加密后的密文<br>密文：2 0123/123 0123 24/4 024 23 23/0 23 23/034 0123 024 14/02 012 012 014/03 123 /0123 123 02/1 0 014 013 02 24<br>空格表示字母的间隔，“/”表示单词的间隔</p><h4 id="二进制幂数加密转换表"><a href="#二进制幂数加密转换表" class="headerlink" title="二进制幂数加密转换表"></a>二进制幂数加密转换表</h4><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>A 1——0</td><td>N 14——123</td></tr><tr><td>B 2——1</td><td>O 15——0123</td></tr><tr><td>C 3——01</td><td>P 16——4</td></tr><tr><td>D 4——2</td><td>Q 17——04</td></tr><tr><td>E 5——02</td><td>R 18——14</td></tr><tr><td>F 6——12</td><td>S 19—–014</td></tr><tr><td>G 7——012</td><td>T 20—–24</td></tr><tr><td>H 8——3</td><td>U 21—–024</td></tr><tr><td>I 9——03</td><td>V 22—–124</td></tr><tr><td>J 10—–13</td><td>W 23—–0124</td></tr><tr><td>K 11—–013</td><td>X 24——34</td></tr><tr><td>L 12—–23</td><td>Y 25—–034</td></tr><tr><td>M 13—-023</td><td>Z 26—–134</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二进制幂数加密法&quot;&gt;&lt;a href=&quot;#二进制幂数加密法&quot; class=&quot;headerlink&quot; title=&quot;二进制幂数加密法&quot;&gt;&lt;/a&gt;二进制幂数加密法&lt;/h2&gt;&lt;h6 id=&quot;何为幂数加密&quot;&gt;&lt;a href=&quot;#何为幂数加密&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>栅栏密码&amp;W型栅栏密码</title>
    <link href="https://hzy2003628.top/2023/02/27/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/"/>
    <id>https://hzy2003628.top/2023/02/27/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/</id>
    <published>2023-02-27T12:50:02.017Z</published>
    <updated>2023-02-27T13:28:20.582Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p><h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>①把将要传递的信息中的字母交替排成上下两行。<br>②再将下面一行字母排在上面一行的后边，从而形成一段密码。<br>③例如：<br>明文：THE LONGEST DAY MUST HAVE AN END<br>加密：<br>1、把将要传递的信息中的字母交替排成上下两行。<br>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D<br>2、 密文：<br>将下面一行字母排在上面一行的后边。<br>TEOGSDYUTAENN HLNETAMSHVAED<br>解密：<br>先将密文分为两行<br>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D<br>再按上下上下的顺序组合成一句话<br>明文：THE LONGEST DAY MUST HAVE AN END</p><h3 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h3><p>传统栅栏密码的密钥是密文长度的因数。<br>如密文长度为n，加密密钥为x，则有n%x==0。且解密密钥即为n/x。<br>代码：</p><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">遍历所有可能的栏数，并得到加/解密结果</span><span class="hljs-string">&#x27;&#x27;&#x27;</span>s = <span class="hljs-string">&#x27;KYsd3js2E&#123;a2jda&#125;&#x27;</span>factors = [fac <span class="hljs-keyword">for</span> fac <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(s)) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%fac == <span class="hljs-number">0</span>] <span class="hljs-comment">#取得密文长度的所有因数</span><span class="hljs-keyword">for</span> fac <span class="hljs-keyword">in</span> factors:    flag = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(fac): <span class="hljs-comment">#按一定的步长取几组字符，并连接起来，这里组数就等于步长数</span>        flag += s[i::fac]    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(fac)+<span class="hljs-string">&#x27;栏：&#x27;</span>+flag)</code></pre><h2 id="W型栅栏密码"><a href="#W型栅栏密码" class="headerlink" title="W型栅栏密码"></a>W型栅栏密码</h2><p>W型栅栏密码是栅栏密码的变种，<br>将明文按w型排列，然后将每一行的字母依次连起来组成密文，行数就是密钥。<br>解密则同样画出这个w型图案，将每一列的字母依次连接起来组成明文。<br>W型栅栏密码的密钥不只是密文长度的因数，任何小于密文长度大于1的整数都有可能。<br>代码：</p><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-string">若知道栏数，则使用decode解密，若不知道，则使用crack_cipher遍历所有可能性</span><span class="hljs-string">&#x27;&#x27;&#x27;</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_w</span>(<span class="hljs-params">string, n</span>):     <span class="hljs-string">&#x27;&#x27;&#x27;将字符排列成w型&#x27;&#x27;&#x27;</span>    array = [[<span class="hljs-string">&#x27;.&#x27;</span>]*<span class="hljs-built_in">len</span>(string) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment">#生成初始矩阵</span>    row = <span class="hljs-number">0</span>    upflag = <span class="hljs-literal">False</span>    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#在矩阵上按w型画出string</span>        array[row][col] = string[col]        <span class="hljs-keyword">if</span> row == n-<span class="hljs-number">1</span>:            upflag = <span class="hljs-literal">True</span>        <span class="hljs-keyword">if</span> row == <span class="hljs-number">0</span>:            upflag = <span class="hljs-literal">False</span>        <span class="hljs-keyword">if</span> upflag:            row -= <span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            row += <span class="hljs-number">1</span>    <span class="hljs-keyword">return</span> array<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string, n</span>):    <span class="hljs-string">&#x27;&#x27;&#x27;加密&#x27;&#x27;&#x27;</span>    array = generate_w(string, n)    msg = []    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <span class="hljs-comment">#将每行的字符连起来</span>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:                msg.append(array[row][col])    <span class="hljs-keyword">return</span> array, msg<span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">string, n</span>):    <span class="hljs-string">&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;</span>    array = generate_w(string, n)    sub = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <span class="hljs-comment">#将w型字符按行的顺序依次替换为string</span>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:                array[row][col] = string[sub]                sub += <span class="hljs-number">1</span>    msg = []    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#以列的顺序依次连接各字符</span>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:                msg.append(array[row][col])    <span class="hljs-keyword">return</span> array, msg<span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_cipher</span>(<span class="hljs-params">string</span>):    <span class="hljs-string">&#x27;&#x27;&#x27;破解密码&#x27;&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#遍历所有可能的栏数</span>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;栏：&#x27;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(decode(string, n)[<span class="hljs-number">1</span>]))<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    string = <span class="hljs-string">&quot;ccehgyaefnpeoobe&#123;lcirg&#125;epriec_ora_g&quot;</span>    n = <span class="hljs-number">5</span> <span class="hljs-comment">#栏数</span>    <span class="hljs-comment">#若不知道栏数，则遍历所有可能</span>    <span class="hljs-comment"># crack_cipher(string)</span>    <span class="hljs-comment">#若知道栏数</span>    array,msg = decode(string, n)    <span class="hljs-comment"># array,msg = encode(string, n)</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array: <span class="hljs-built_in">print</span>(i)    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(msg))</code></pre><h6 id="WWW型的解密网站"><a href="#WWW型的解密网站" class="headerlink" title="WWW型的解密网站"></a>WWW型的解密网站</h6><p><a href="http://www.atoolbox.net/Tool.php?Id=777">http://www.atoolbox.net/Tool.php?Id=777</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;栅栏密码&quot;&gt;&lt;a href=&quot;#栅栏密码&quot; class=&quot;headerlink&quot; title=&quot;栅栏密码&quot;&gt;&lt;/a&gt;栅栏密码&lt;/h1&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题记录reverse</title>
    <link href="https://hzy2003628.top/2023/02/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse/"/>
    <id>https://hzy2003628.top/2023/02/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse/</id>
    <published>2023-02-27T12:32:53.956Z</published>
    <updated>2023-02-27T13:28:00.799Z</updated>
    
    <content type="html"><![CDATA[<p>攻防世界<br>reverse</p><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>拖入exe<br><img src="https://img-blog.csdnimg.cn/33a7b6b7487d440aaae31200446f117e.png#pic_center" alt="在这里插入图片描述"></p><p>发现无壳并拖入64位IDA<br>F5反汇编<br>‘R’键将数字转换成字符串<br><img src="https://img-blog.csdnimg.cn/1dfd3cf2f3044f71a61f43e9385f9c3d.png" alt="在这里插入图片描述"><br>可以知道控制方向键的分别为“O”，“o”，“.”，“0”<br>判断分别代表什么方向：<br><img src="https://img-blog.csdnimg.cn/0c3a343474674e78bb7c6e2162975f43.png#pic_center" alt="在这里插入图片描述"><br>左减右加，上减下加<br>O左移 o右移 .上移 0下移<br>判断迷宫的x轴和y轴<br><img src="https://img-blog.csdnimg.cn/9ee7e111dce7434b8b93d7f9665e8286.png#pic_center" alt="在这里插入图片描述"><br>所以迷宫的起点就是（0，0）</p><p>sub_400690函数中是a2+a3*8,即a3表示行，a2表示列<br>a3 通过edx传递<br>a2 通过esi传递<br>行×8？再去看这个字符串，发现是64位，正好就是8×8<br>双击asc_601060查看字符串<br>用记事本整理得迷宫图形</p><pre><code class="hljs bash">  *******   *  **** * ****  * ***  *<span class="hljs-comment">#  *</span>** *** ***     *********</code></pre><p>*是边界，空格是通路，＃号是终点。<br>O是左移，o是右移，0是下移，.是上移<br>得到flag为nctf{o0oo00O000oooo..OO}</p><h2 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h2><p>拖进exe，无壳，拖入32位IDA<br>F5反汇编<br><img src="https://img-blog.csdnimg.cn/4fd53107f60c45b5b54b7a7340406bbc.png#pic_center" alt="在这里插入图片描述"></p><p>没想到直接看到flag，SECCON{Welcome to the SECCON 2014 CTF!}，提交竟然是对的</p><h2 id="dmd-50"><a href="#dmd-50" class="headerlink" title="dmd-50"></a>dmd-50</h2><p>拖入EXE，无壳，拖入64位IDA，F5反汇编<br>R快捷键将ASCII码转成字符<br><img src="https://img-blog.csdnimg.cn/84115edbcb7040ed8b921e14b3e66484.png#pic_center" alt="在这里插入图片描述"><br>得到字符串870438d5b6e29db0898bc4f0225935c0<br>根据题目名称dmd-50猜测这是MD5密文，故将字符串解密得到grape<br>然而这并不是flag<br><img src="https://img-blog.csdnimg.cn/6b2ab4c1e129412aa7fc1c6370af99b9.png#pic_center" alt="在这里插入图片描述"><br>发现重点md5(v40,v39)<br>意思是md5加密一次<br>将刚得到的grape再次md5加密<br>得到flag为b781cbb29054db12f88f08c6e161c199</p><h2 id="lgniteMe"><a href="#lgniteMe" class="headerlink" title="lgniteMe"></a>lgniteMe</h2><p>拖入exe，无壳，拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/a1a4641e93b046b1a45c54a0f253787a.png#pic_center" alt="在这里插入图片描述"><br>发现”Congratulations!”，应该是输入正确flag后的输出，故双击跟进sub_4011c0<br><img src="https://img-blog.csdnimg.cn/18d8887124934a4181848565d7cc625b.png#pic_center" alt="在这里插入图片描述"><br>存在两个函数异或，进入函数byte_4420B0<br>选中后按shift+e提取字符，选择demical十进制的数表示<br><img src="https://img-blog.csdnimg.cn/7d29c82de70e4773aa12bf85e547507e.png#pic_center" alt="在这里插入图片描述"><br>编写脚本：</p><pre><code class="hljs python">yihuo_qian =(   <span class="hljs-number">13</span>,  <span class="hljs-number">19</span>,  <span class="hljs-number">23</span>,  <span class="hljs-number">17</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">1</span>,  <span class="hljs-number">32</span>,  <span class="hljs-number">29</span>,  <span class="hljs-number">12</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">25</span>,  <span class="hljs-number">47</span>,  <span class="hljs-number">23</span>,  <span class="hljs-number">43</span>,  <span class="hljs-number">36</span>,  <span class="hljs-number">31</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">22</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">15</span>,   <span class="hljs-number">21</span>,  <span class="hljs-number">39</span>,  <span class="hljs-number">19</span>,  <span class="hljs-number">38</span>,  <span class="hljs-number">10</span>,  <span class="hljs-number">47</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">26</span>,  <span class="hljs-number">45</span>,  <span class="hljs-number">12</span>,   <span class="hljs-number">34</span>)flag = <span class="hljs-string">&#x27;&#x27;</span>yihuo_result=<span class="hljs-string">&#x27;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yihuo_result)):    flag+=<span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(yihuo_result[i])^yihuo_qian[i])-<span class="hljs-number">72</span>)^<span class="hljs-number">85</span>)<span class="hljs-built_in">print</span>(flag)</code></pre><p>得到flag为EIS{WADX_TDGK_AIHC_IHKN_PJLM}（不过不知道提交为什么就是不正确）<br>还发现一种大佬的一种解法<br>shift+F2在IDA中嵌入脚本打印<br>脚本为：</p><pre><code class="hljs bash">addr=0x4420B0list=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(32):        list.append(Byte(addr+i))<span class="hljs-built_in">print</span>(list)</code></pre><p>逆向逻辑脚本为：</p><pre><code class="hljs python">key1=<span class="hljs-string">&quot;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&quot;</span>list1=[<span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">29</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">25</span>, <span class="hljs-number">47</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">9</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">39</span>, <span class="hljs-number">19</span>, <span class="hljs-number">38</span>, <span class="hljs-number">10</span>, <span class="hljs-number">47</span>, <span class="hljs-number">30</span>, <span class="hljs-number">26</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">4</span>]flag=[]v3=<span class="hljs-number">0</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key1)):   flag.append(((<span class="hljs-built_in">ord</span>(key1[i])^list1[i])-<span class="hljs-number">72</span>)^<span class="hljs-number">85</span>)   <span class="hljs-keyword">if</span> flag[i] &gt;= <span class="hljs-number">65</span> <span class="hljs-keyword">and</span> flag[i] &lt;= <span class="hljs-number">90</span>:      flag[i]+=<span class="hljs-number">32</span>   <span class="hljs-keyword">elif</span> flag[i] &gt;= <span class="hljs-number">97</span> <span class="hljs-keyword">and</span> flag[i] &lt;=<span class="hljs-number">122</span>:      flag[i]-=<span class="hljs-number">32</span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag]))<span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag])))</code></pre><h2 id="re-for-50-plz-50"><a href="#re-for-50-plz-50" class="headerlink" title="re-for-50-plz-50"></a>re-for-50-plz-50</h2><p>拖入EXE，无壳，拖入32位IDA。F5查看伪代码<br><img src="https://img-blog.csdnimg.cn/08b6d1321ee643c0b747187d12aafc95.png#pic_center" alt="在这里插入图片描述"><br>代码非常简单，很好理解<br>进入函数meow，得到字符串<br><img src="https://img-blog.csdnimg.cn/ad4d5d67296c4e21b26179375abebaaa.png#pic_center" alt="在这里插入图片描述"><br>编写脚本：</p><pre><code class="hljs python">a = <span class="hljs-string">&quot;cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ&quot;</span>f = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):    f += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])^<span class="hljs-number">55</span>)<span class="hljs-built_in">print</span>(f)</code></pre><p>运行得到flag为TUCTF{but_really_whoisjohngalt}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;攻防世界&lt;br&gt;reverse&lt;/p&gt;
&lt;h2 id=&quot;maze&quot;&gt;&lt;a href=&quot;#maze&quot; class=&quot;headerlink&quot; title=&quot;maze&quot;&gt;&lt;/a&gt;maze&lt;/h2&gt;&lt;p&gt;拖入exe&lt;br&gt;&lt;img src=&quot;https://img-blog.csd</summary>
      
    
    
    
    <category term="刷题" scheme="https://hzy2003628.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>IDA中的IDC脚本编写笔记</title>
    <link href="https://hzy2003628.top/2023/02/26/IDA%E4%B8%AD%E7%9A%84IDC%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E7%AC%94%E8%AE%B0/"/>
    <id>https://hzy2003628.top/2023/02/26/IDA%E4%B8%AD%E7%9A%84IDC%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E7%AC%94%E8%AE%B0/</id>
    <published>2023-02-26T08:33:43.888Z</published>
    <updated>2023-02-26T08:36:18.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDC"><a href="#IDC" class="headerlink" title="IDC"></a>IDC</h2><p>首先，什么是IDC？<br>IDC是IDA中支持的一门与C语言类似的语言，但是它是解释型的，并不是编译型的，于此同时IDC还融合了一些python中的元素以方便一些内容的处理。</p><p>在IDA中按下【shift+F2】可调出脚本编译器</p><h4 id="IDC语句"><a href="#IDC语句" class="headerlink" title="IDC语句"></a>IDC语句</h4><p>IDC支持C中的语言，除了switch</p><h4 id="IDC表达式"><a href="#IDC表达式" class="headerlink" title="IDC表达式"></a>IDC表达式</h4><p>IDC几乎都能支持C语言中的操作运算表达（加减乘除、判等家族），但是明确说明不支持+=。<br>在进行操作运算的时候，只有操作中存在64bit的操作，那么其他操作也会编程64bit的。</p><h4 id="IDC预定义符号"><a href="#IDC预定义符号" class="headerlink" title="IDC预定义符号"></a>IDC预定义符号</h4><p>IDC有一些符号是提前定义好了的，其内容和含义如下：</p><pre><code class="hljs bash">_NT_           IDA is running under MS Windows_LINUX_        IDA is running under Linux_MAC_          IDA is running under Mac OS X_UNIX_         IDA is running under Unix (linux or mac)_EA64_         64-bit version IDA_QT_           GUI version of IDA (Qt)_GUI           GUI version of IDA_TXT_          Text version of IDA_IDA_VERSION_  The current IDA version. For example: <span class="hljs-string">&quot;7.5&quot;</span>_IDAVER_       The current, numerical IDA version. For example: <span class="hljs-string">&quot;750&quot;</span> means v7.5</code></pre><h4 id="IDC字符串操作（切片）"><a href="#IDC字符串操作（切片）" class="headerlink" title="IDC字符串操作（切片）"></a>IDC字符串操作（切片）</h4><p>IDC中对于字符串的操作应该是借鉴了python，其string类型的操作支持切片操作（slices）。</p><pre><code class="hljs bash">str[i1:i2] - substring from i1 to i2. i2 is excluded，If i1 &gt;= i2, empty string is returned.str[idx]   - one character substring at <span class="hljs-string">&#x27;idx&#x27;</span>.             this is equivalent to str[idx:idx+1]str[:idx]  - substring from the beginning of the string to idx             this is equivalent to str[0:idx]str[idx:]  - substring from idx to the end of the string             this is equivalent to str[idx:0x7fffffff]</code></pre><h4 id="IDC异常处理"><a href="#IDC异常处理" class="headerlink" title="IDC异常处理"></a>IDC异常处理</h4><p>IDC异常处理中，可以使用的表达语句：</p><pre><code class="hljs bash">      auto e;      try       &#123;        ... some statements that cause a runtime error...      &#125;      catch ( e )      &#123;        // e holds the exception information        // it is an instance of the exception class      &#125;throw xx;  <span class="hljs-comment">#抛出</span></code></pre><h4 id="IDC程序"><a href="#IDC程序" class="headerlink" title="IDC程序"></a>IDC程序</h4><p>如果只是需要进行简单的查询或者查看，可以直接编写个别行的函数完成编写，但是如果一个脚本应用需要执行大量的IDC程序，并且还可能会在很多场景下需要重复使用，那么我们可能需要创建一个独立的IDC程序文件。<br>IDC程序文件要求用户使用用户定义的函数，并且至少定义一个没有参数的main函数，此外主程序文件中必须包含idc.idc头文件。</p><pre><code class="hljs c"><span class="hljs-meta">#idc程序文件基本结构</span>#Include &lt;idc.idc&gt;<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   Message(<span class="hljs-string">&quot;this is a IDC scipt file&quot;</span>);&#125;</code></pre><pre><code class="hljs bash">IDC支持如下C预处理指令：<span class="hljs-comment">#include &lt;文件&gt; ；将指定的文件包含在当前文件中</span><span class="hljs-comment">#define &lt;宏名称&gt;[可选项] ；创建宏，可以选择给宏分配指定的值</span><span class="hljs-comment">#ifdef &lt;名称&gt;; 测试指定的宏是否存在</span><span class="hljs-comment">#else 与ifdef一起使用</span><span class="hljs-comment">#endif 通过ifdef指定定义终止符</span><span class="hljs-comment">#undef &lt;名称&gt; ；删除指定的宏</span></code></pre><h4 id="常用idc函数"><a href="#常用idc函数" class="headerlink" title="常用idc函数"></a>常用idc函数</h4><h6 id="读取和修改数据的函数"><a href="#读取和修改数据的函数" class="headerlink" title="读取和修改数据的函数"></a>读取和修改数据的函数</h6><p>下面这些函数可用于访问IDA数据库中的各个字节、字及双字。</p><ul><li>long Byte(long addr): 从虚拟地址addr处读取一个字节（1字节）的值。</li><li>long Word(long addr): 从虚拟地址addr处读取一个字节（2字节）的值。</li><li>long Dword(long addr): 从虚拟地址addr处读取一个双字（4字节）的值。</li><li>void PatchByte(long addr,long val): 设置虚拟地址addr处一个字节（1字节）的值为val。</li><li>void PatchWord(long addr,long val): 设置虚拟地址addr处一个字节（2字节）的值为val。</li><li>void PatchDword(long addr,long val): 设置虚拟地址addr处一个双字（4字节）的值为val。</li><li>bool isLoaded(long addr): 如果虚拟地址addr中包含有效数据则返回，否则返回0。<h6 id="用户交互函数"><a href="#用户交互函数" class="headerlink" title="用户交互函数"></a>用户交互函数</h6>idc脚本没有任何调试工具，所以可以依靠输出函数实现调试。<br><img src="https://img-blog.csdnimg.cn/5a33ddc47f8a48a0af5be8e77f83be08.png" alt="一个个打太多了，别人总结好的"></li></ul><h6 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a>字符串操作函数</h6><p><img src="https://img-blog.csdnimg.cn/bc602657d9ec43a0aea0e64a308a2085.png" alt="在这里插入图片描述"></p><h6 id="数据库名称操作函数"><a href="#数据库名称操作函数" class="headerlink" title="数据库名称操作函数"></a>数据库名称操作函数</h6><p><img src="https://img-blog.csdnimg.cn/8aaa9c7fd18f4e3b9d932455f5b7733a.png" alt="在这里插入图片描述"></p><h6 id="处理函数的函数"><a href="#处理函数的函数" class="headerlink" title="处理函数的函数"></a>处理函数的函数</h6><p><img src="https://img-blog.csdnimg.cn/1c3b1c0afc194ea180a217184b99cedd.png" alt="在这里插入图片描述"></p><h6 id="代码交叉引用函数"><a href="#代码交叉引用函数" class="headerlink" title="代码交叉引用函数"></a>代码交叉引用函数</h6><p><img src="https://img-blog.csdnimg.cn/0ca0998cdf154bdf894f88c093b52630.png" alt="在这里插入图片描述"></p><h6 id="数据交叉引用函数"><a href="#数据交叉引用函数" class="headerlink" title="数据交叉引用函数"></a>数据交叉引用函数</h6><p><img src="https://img-blog.csdnimg.cn/18d94a93b590495f90a5eb18dc98b26d.png" alt="在这里插入图片描述"></p><h6 id="数据库操纵函数"><a href="#数据库操纵函数" class="headerlink" title="数据库操纵函数"></a>数据库操纵函数</h6><p><img src="https://img-blog.csdnimg.cn/3d52ee410bad4055bcc87821feab1cae.png" alt="在这里插入图片描述"></p><h6 id="数据库搜素函数"><a href="#数据库搜素函数" class="headerlink" title="数据库搜素函数"></a>数据库搜素函数</h6><p><img src="https://img-blog.csdnimg.cn/a1167f75c7564f9786b699f8c5803280.png" alt="在这里插入图片描述"></p><h6 id="反汇编行组件"><a href="#反汇编行组件" class="headerlink" title="反汇编行组件"></a>反汇编行组件</h6><p><img src="https://img-blog.csdnimg.cn/1abba0cd47214fc3af9a307cb84f632f.png" alt="在这里插入图片描述"></p><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><h6 id="简单的IF语句"><a href="#简单的IF语句" class="headerlink" title="简单的IF语句"></a>简单的IF语句</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> CurrAddress = ScreenEA();     <span class="hljs-keyword">if</span>(CurrAddress == <span class="hljs-number">0x401161</span>)    &#123;       Message(<span class="hljs-string">&quot;程序OEP =&gt; 0x%x \n&quot;</span>,CurrAddress);    &#125;    <span class="hljs-keyword">else</span>    &#123;      Message(<span class="hljs-string">&quot;没有扎到OEP \n&quot;</span>);    &#125;&#125;</code></pre><h6 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;        origEA = ScreenEA();    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);        funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);        <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>        <span class="hljs-comment">// NextHead 在currEA开始的位置寻找下一条指令的地址</span>    <span class="hljs-keyword">for</span>(currEA = funcStart; currEA != <span class="hljs-number">-1</span>; currEA=NextHead(currEA,funcEnd))    &#123;        Message(<span class="hljs-string">&quot;--&gt; %8x \n&quot;</span>,currEA);    &#125;&#125;</code></pre><h6 id="while语句实现"><a href="#while语句实现" class="headerlink" title="while语句实现"></a>while语句实现</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;        origEA = ScreenEA();    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);        funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);        <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>        <span class="hljs-keyword">while</span>(currEA != BADADDR)    &#123;        Message(<span class="hljs-string">&quot;--&gt; %x \n&quot;</span>,currEA);        currEA = NextHead(currEA,funcEnd);    &#125;&#125;</code></pre><h6 id="idc函数"><a href="#idc函数" class="headerlink" title="idc函数"></a>idc函数</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-comment">// 定义一个函数</span><span class="hljs-type">static</span> <span class="hljs-title function_">OutPutAddress</span><span class="hljs-params">(MyString)</span>&#123;    <span class="hljs-keyword">auto</span> currAddress;    currAddress = ScreenEA();    Message(<span class="hljs-string">&quot;%d \n&quot;</span>,MyString);    <span class="hljs-keyword">return</span> currAddress;&#125;<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> ret = OutPutAddress(<span class="hljs-number">123</span>);    Message(<span class="hljs-string">&quot;%x \n&quot;</span>,ret);    &#125;</code></pre><h6 id="idc获取函数名"><a href="#idc获取函数名" class="headerlink" title="idc获取函数名"></a>idc获取函数名</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;        origEA = ScreenEA();    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);        funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);        <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>        <span class="hljs-keyword">while</span>(currEA != BADADDR)    &#123;        Message(<span class="hljs-string">&quot;--&gt; %x name: %s \n&quot;</span>,currEA,GetFunctionName(currEA));        currEA = NextHead(currEA,funcEnd);    &#125;&#125;</code></pre><h6 id="idc枚举所有函数"><a href="#idc枚举所有函数" class="headerlink" title="idc枚举所有函数"></a>idc枚举所有函数</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> currAddr,func,endSeg,funcName,counter;        currAddr = ScreenEA();    func = SegStart(currAddr);    endSeg = SegEnd(currAddr);        Message(<span class="hljs-string">&quot;%x --&gt; %x \n&quot;</span>,func,endSeg);        counter = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(func != BADADDR &amp;&amp; func &lt; endSeg)    &#123;        funcName = GetFunctionName(func);        <span class="hljs-keyword">if</span>(funcName != <span class="hljs-string">&quot; &quot;</span>)        &#123;            Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,func,funcName);            counter++;        &#125;        func = NextFunction(func);    &#125;     &#125;</code></pre><h6 id="枚举指定函数并输出"><a href="#枚举指定函数并输出" class="headerlink" title="枚举指定函数并输出"></a>枚举指定函数并输出</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> currAddr,func,endSeg,funcName,counter;        currAddr = ScreenEA();    func = SegStart(currAddr);    endSeg = SegEnd(currAddr);        Message(<span class="hljs-string">&quot;%x --&gt; %x \n&quot;</span>,func,endSeg);        counter = <span class="hljs-number">0</span>;        <span class="hljs-keyword">while</span>(func != BADADDR &amp;&amp; func &lt; endSeg)    &#123;        funcName = GetFunctionName(func);        <span class="hljs-keyword">if</span>(funcName != <span class="hljs-string">&quot; &quot;</span>)        &#123;                    <span class="hljs-keyword">if</span>(funcName == <span class="hljs-string">&quot;__lock&quot;</span>)            &#123;                Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,func,funcName);            &#125;                        counter++;        &#125;        func = NextFunction(func);    &#125;&#125;</code></pre><h6 id="寻找特殊指令，并高亮显示"><a href="#寻找特殊指令，并高亮显示" class="headerlink" title="寻找特殊指令，并高亮显示"></a>寻找特殊指令，并高亮显示</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-keyword">auto</span> head, op;    head = NextHead(<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0xFFFFFFFF</span>);    <span class="hljs-keyword">while</span> ( head != BADADDR )    &#123;        op = GetMnem(head);        Message(<span class="hljs-string">&quot;%x %s \n&quot;</span>,head,op);                <span class="hljs-keyword">if</span> ( op == <span class="hljs-string">&quot;jmp&quot;</span> || op == <span class="hljs-string">&quot;call&quot;</span> )            SetColor(head, CIC_ITEM, <span class="hljs-number">0x010187</span>);                    <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;xor&quot;</span>)            SetColor(head, CIC_ITEM, <span class="hljs-number">0x010198</span>);        head = NextHead(head, <span class="hljs-number">0xFFFFFFFF</span>);    &#125;&#125;</code></pre><h6 id="ida-dump"><a href="#ida-dump" class="headerlink" title="ida dump"></a>ida dump</h6><p>将函数dump到本地</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">getFuncName</span><span class="hljs-params">(ea)</span>&#123;    <span class="hljs-keyword">auto</span> funcName = get_func_name(ea);          <span class="hljs-keyword">auto</span> dm = demangle_name(funcName, get_inf_attr(INF_LONG_DN));    <span class="hljs-keyword">if</span>(dm != <span class="hljs-number">0</span>)    &#123;        funcName = dm;    &#125;    <span class="hljs-keyword">return</span> funcName;&#125;<span class="hljs-type">static</span> <span class="hljs-title function_">functionDump</span><span class="hljs-params">(ea)</span>&#123;    <span class="hljs-keyword">auto</span> funcName = <span class="hljs-number">0</span>;    <span class="hljs-keyword">auto</span> end = <span class="hljs-number">0x0</span>;    <span class="hljs-keyword">auto</span> file_open = get_idb_path()[<span class="hljs-number">0</span>:<span class="hljs-number">-4</span>] + <span class="hljs-string">&quot;_dump.log&quot;</span>;    <span class="hljs-keyword">auto</span> stream = fopen(file_open, <span class="hljs-string">&quot;w&quot;</span>);    <span class="hljs-keyword">auto</span> peekAhead;    <span class="hljs-keyword">while</span>( ea != BADADDR )    &#123;        ea = NextFunction(ea);              peekAhead = NextFunction(ea);        end = FindFuncEnd(ea);           funcName = getFuncName(ea);        <span class="hljs-keyword">if</span>(peekAhead == BADADDR)        &#123;            <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">&quot;&#123; 0x%X, 0x%X, \&quot;%s\&quot; &#125;\n&quot;</span>, ea, end, funcName);            ea = peekAhead;            <span class="hljs-keyword">continue</span>;        &#125;            end = peekAhead - <span class="hljs-number">1</span>;                  <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">&quot;&#123; 0x%X, 0x%X, \&quot;%s\&quot; &#125;\n&quot;</span>, ea, end,funcName);    &#125;        fclose(stream);&#125;<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    functionDump(<span class="hljs-number">0x40000</span>);&#125;</code></pre><h6 id="全量反汇编："><a href="#全量反汇编：" class="headerlink" title="全量反汇编："></a>全量反汇编：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;    <span class="hljs-keyword">auto</span> decode = <span class="hljs-number">0x401000</span>;    <span class="hljs-keyword">auto</span> xref;        <span class="hljs-keyword">for</span>(xref = RfirstB(decode); xref != BADADDR; xref = RnextB(decode,xref))    &#123;         Message(<span class="hljs-string">&quot;xref: %x\n&quot;</span>,xref);        <span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>;      <span class="hljs-keyword">auto</span> inst = xref;    <span class="hljs-keyword">auto</span> op;                       <span class="hljs-keyword">while</span>((i &lt; <span class="hljs-number">100</span>) )       &#123;        inst = FindCode(inst,<span class="hljs-number">0x00</span>); <span class="hljs-comment">// flag set to backwards</span>      op = GetDisasm(inst); <span class="hljs-comment">// get</span>            Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,inst,op);        i++;       &#125;    &#125; &#125;</code></pre><h6 id="查找特定指令片段"><a href="#查找特定指令片段" class="headerlink" title="查找特定指令片段"></a>查找特定指令片段</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> currAddr,startSeg,endSeg;        currAddr = ScreenEA();    startSeg = SegStart(currAddr);    endSeg = SegEnd(currAddr);        Message(<span class="hljs-string">&quot;OEP = %x 起始地址: %x 结束地址: %x \n&quot;</span>,currAddr,startSeg,endSeg);        <span class="hljs-keyword">while</span>(startSeg &lt; endSeg)    &#123;        <span class="hljs-keyword">auto</span> op = GetDisasm(startSeg);                <span class="hljs-comment">// 查找第一条指令</span>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(op,<span class="hljs-string">&quot;push    esi&quot;</span>)==<span class="hljs-number">0</span>)        &#123;            startSeg++;            op = GetDisasm(startSeg);            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(op,<span class="hljs-string">&quot;push    edi&quot;</span>))            &#123;                Message(<span class="hljs-string">&quot;特征: %x \n&quot;</span>,startSeg<span class="hljs-number">-1</span>);            &#125;        &#125;        startSeg++;    &#125;&#125;</code></pre><h6 id="全局数组操作："><a href="#全局数组操作：" class="headerlink" title="全局数组操作："></a>全局数组操作：</h6><p>数组是全局的，并写入数据库，白嫖完了，一定得释放</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">// 创建数组元素</span>    <span class="hljs-keyword">auto</span> array_ptr = CreateArray(<span class="hljs-string">&quot;array&quot;</span>);    <span class="hljs-comment">// 获取数组指针</span>    <span class="hljs-keyword">auto</span> ptr = GetArrayId(<span class="hljs-string">&quot;array&quot;</span>);        Message(<span class="hljs-string">&quot;获取到的操作指针: %x \n&quot;</span>,ptr);        <span class="hljs-comment">// 设置两个字符串变量</span>    SetArrayString(ptr,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;hello&quot;</span>);    SetArrayString(ptr,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;lyshark&quot;</span>);        <span class="hljs-comment">// 设置两个整数变量</span>    SetArrayLong(ptr,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>);    SetArrayLong(ptr,<span class="hljs-number">3</span>,<span class="hljs-number">200</span>);        <span class="hljs-comment">// 如果提取字符串使用 AR_STR 标记 ，提取整数使用 AR_LONG</span>    <span class="hljs-keyword">auto</span> st = GetArrayElement(AR_STR,ptr,<span class="hljs-number">0</span>);    <span class="hljs-keyword">auto</span> st1 = GetArrayElement(AR_STR,ptr,<span class="hljs-number">1</span>);    Message(<span class="hljs-string">&quot;提取字符串变量: %s %s !\n&quot;</span>,st,st1);        <span class="hljs-keyword">auto</span> lo = GetArrayElement(AR_LONG,ptr,<span class="hljs-number">2</span>);    Message(<span class="hljs-string">&quot;提取整数变量: %d \n&quot;</span>,lo);        <span class="hljs-comment">// 删除数组的0号元素</span>    DelArrayElement(AR_STR,ptr,<span class="hljs-number">0</span>);    <span class="hljs-comment">// 注销整个数组</span>    DeleteArray(ptr);&#125;</code></pre><h6 id="字符串处理函数："><a href="#字符串处理函数：" class="headerlink" title="字符串处理函数："></a>字符串处理函数：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-comment">// 格式化字符串,类似于sprintf</span>    <span class="hljs-keyword">auto</span> name = form(<span class="hljs-string">&quot;hello %s&quot;</span>,<span class="hljs-string">&quot;lyshark&quot;</span>);    Message(<span class="hljs-string">&quot;格式化后的内容: %s \n&quot;</span>,name);        Message(<span class="hljs-string">&quot;十六进制转为整数: %d \n&quot;</span>,xtol(<span class="hljs-string">&quot;0x41&quot;</span>));    Message(<span class="hljs-string">&quot;十进制100转为八进制: %d \n&quot;</span>,ltoa(<span class="hljs-number">100</span>,<span class="hljs-number">8</span>));    Message(<span class="hljs-string">&quot;十进制100转换二进制: %d \n&quot;</span>,ltoa(<span class="hljs-number">100</span>,<span class="hljs-number">2</span>));    Message(<span class="hljs-string">&quot;字符A的ASCII: %d \n&quot;</span>,ord(<span class="hljs-string">&quot;A&quot;</span>));    Message(<span class="hljs-string">&quot;计算字符串长度: %d \n&quot;</span>,<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;hello lyshark&quot;</span>));        <span class="hljs-comment">// 在著字符串中寻找子串</span>    <span class="hljs-keyword">auto</span> main = <span class="hljs-string">&quot;hello lyshark&quot;</span>;    <span class="hljs-keyword">auto</span> sub = <span class="hljs-string">&quot;lyshark&quot;</span>;    Message(<span class="hljs-string">&quot;寻找子串: %d \n&quot;</span>,<span class="hljs-built_in">strstr</span>(main,sub));&#125;</code></pre><h6 id="反汇编函数："><a href="#反汇编函数：" class="headerlink" title="反汇编函数："></a>反汇编函数：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 索索特征码</span>    <span class="hljs-keyword">auto</span> code = FindBinary(<span class="hljs-number">0x401020</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;55 8B EC&quot;</span>);    Message(<span class="hljs-string">&quot;%x \n&quot;</span>,code);    <span class="hljs-comment">// 反汇反汇编代码</span>    code = GetDisasm(<span class="hljs-number">0x401000</span>);    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);        <span class="hljs-comment">// 反汇 位于地址处的指令</span>    code = GetMnem(<span class="hljs-number">0x401000</span>);    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);        <span class="hljs-comment">// 反汇opcode</span>    code = GetOpnd(<span class="hljs-number">0x401070</span>,<span class="hljs-number">0</span>);    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);&#125;</code></pre><h6 id="枚举函数（枚举栈帧）"><a href="#枚举函数（枚举栈帧）" class="headerlink" title="枚举函数（枚举栈帧）"></a>枚举函数（枚举栈帧）</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> addr,args,end,locals,frame,firstArg,name,ret;        <span class="hljs-keyword">for</span>(addr = NextFunction(addr); addr != BADADDR; addr = NextFunction(addr))    &#123;        name = Name(addr);        end = GetFunctionAttr(addr,FUNCATTR_END);        locals = GetFunctionAttr(addr,FUNCATTR_FRSIZE);        <span class="hljs-comment">// 得到栈帧大小</span>        frame = GetFrame(addr);        <span class="hljs-comment">// 栈中保存返回地址偏移量</span>        ret = GetMemberOffset(frame,<span class="hljs-string">&quot; r&quot;</span>);        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;        firstArg = ret +<span class="hljs-number">4</span>;        args = GetStrucSize(frame) - firstArg;        Message(<span class="hljs-string">&quot;函数: %s 开始: 0x%x 结束: 0x%x 大小: %d bytes 栈帧: %d bytes (%d args) \n&quot;</span>,name,addr,end,locals,args,args/<span class="hljs-number">4</span>);    &#125;&#125;</code></pre><h6 id="检索交叉引用（全部）："><a href="#检索交叉引用（全部）：" class="headerlink" title="检索交叉引用（全部）："></a>检索交叉引用（全部）：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;    <span class="hljs-keyword">auto</span> func,end,target,inst,name,flags,xref;        flags = SEARCH_DOWN | SEARCH_NEXT;        func = GetFunctionAttr(ScreenEA(),FUNCATTR_START);        <span class="hljs-keyword">if</span>(func != <span class="hljs-number">-1</span>)    &#123;        name =Name(func);        end = GetFunctionAttr(func,FUNCATTR_END);        <span class="hljs-keyword">for</span>(inst = func;inst &lt; end; inst = FindCode(inst,flags))        &#123;            <span class="hljs-keyword">for</span>(target = Rfirst(inst);target != BADADDR; target = Rnext(inst,target))            &#123;                xref = XrefType();                <span class="hljs-keyword">if</span>(xref == fl_CN || xref == fl_CF)                &#123;                    Message(<span class="hljs-string">&quot;%s call -&gt; %sfrom --&gt; %x \n&quot;</span>,name,Name(target),inst);                &#125;            &#125;        &#125;    &#125;&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDC&quot;&gt;&lt;a href=&quot;#IDC&quot; class=&quot;headerlink&quot; title=&quot;IDC&quot;&gt;&lt;/a&gt;IDC&lt;/h2&gt;&lt;p&gt;首先，什么是IDC？&lt;br&gt;IDC是IDA中支持的一门与C语言类似的语言，但是它是解释型的，并不是编译型的，于此同时IDC还融合了一</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>memset()函数</title>
    <link href="https://hzy2003628.top/2023/02/23/memset%E5%87%BD%E6%95%B0/"/>
    <id>https://hzy2003628.top/2023/02/23/memset%E5%87%BD%E6%95%B0/</id>
    <published>2023-02-23T12:15:59.193Z</published>
    <updated>2023-02-23T12:19:49.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="memset函数"><a href="#memset函数" class="headerlink" title="memset函数"></a>memset函数</h1><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>C 库函数 void *memset(void *str, int c, size_t n) 复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。</p><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>下面是memset函数的声明</p><pre><code class="hljs bash">void *memset(void *str, int c, size_t n)</code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>str</strong>   –指向要填充的内存块</li><li><strong>c</strong>  –要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式</li><li><strong>n</strong>  –要被设置为该值的字符数</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>该值返回一个指向存储区 str 的指针</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;memset函数&quot;&gt;&lt;a href=&quot;#memset函数&quot; class=&quot;headerlink&quot; title=&quot;memset函数&quot;&gt;&lt;/a&gt;memset函数&lt;/h1&gt;&lt;h3 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>异或算法</title>
    <link href="https://hzy2003628.top/2023/02/23/%E5%BC%82%E6%88%96%E7%AE%97%E6%B3%95/"/>
    <id>https://hzy2003628.top/2023/02/23/%E5%BC%82%E6%88%96%E7%AE%97%E6%B3%95/</id>
    <published>2023-02-23T12:15:28.839Z</published>
    <updated>2023-02-21T13:02:00.409Z</updated>
    
    <content type="html"><![CDATA[<p>异或算法<br><strong>相同为0，不同为1</strong><br>异或的数学符号为”⊕”    在计算机中通常用”^”的符号表示   异或略称为XOR、EOR、EX-OR</p><p>用途：<br>1、交互两个数：a=5,b=10,用异或实现交换</p><p>程序代码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;   <span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;   a=a^b;   b=a^b;<span class="hljs-comment">//   a=a^b;</span>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,a,b);   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>2、因为电脑的数都是二进制的，所以可以转化二进制的位数和统计二进制中1或者0是奇数还是偶数。</p><p>（1):位反转<br>举例：10001000 在一些情况下，第四位和第五位需要反转，可以用10001000与00011000进行异或运算。<br>10001000 ^ 00011000 = 10010000<br>(2):统计某一位的奇偶数<br>将某个元素中的每一位逐步异或.<br>例如a1=1010，则b1=1 ^ 0 ^ 1 ^ 0 = 0，由此可以判断a中为1的位数是奇数还是偶数。<br>例如a2=10110，则b2=1 ^ 0 ^ 1 ^ 1 ^ 0 =1，由此可以判断a中为1的位数是奇数还是偶数。</p><p>3、找出序列中单个最小的数字：</p><p>程序代码：</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;   <span class="hljs-type">int</span> a,b,c,d,e,f,n,m;   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e);   n=a^b^c^d^e;   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><p>扩展：&amp;（与）运算<br>都是1时结果才为1；<br>二进制与运算规则:1&amp;1=1 1&amp;0=0 0&amp;0=0</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;异或算法&lt;br&gt;&lt;strong&gt;相同为0，不同为1&lt;/strong&gt;&lt;br&gt;异或的数学符号为”⊕”    在计算机中通常用”^”的符号表示   异或略称为XOR、EOR、EX-OR&lt;/p&gt;
&lt;p&gt;用途：&lt;br&gt;1、交互两个数：a=5,b=10,用异或实现交换&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常见文件头</title>
    <link href="https://hzy2003628.top/2023/02/23/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%B4/"/>
    <id>https://hzy2003628.top/2023/02/23/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%B4/</id>
    <published>2023-02-23T12:15:28.837Z</published>
    <updated>2023-02-21T13:06:44.786Z</updated>
    
    <content type="html"><![CDATA[<p>常见文件头：<br>文件类型：             文件头信息：                                    文件尾信息：<br>JPEG (jpg)             FFD8FFE0或FFD8FFE1或FFD8FFE8                    FF<br>PNG (png)             89 50 4E 47                                        00 3B<br>pdf                     25 50 44 46 2D 31 2E<br>Windows Password (pwl) E3 82 85 96<br>RAR                     52 61 72 21<br>ZIP Archive (zip)         50 4B 03 04                                        50 4B<br>压缩包                 PK<br>Word/Excel (xls.or.doc)     D0 CF 11 E0<br>HTML (html)             68 74 6D 6C 3E<br>MIDI (mid)              4D 54 68 64<br>7z                       37 7A BC AF 27 1C<br>GIF                       47 49 46 38 39 61<br>bmp                       42 4D 76 68</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见文件头：&lt;br&gt;文件类型：             文件头信息：                                    文件尾信息：&lt;br&gt;JPEG (jpg)             FFD8FFE0或FFD8FFE1或FFD8FFE8        </summary>
      
    
    
    
    
  </entry>
  
</feed>
